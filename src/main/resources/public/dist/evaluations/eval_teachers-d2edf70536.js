var eval_teachers =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(7);


/***/ },
/* 1 */,
/* 2 */
/***/ function(module, exports) {

	module.exports = entcore;

/***/ },
/* 3 */,
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {!function(a,b){ true?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return le.apply(null,arguments)}
	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function b(a){le=a}function c(a){return a instanceof Array||"[object Array]"===Object.prototype.toString.call(a)}function d(a){
	// IE8 will treat undefined and null as object if it wasn't for
	// input != null
	return null!=a&&"[object Object]"===Object.prototype.toString.call(a)}function e(a){var b;for(b in a)
	// even if its not own property I'd still call it non-empty
	return!1;return!0}function f(a){return"number"==typeof a||"[object Number]"===Object.prototype.toString.call(a)}function g(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function h(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function i(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function j(a,b){for(var c in b)i(b,c)&&(a[c]=b[c]);return i(b,"toString")&&(a.toString=b.toString),i(b,"valueOf")&&(a.valueOf=b.valueOf),a}function k(a,b,c,d){return rb(a,b,c,d,!0).utc()}function l(){
	// We need to deep clone this object.
	return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function m(a){return null==a._pf&&(a._pf=l()),a._pf}function n(a){if(null==a._isValid){var b=m(a),c=ne.call(b.parsedDateParts,function(a){return null!=a}),d=!isNaN(a._d.getTime())&&b.overflow<0&&!b.empty&&!b.invalidMonth&&!b.invalidWeekday&&!b.nullInput&&!b.invalidFormat&&!b.userInvalidated&&(!b.meridiem||b.meridiem&&c);if(a._strict&&(d=d&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour),null!=Object.isFrozen&&Object.isFrozen(a))return d;a._isValid=d}return a._isValid}function o(a){var b=k(NaN);return null!=a?j(m(b),a):m(b).userInvalidated=!0,b}function p(a){return void 0===a}function q(a,b){var c,d,e;if(p(b._isAMomentObject)||(a._isAMomentObject=b._isAMomentObject),p(b._i)||(a._i=b._i),p(b._f)||(a._f=b._f),p(b._l)||(a._l=b._l),p(b._strict)||(a._strict=b._strict),p(b._tzm)||(a._tzm=b._tzm),p(b._isUTC)||(a._isUTC=b._isUTC),p(b._offset)||(a._offset=b._offset),p(b._pf)||(a._pf=m(b)),p(b._locale)||(a._locale=b._locale),oe.length>0)for(c in oe)d=oe[c],e=b[d],p(e)||(a[d]=e);return a}
	// Moment prototype object
	function r(b){q(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),
	// Prevent infinite loop in case updateOffset creates new moment
	// objects.
	pe===!1&&(pe=!0,a.updateOffset(this),pe=!1)}function s(a){return a instanceof r||null!=a&&null!=a._isAMomentObject}function t(a){return a<0?Math.ceil(a)||0:Math.floor(a)}function u(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=t(b)),c}
	// compare two arrays, return the number of differences
	function v(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;d<e;d++)(c&&a[d]!==b[d]||!c&&u(a[d])!==u(b[d]))&&g++;return g+f}function w(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function x(b,c){var d=!0;return j(function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,b),d){for(var e,f=[],g=0;g<arguments.length;g++){if(e="","object"==typeof arguments[g]){e+="\n["+g+"] ";for(var h in arguments[0])e+=h+": "+arguments[0][h]+", ";e=e.slice(0,-2)}else e=arguments[g];f.push(e)}w(b+"\nArguments: "+Array.prototype.slice.call(f).join("")+"\n"+(new Error).stack),d=!1}return c.apply(this,arguments)},c)}function y(b,c){null!=a.deprecationHandler&&a.deprecationHandler(b,c),qe[b]||(w(c),qe[b]=!0)}function z(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}function A(a){var b,c;for(c in a)b=a[c],z(b)?this[c]=b:this["_"+c]=b;this._config=a,
	// Lenient ordinal parsing accepts just a number in addition to
	// number + (possibly) stuff coming from _ordinalParseLenient.
	this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function B(a,b){var c,e=j({},a);for(c in b)i(b,c)&&(d(a[c])&&d(b[c])?(e[c]={},j(e[c],a[c]),j(e[c],b[c])):null!=b[c]?e[c]=b[c]:delete e[c]);for(c in a)i(a,c)&&!i(b,c)&&d(a[c])&&(
	// make sure changes to properties don't modify parent config
	e[c]=j({},e[c]));return e}function C(a){null!=a&&this.set(a)}function D(a,b,c){var d=this._calendar[a]||this._calendar.sameElse;return z(d)?d.call(b,c):d}function E(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function F(){return this._invalidDate}function G(a){return this._ordinal.replace("%d",a)}function H(a,b,c,d){var e=this._relativeTime[c];return z(e)?e(a,b,c,d):e.replace(/%d/i,a)}function I(a,b){var c=this._relativeTime[a>0?"future":"past"];return z(c)?c(b):c.replace(/%s/i,b)}function J(a,b){var c=a.toLowerCase();Ae[c]=Ae[c+"s"]=Ae[b]=a}function K(a){return"string"==typeof a?Ae[a]||Ae[a.toLowerCase()]:void 0}function L(a){var b,c,d={};for(c in a)i(a,c)&&(b=K(c),b&&(d[b]=a[c]));return d}function M(a,b){Be[a]=b}function N(a){var b=[];for(var c in a)b.push({unit:c,priority:Be[c]});return b.sort(function(a,b){return a.priority-b.priority}),b}function O(b,c){return function(d){return null!=d?(Q(this,b,d),a.updateOffset(this,c),this):P(this,b)}}function P(a,b){return a.isValid()?a._d["get"+(a._isUTC?"UTC":"")+b]():NaN}function Q(a,b,c){a.isValid()&&a._d["set"+(a._isUTC?"UTC":"")+b](c)}
	// MOMENTS
	function R(a){return a=K(a),z(this[a])?this[a]():this}function S(a,b){if("object"==typeof a){a=L(a);for(var c=N(a),d=0;d<c.length;d++)this[c[d].unit](a[c[d].unit])}else if(a=K(a),z(this[a]))return this[a](b);return this}function T(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}
	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function U(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Fe[a]=e),b&&(Fe[b[0]]=function(){return T(e.apply(this,arguments),b[1],b[2])}),c&&(Fe[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function V(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function W(a){var b,c,d=a.match(Ce);for(b=0,c=d.length;b<c;b++)Fe[d[b]]?d[b]=Fe[d[b]]:d[b]=V(d[b]);return function(b){var e,f="";for(e=0;e<c;e++)f+=d[e]instanceof Function?d[e].call(b,a):d[e];return f}}
	// format date using native date object
	function X(a,b){return a.isValid()?(b=Y(b,a.localeData()),Ee[b]=Ee[b]||W(b),Ee[b](a)):a.localeData().invalidDate()}function Y(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(De.lastIndex=0;d>=0&&De.test(a);)a=a.replace(De,c),De.lastIndex=0,d-=1;return a}function Z(a,b,c){Xe[a]=z(b)?b:function(a,d){return a&&c?c:b}}function $(a,b){return i(Xe,a)?Xe[a](b._strict,b._locale):new RegExp(_(a))}
	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function _(a){return aa(a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}))}function aa(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ba(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),f(b)&&(d=function(a,c){c[b]=u(a)}),c=0;c<a.length;c++)Ye[a[c]]=d}function ca(a,b){ba(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function da(a,b,c){null!=b&&i(Ye,a)&&Ye[a](b,c._a,c,a)}function ea(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function fa(a,b){return a?c(this._months)?this._months[a.month()]:this._months[(this._months.isFormat||hf).test(b)?"format":"standalone"][a.month()]:this._months}function ga(a,b){return a?c(this._monthsShort)?this._monthsShort[a.month()]:this._monthsShort[hf.test(b)?"format":"standalone"][a.month()]:this._monthsShort}function ha(a,b,c){var d,e,f,g=a.toLocaleLowerCase();if(!this._monthsParse)for(
	// this is not used
	this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],d=0;d<12;++d)f=k([2e3,d]),this._shortMonthsParse[d]=this.monthsShort(f,"").toLocaleLowerCase(),this._longMonthsParse[d]=this.months(f,"").toLocaleLowerCase();return c?"MMM"===b?(e=gf.call(this._shortMonthsParse,g),e!==-1?e:null):(e=gf.call(this._longMonthsParse,g),e!==-1?e:null):"MMM"===b?(e=gf.call(this._shortMonthsParse,g),e!==-1?e:(e=gf.call(this._longMonthsParse,g),e!==-1?e:null)):(e=gf.call(this._longMonthsParse,g),e!==-1?e:(e=gf.call(this._shortMonthsParse,g),e!==-1?e:null))}function ia(a,b,c){var d,e,f;if(this._monthsParseExact)return ha.call(this,a,b,c);
	// TODO: add sorting
	// Sorting makes sure if one month (or abbr) is a prefix of another
	// see sorting in computeMonthsParse
	for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;d<12;d++){
	// test the regex
	if(
	// make the regex if we don't have it already
	e=k([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}
	// MOMENTS
	function ja(a,b){var c;if(!a.isValid())
	// No op
	return a;if("string"==typeof b)if(/^\d+$/.test(b))b=u(b);else
	// TODO: Another silent failure?
	if(b=a.localeData().monthsParse(b),!f(b))return a;return c=Math.min(a.date(),ea(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a}function ka(b){return null!=b?(ja(this,b),a.updateOffset(this,!0),this):P(this,"Month")}function la(){return ea(this.year(),this.month())}function ma(a){return this._monthsParseExact?(i(this,"_monthsRegex")||oa.call(this),a?this._monthsShortStrictRegex:this._monthsShortRegex):(i(this,"_monthsShortRegex")||(this._monthsShortRegex=lf),this._monthsShortStrictRegex&&a?this._monthsShortStrictRegex:this._monthsShortRegex)}function na(a){return this._monthsParseExact?(i(this,"_monthsRegex")||oa.call(this),a?this._monthsStrictRegex:this._monthsRegex):(i(this,"_monthsRegex")||(this._monthsRegex=mf),this._monthsStrictRegex&&a?this._monthsStrictRegex:this._monthsRegex)}function oa(){function a(a,b){return b.length-a.length}var b,c,d=[],e=[],f=[];for(b=0;b<12;b++)
	// make the regex if we don't have it already
	c=k([2e3,b]),d.push(this.monthsShort(c,"")),e.push(this.months(c,"")),f.push(this.months(c,"")),f.push(this.monthsShort(c,""));for(
	// Sorting makes sure if one month (or abbr) is a prefix of another it
	// will match the longer piece.
	d.sort(a),e.sort(a),f.sort(a),b=0;b<12;b++)d[b]=aa(d[b]),e[b]=aa(e[b]);for(b=0;b<24;b++)f[b]=aa(f[b]);this._monthsRegex=new RegExp("^("+f.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+e.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+d.join("|")+")","i")}
	// HELPERS
	function pa(a){return qa(a)?366:365}function qa(a){return a%4===0&&a%100!==0||a%400===0}function ra(){return qa(this.year())}function sa(a,b,c,d,e,f,g){
	//can't just apply() to create a date:
	//http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	var h=new Date(a,b,c,d,e,f,g);
	//the date constructor remaps years 0-99 to 1900-1999
	return a<100&&a>=0&&isFinite(h.getFullYear())&&h.setFullYear(a),h}function ta(a){var b=new Date(Date.UTC.apply(null,arguments));
	//the Date.UTC function remaps years 0-99 to 1900-1999
	return a<100&&a>=0&&isFinite(b.getUTCFullYear())&&b.setUTCFullYear(a),b}
	// start-of-first-week - start-of-year
	function ua(a,b,c){var// first-week day -- which january is always in the first week (4 for iso, 1 for other)
	d=7+b-c,
	// first-week day local weekday -- which local weekday is fwd
	e=(7+ta(a,0,d).getUTCDay()-b)%7;return-e+d-1}
	//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function va(a,b,c,d,e){var f,g,h=(7+c-d)%7,i=ua(a,d,e),j=1+7*(b-1)+h+i;return j<=0?(f=a-1,g=pa(f)+j):j>pa(a)?(f=a+1,g=j-pa(a)):(f=a,g=j),{year:f,dayOfYear:g}}function wa(a,b,c){var d,e,f=ua(a.year(),b,c),g=Math.floor((a.dayOfYear()-f-1)/7)+1;return g<1?(e=a.year()-1,d=g+xa(e,b,c)):g>xa(a.year(),b,c)?(d=g-xa(a.year(),b,c),e=a.year()+1):(e=a.year(),d=g),{week:d,year:e}}function xa(a,b,c){var d=ua(a,b,c),e=ua(a+1,b,c);return(pa(a)-d+e)/7}
	// HELPERS
	// LOCALES
	function ya(a){return wa(a,this._week.dow,this._week.doy).week}function za(){return this._week.dow}function Aa(){return this._week.doy}
	// MOMENTS
	function Ba(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function Ca(a){var b=wa(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}
	// HELPERS
	function Da(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function Ea(a,b){return"string"==typeof a?b.weekdaysParse(a)%7||7:isNaN(a)?null:a}function Fa(a,b){return a?c(this._weekdays)?this._weekdays[a.day()]:this._weekdays[this._weekdays.isFormat.test(b)?"format":"standalone"][a.day()]:this._weekdays}function Ga(a){return a?this._weekdaysShort[a.day()]:this._weekdaysShort}function Ha(a){return a?this._weekdaysMin[a.day()]:this._weekdaysMin}function Ia(a,b,c){var d,e,f,g=a.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],d=0;d<7;++d)f=k([2e3,1]).day(d),this._minWeekdaysParse[d]=this.weekdaysMin(f,"").toLocaleLowerCase(),this._shortWeekdaysParse[d]=this.weekdaysShort(f,"").toLocaleLowerCase(),this._weekdaysParse[d]=this.weekdays(f,"").toLocaleLowerCase();return c?"dddd"===b?(e=gf.call(this._weekdaysParse,g),e!==-1?e:null):"ddd"===b?(e=gf.call(this._shortWeekdaysParse,g),e!==-1?e:null):(e=gf.call(this._minWeekdaysParse,g),e!==-1?e:null):"dddd"===b?(e=gf.call(this._weekdaysParse,g),e!==-1?e:(e=gf.call(this._shortWeekdaysParse,g),e!==-1?e:(e=gf.call(this._minWeekdaysParse,g),e!==-1?e:null))):"ddd"===b?(e=gf.call(this._shortWeekdaysParse,g),e!==-1?e:(e=gf.call(this._weekdaysParse,g),e!==-1?e:(e=gf.call(this._minWeekdaysParse,g),e!==-1?e:null))):(e=gf.call(this._minWeekdaysParse,g),e!==-1?e:(e=gf.call(this._weekdaysParse,g),e!==-1?e:(e=gf.call(this._shortWeekdaysParse,g),e!==-1?e:null)))}function Ja(a,b,c){var d,e,f;if(this._weekdaysParseExact)return Ia.call(this,a,b,c);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),d=0;d<7;d++){
	// test the regex
	if(
	// make the regex if we don't have it already
	e=k([2e3,1]).day(d),c&&!this._fullWeekdaysParse[d]&&(this._fullWeekdaysParse[d]=new RegExp("^"+this.weekdays(e,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[d]=new RegExp("^"+this.weekdaysShort(e,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[d]=new RegExp("^"+this.weekdaysMin(e,"").replace(".",".?")+"$","i")),this._weekdaysParse[d]||(f="^"+this.weekdays(e,"")+"|^"+this.weekdaysShort(e,"")+"|^"+this.weekdaysMin(e,""),this._weekdaysParse[d]=new RegExp(f.replace(".",""),"i")),c&&"dddd"===b&&this._fullWeekdaysParse[d].test(a))return d;if(c&&"ddd"===b&&this._shortWeekdaysParse[d].test(a))return d;if(c&&"dd"===b&&this._minWeekdaysParse[d].test(a))return d;if(!c&&this._weekdaysParse[d].test(a))return d}}
	// MOMENTS
	function Ka(a){if(!this.isValid())return null!=a?this:NaN;var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Da(a,this.localeData()),this.add(a-b,"d")):b}function La(a){if(!this.isValid())return null!=a?this:NaN;var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function Ma(a){if(!this.isValid())return null!=a?this:NaN;
	// behaves the same as moment#day except
	// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	// as a setter, sunday should belong to the previous week.
	if(null!=a){var b=Ea(a,this.localeData());return this.day(this.day()%7?b:b-7)}return this.day()||7}function Na(a){return this._weekdaysParseExact?(i(this,"_weekdaysRegex")||Qa.call(this),a?this._weekdaysStrictRegex:this._weekdaysRegex):(i(this,"_weekdaysRegex")||(this._weekdaysRegex=sf),this._weekdaysStrictRegex&&a?this._weekdaysStrictRegex:this._weekdaysRegex)}function Oa(a){return this._weekdaysParseExact?(i(this,"_weekdaysRegex")||Qa.call(this),a?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(i(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=tf),this._weekdaysShortStrictRegex&&a?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Pa(a){return this._weekdaysParseExact?(i(this,"_weekdaysRegex")||Qa.call(this),a?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(i(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=uf),this._weekdaysMinStrictRegex&&a?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function Qa(){function a(a,b){return b.length-a.length}var b,c,d,e,f,g=[],h=[],i=[],j=[];for(b=0;b<7;b++)
	// make the regex if we don't have it already
	c=k([2e3,1]).day(b),d=this.weekdaysMin(c,""),e=this.weekdaysShort(c,""),f=this.weekdays(c,""),g.push(d),h.push(e),i.push(f),j.push(d),j.push(e),j.push(f);for(
	// Sorting makes sure if one weekday (or abbr) is a prefix of another it
	// will match the longer piece.
	g.sort(a),h.sort(a),i.sort(a),j.sort(a),b=0;b<7;b++)h[b]=aa(h[b]),i[b]=aa(i[b]),j[b]=aa(j[b]);this._weekdaysRegex=new RegExp("^("+j.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+h.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+g.join("|")+")","i")}
	// FORMATTING
	function Ra(){return this.hours()%12||12}function Sa(){return this.hours()||24}function Ta(a,b){U(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}
	// PARSING
	function Ua(a,b){return b._meridiemParse}
	// LOCALES
	function Va(a){
	// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	// Using charAt should be more compatible.
	return"p"===(a+"").toLowerCase().charAt(0)}function Wa(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Xa(a){return a?a.toLowerCase().replace("_","-"):a}
	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function Ya(a){for(var b,c,d,e,f=0;f<a.length;){for(e=Xa(a[f]).split("-"),b=e.length,c=Xa(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=Za(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&v(e,c,!0)>=b-1)
	//the next array item is better than a shallower substring of this one
	break;b--}f++}return null}function Za(a){var b=null;
	// TODO: Find a better way to register and load all the locales in Node
	if(!zf[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=vf._abbr,!(function webpackMissingModule() { var e = new Error("Cannot find module \"./locale\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()),
	// because defineLocale currently also sets the global locale, we
	// want to undo that for lazy loaded locales
	$a(b)}catch(a){}return zf[a]}
	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function $a(a,b){var c;
	// moment.duration._locale = moment._locale = data;
	return a&&(c=p(b)?bb(a):_a(a,b),c&&(vf=c)),vf._abbr}function _a(a,b){if(null!==b){var c=yf;if(b.abbr=a,null!=zf[a])y("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),c=zf[a]._config;else if(null!=b.parentLocale){if(null==zf[b.parentLocale])return Af[b.parentLocale]||(Af[b.parentLocale]=[]),Af[b.parentLocale].push({name:a,config:b}),null;c=zf[b.parentLocale]._config}
	// backwards compat for now: also set the locale
	// make sure we set the locale AFTER all child locales have been
	// created, so we won't end up with the child locale set.
	return zf[a]=new C(B(c,b)),Af[a]&&Af[a].forEach(function(a){_a(a.name,a.config)}),$a(a),zf[a]}
	// useful for testing
	return delete zf[a],null}function ab(a,b){if(null!=b){var c,d=yf;
	// MERGE
	null!=zf[a]&&(d=zf[a]._config),b=B(d,b),c=new C(b),c.parentLocale=zf[a],zf[a]=c,
	// backwards compat for now: also set the locale
	$a(a)}else
	// pass null for config to unupdate, useful for tests
	null!=zf[a]&&(null!=zf[a].parentLocale?zf[a]=zf[a].parentLocale:null!=zf[a]&&delete zf[a]);return zf[a]}
	// returns locale data
	function bb(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return vf;if(!c(a)){if(
	//short-circuit everything else
	b=Za(a))return b;a=[a]}return Ya(a)}function cb(){return te(zf)}function db(a){var b,c=a._a;return c&&m(a).overflow===-2&&(b=c[$e]<0||c[$e]>11?$e:c[_e]<1||c[_e]>ea(c[Ze],c[$e])?_e:c[af]<0||c[af]>24||24===c[af]&&(0!==c[bf]||0!==c[cf]||0!==c[df])?af:c[bf]<0||c[bf]>59?bf:c[cf]<0||c[cf]>59?cf:c[df]<0||c[df]>999?df:-1,m(a)._overflowDayOfYear&&(b<Ze||b>_e)&&(b=_e),m(a)._overflowWeeks&&b===-1&&(b=ef),m(a)._overflowWeekday&&b===-1&&(b=ff),m(a).overflow=b),a}
	// date from iso format
	function eb(a){var b,c,d,e,f,g,h=a._i,i=Bf.exec(h)||Cf.exec(h);if(i){for(m(a).iso=!0,b=0,c=Ef.length;b<c;b++)if(Ef[b][1].exec(i[1])){e=Ef[b][0],d=Ef[b][2]!==!1;break}if(null==e)return void(a._isValid=!1);if(i[3]){for(b=0,c=Ff.length;b<c;b++)if(Ff[b][1].exec(i[3])){
	// match[2] should be 'T' or space
	f=(i[2]||" ")+Ff[b][0];break}if(null==f)return void(a._isValid=!1)}if(!d&&null!=f)return void(a._isValid=!1);if(i[4]){if(!Df.exec(i[4]))return void(a._isValid=!1);g="Z"}a._f=e+(f||"")+(g||""),kb(a)}else a._isValid=!1}
	// date from iso format or fallback
	function fb(b){var c=Gf.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(eb(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}
	// Pick the first defined of two or three arguments.
	function gb(a,b,c){return null!=a?a:null!=b?b:c}function hb(b){
	// hooks is actually the exported moment object
	var c=new Date(a.now());return b._useUTC?[c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()]:[c.getFullYear(),c.getMonth(),c.getDate()]}
	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function ib(a){var b,c,d,e,f=[];if(!a._d){
	// Default to current date.
	// * if no year, month, day of month are given, default to today
	// * if day of month is given, default month and year
	// * if month is given, default only year
	// * if year is given, don't default anything
	for(d=hb(a),
	//compute day of the year from weeks and weekdays
	a._w&&null==a._a[_e]&&null==a._a[$e]&&jb(a),
	//if the day of the year is set, figure out what it is
	a._dayOfYear&&(e=gb(a._a[Ze],d[Ze]),a._dayOfYear>pa(e)&&(m(a)._overflowDayOfYear=!0),c=ta(e,0,a._dayOfYear),a._a[$e]=c.getUTCMonth(),a._a[_e]=c.getUTCDate()),b=0;b<3&&null==a._a[b];++b)a._a[b]=f[b]=d[b];
	// Zero out whatever was not defaulted, including time
	for(;b<7;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];
	// Check for 24:00:00.000
	24===a._a[af]&&0===a._a[bf]&&0===a._a[cf]&&0===a._a[df]&&(a._nextDay=!0,a._a[af]=0),a._d=(a._useUTC?ta:sa).apply(null,f),
	// Apply timezone offset from input. The actual utcOffset can be changed
	// with parseZone.
	null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[af]=24)}}function jb(a){var b,c,d,e,f,g,h,i;if(b=a._w,null!=b.GG||null!=b.W||null!=b.E)f=1,g=4,
	// TODO: We need to take the current isoWeekYear, but that depends on
	// how we interpret now (local, utc, fixed offset). So create
	// a now version of current config (take local/utc/offset flags, and
	// create now).
	c=gb(b.GG,a._a[Ze],wa(sb(),1,4).year),d=gb(b.W,1),e=gb(b.E,1),(e<1||e>7)&&(i=!0);else{f=a._locale._week.dow,g=a._locale._week.doy;var j=wa(sb(),f,g);c=gb(b.gg,a._a[Ze],j.year),
	// Default to current week.
	d=gb(b.w,j.week),null!=b.d?(
	// weekday -- low day numbers are considered next week
	e=b.d,(e<0||e>6)&&(i=!0)):null!=b.e?(
	// local weekday -- counting starts from begining of week
	e=b.e+f,(b.e<0||b.e>6)&&(i=!0)):
	// default to begining of week
	e=f}d<1||d>xa(c,f,g)?m(a)._overflowWeeks=!0:null!=i?m(a)._overflowWeekday=!0:(h=va(c,d,e,f,g),a._a[Ze]=h.year,a._dayOfYear=h.dayOfYear)}
	// date from string and format string
	function kb(b){
	// TODO: Move this to another part of the creation flow to prevent circular deps
	if(b._f===a.ISO_8601)return void eb(b);b._a=[],m(b).empty=!0;
	// This array is used to make a Date, either with `new Date` or `Date.UTC`
	var c,d,e,f,g,h=""+b._i,i=h.length,j=0;for(e=Y(b._f,b._locale).match(Ce)||[],c=0;c<e.length;c++)f=e[c],d=(h.match($(f,b))||[])[0],
	// console.log('token', token, 'parsedInput', parsedInput,
	//         'regex', getParseRegexForToken(token, config));
	d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&m(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),j+=d.length),
	// don't parse if it's not a known token
	Fe[f]?(d?m(b).empty=!1:m(b).unusedTokens.push(f),da(f,d,b)):b._strict&&!d&&m(b).unusedTokens.push(f);
	// add remaining unparsed input length to the string
	m(b).charsLeftOver=i-j,h.length>0&&m(b).unusedInput.push(h),
	// clear _12h flag if hour is <= 12
	b._a[af]<=12&&m(b).bigHour===!0&&b._a[af]>0&&(m(b).bigHour=void 0),m(b).parsedDateParts=b._a.slice(0),m(b).meridiem=b._meridiem,
	// handle meridiem
	b._a[af]=lb(b._locale,b._a[af],b._meridiem),ib(b),db(b)}function lb(a,b,c){var d;
	// Fallback
	return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&b<12&&(b+=12),d||12!==b||(b=0),b):b}
	// date from string and array of format strings
	function mb(a){var b,c,d,e,f;if(0===a._f.length)return m(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=q({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],kb(b),n(b)&&(
	// if there is any input that was not parsed add a penalty for that format
	f+=m(b).charsLeftOver,
	//or tokens
	f+=10*m(b).unusedTokens.length,m(b).score=f,(null==d||f<d)&&(d=f,c=b));j(a,c||b)}function nb(a){if(!a._d){var b=L(a._i);a._a=h([b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],function(a){return a&&parseInt(a,10)}),ib(a)}}function ob(a){var b=new r(db(pb(a)));
	// Adding is smart enough around DST
	return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function pb(a){var b=a._i,d=a._f;return a._locale=a._locale||bb(a._l),null===b||void 0===d&&""===b?o({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),s(b)?new r(db(b)):(g(b)?a._d=b:c(d)?mb(a):d?kb(a):qb(a),n(a)||(a._d=null),a))}function qb(b){var d=b._i;void 0===d?b._d=new Date(a.now()):g(d)?b._d=new Date(d.valueOf()):"string"==typeof d?fb(b):c(d)?(b._a=h(d.slice(0),function(a){return parseInt(a,10)}),ib(b)):"object"==typeof d?nb(b):f(d)?
	// from milliseconds
	b._d=new Date(d):a.createFromInputFallback(b)}function rb(a,b,f,g,h){var i={};
	// object construction must be done this way.
	// https://github.com/moment/moment/issues/1423
	return f!==!0&&f!==!1||(g=f,f=void 0),(d(a)&&e(a)||c(a)&&0===a.length)&&(a=void 0),i._isAMomentObject=!0,i._useUTC=i._isUTC=h,i._l=f,i._i=a,i._f=b,i._strict=g,ob(i)}function sb(a,b,c,d){return rb(a,b,c,d,!1)}
	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function tb(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return sb();for(d=b[0],e=1;e<b.length;++e)b[e].isValid()&&!b[e][a](d)||(d=b[e]);return d}
	// TODO: Use [].sort instead?
	function ub(){var a=[].slice.call(arguments,0);return tb("isBefore",a)}function vb(){var a=[].slice.call(arguments,0);return tb("isAfter",a)}function wb(a){var b=L(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;
	// representation for dateAddRemove
	this._milliseconds=+k+1e3*j+// 1000
	6e4*i+// 1000 * 60
	1e3*h*60*60,//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	// Because of dateAddRemove treats 24 hours as different from a
	// day when working around DST, we need to store them separately
	this._days=+g+7*f,
	// It is impossible translate months into days without knowing
	// which months you are are talking about, so we have to store
	// it separately.
	this._months=+e+3*d+12*c,this._data={},this._locale=bb(),this._bubble()}function xb(a){return a instanceof wb}function yb(a){return a<0?Math.round(-1*a)*-1:Math.round(a)}
	// FORMATTING
	function zb(a,b){U(a,0,0,function(){var a=this.utcOffset(),c="+";return a<0&&(a=-a,c="-"),c+T(~~(a/60),2)+b+T(~~a%60,2)})}function Ab(a,b){var c=(b||"").match(a);if(null===c)return null;var d=c[c.length-1]||[],e=(d+"").match(Kf)||["-",0,0],f=+(60*e[1])+u(e[2]);return 0===f?0:"+"===e[0]?f:-f}
	// Return a moment from input, that is local/utc/zone equivalent to model.
	function Bb(b,c){var d,e;
	// Use low-level api, because this fn is low-level api.
	return c._isUTC?(d=c.clone(),e=(s(b)||g(b)?b.valueOf():sb(b).valueOf())-d.valueOf(),d._d.setTime(d._d.valueOf()+e),a.updateOffset(d,!1),d):sb(b).local()}function Cb(a){
	// On Firefox.24 Date#getTimezoneOffset returns a floating point.
	// https://github.com/moment/moment/pull/1871
	return 15*-Math.round(a._d.getTimezoneOffset()/15)}
	// MOMENTS
	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function Db(b,c){var d,e=this._offset||0;if(!this.isValid())return null!=b?this:NaN;if(null!=b){if("string"==typeof b){if(b=Ab(Ue,b),null===b)return this}else Math.abs(b)<16&&(b=60*b);return!this._isUTC&&c&&(d=Cb(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?Tb(this,Ob(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?e:Cb(this)}function Eb(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Fb(a){return this.utcOffset(0,a)}function Gb(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Cb(this),"m")),this}function Hb(){if(null!=this._tzm)this.utcOffset(this._tzm);else if("string"==typeof this._i){var a=Ab(Te,this._i);null!=a?this.utcOffset(a):this.utcOffset(0,!0)}return this}function Ib(a){return!!this.isValid()&&(a=a?sb(a).utcOffset():0,(this.utcOffset()-a)%60===0)}function Jb(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Kb(){if(!p(this._isDSTShifted))return this._isDSTShifted;var a={};if(q(a,this),a=pb(a),a._a){var b=a._isUTC?k(a._a):sb(a._a);this._isDSTShifted=this.isValid()&&v(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Lb(){return!!this.isValid()&&!this._isUTC}function Mb(){return!!this.isValid()&&this._isUTC}function Nb(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Ob(a,b){var c,d,e,g=a,
	// matching against regexp is expensive, do it on demand
	h=null;// checks for null or undefined
	return xb(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:f(a)?(g={},b?g[b]=a:g.milliseconds=a):(h=Lf.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:u(h[_e])*c,h:u(h[af])*c,m:u(h[bf])*c,s:u(h[cf])*c,ms:u(yb(1e3*h[df]))*c}):(h=Mf.exec(a))?(c="-"===h[1]?-1:1,g={y:Pb(h[2],c),M:Pb(h[3],c),w:Pb(h[4],c),d:Pb(h[5],c),h:Pb(h[6],c),m:Pb(h[7],c),s:Pb(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=Rb(sb(g.from),sb(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new wb(g),xb(a)&&i(a,"_locale")&&(d._locale=a._locale),d}function Pb(a,b){
	// We'd normally use ~~inp for this, but unfortunately it also
	// converts floats to ints.
	// inp may be undefined, so careful calling replace on it.
	var c=a&&parseFloat(a.replace(",","."));
	// apply sign while we're at it
	return(isNaN(c)?0:c)*b}function Qb(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function Rb(a,b){var c;return a.isValid()&&b.isValid()?(b=Bb(b,a),a.isBefore(b)?c=Qb(a,b):(c=Qb(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0}}
	// TODO: remove 'name' arg after deprecation is removed
	function Sb(a,b){return function(c,d){var e,f;
	//invert the arguments, but complain about it
	return null===d||isNaN(+d)||(y(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Ob(c,d),Tb(this,e,a),this}}function Tb(b,c,d,e){var f=c._milliseconds,g=yb(c._days),h=yb(c._months);b.isValid()&&(e=null==e||e,f&&b._d.setTime(b._d.valueOf()+f*d),g&&Q(b,"Date",P(b,"Date")+g*d),h&&ja(b,P(b,"Month")+h*d),e&&a.updateOffset(b,g||h))}function Ub(a,b){var c=a.diff(b,"days",!0);return c<-6?"sameElse":c<-1?"lastWeek":c<0?"lastDay":c<1?"sameDay":c<2?"nextDay":c<7?"nextWeek":"sameElse"}function Vb(b,c){
	// We want to compare the start of today, vs this.
	// Getting start-of-today depends on whether we're local/utc/offset or not.
	var d=b||sb(),e=Bb(d,this).startOf("day"),f=a.calendarFormat(this,e)||"sameElse",g=c&&(z(c[f])?c[f].call(this,d):c[f]);return this.format(g||this.localeData().calendar(f,this,sb(d)))}function Wb(){return new r(this)}function Xb(a,b){var c=s(a)?a:sb(a);return!(!this.isValid()||!c.isValid())&&(b=K(p(b)?"millisecond":b),"millisecond"===b?this.valueOf()>c.valueOf():c.valueOf()<this.clone().startOf(b).valueOf())}function Yb(a,b){var c=s(a)?a:sb(a);return!(!this.isValid()||!c.isValid())&&(b=K(p(b)?"millisecond":b),"millisecond"===b?this.valueOf()<c.valueOf():this.clone().endOf(b).valueOf()<c.valueOf())}function Zb(a,b,c,d){return d=d||"()",("("===d[0]?this.isAfter(a,c):!this.isBefore(a,c))&&(")"===d[1]?this.isBefore(b,c):!this.isAfter(b,c))}function $b(a,b){var c,d=s(a)?a:sb(a);return!(!this.isValid()||!d.isValid())&&(b=K(b||"millisecond"),"millisecond"===b?this.valueOf()===d.valueOf():(c=d.valueOf(),this.clone().startOf(b).valueOf()<=c&&c<=this.clone().endOf(b).valueOf()))}function _b(a,b){return this.isSame(a,b)||this.isAfter(a,b)}function ac(a,b){return this.isSame(a,b)||this.isBefore(a,b)}function bc(a,b,c){var d,e,f,g;// 1000
	// 1000 * 60
	// 1000 * 60 * 60
	// 1000 * 60 * 60 * 24, negate dst
	// 1000 * 60 * 60 * 24 * 7, negate dst
	return this.isValid()?(d=Bb(a,this),d.isValid()?(e=6e4*(d.utcOffset()-this.utcOffset()),b=K(b),"year"===b||"month"===b||"quarter"===b?(g=cc(this,d),"quarter"===b?g/=3:"year"===b&&(g/=12)):(f=this-d,g="second"===b?f/1e3:"minute"===b?f/6e4:"hour"===b?f/36e5:"day"===b?(f-e)/864e5:"week"===b?(f-e)/6048e5:f),c?g:t(g)):NaN):NaN}function cc(a,b){
	// difference in months
	var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),
	// b is in (anchor - 1 month, anchor + 1 month)
	f=a.clone().add(e,"months");
	//check for negative zero, return zero if negative zero
	// linear across the month
	// linear across the month
	return b-f<0?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)||0}function dc(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ec(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?z(Date.prototype.toISOString)?this.toDate().toISOString():X(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):X(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function fc(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var a="moment",b="";this.isLocal()||(a=0===this.utcOffset()?"moment.utc":"moment.parseZone",b="Z");var c="["+a+'("]',d=0<this.year()&&this.year()<=9999?"YYYY":"YYYYYY",e="-MM-DD[T]HH:mm:ss.SSS",f=b+'[")]';return this.format(c+d+e+f)}function gc(b){b||(b=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var c=X(this,b);return this.localeData().postformat(c)}function hc(a,b){return this.isValid()&&(s(a)&&a.isValid()||sb(a).isValid())?Ob({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ic(a){return this.from(sb(),a)}function jc(a,b){return this.isValid()&&(s(a)&&a.isValid()||sb(a).isValid())?Ob({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function kc(a){return this.to(sb(),a)}
	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function lc(a){var b;return void 0===a?this._locale._abbr:(b=bb(a),null!=b&&(this._locale=b),this)}function mc(){return this._locale}function nc(a){
	// the following switch intentionally omits break keywords
	// to utilize falling through the cases.
	switch(a=K(a)){case"year":this.month(0);/* falls through */
	case"quarter":case"month":this.date(1);/* falls through */
	case"week":case"isoWeek":case"day":case"date":this.hours(0);/* falls through */
	case"hour":this.minutes(0);/* falls through */
	case"minute":this.seconds(0);/* falls through */
	case"second":this.milliseconds(0)}
	// weeks are a special case
	// quarters are also special
	return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function oc(a){
	// 'date' is an alias for 'day', so it should be considered as such.
	return a=K(a),void 0===a||"millisecond"===a?this:("date"===a&&(a="day"),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms"))}function pc(){return this._d.valueOf()-6e4*(this._offset||0)}function qc(){return Math.floor(this.valueOf()/1e3)}function rc(){return new Date(this.valueOf())}function sc(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function tc(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function uc(){
	// new Date(NaN).toJSON() === null
	return this.isValid()?this.toISOString():null}function vc(){return n(this)}function wc(){return j({},m(this))}function xc(){return m(this).overflow}function yc(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function zc(a,b){U(0,[a,a.length],0,b)}
	// MOMENTS
	function Ac(a){return Ec.call(this,a,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Bc(a){return Ec.call(this,a,this.isoWeek(),this.isoWeekday(),1,4)}function Cc(){return xa(this.year(),1,4)}function Dc(){var a=this.localeData()._week;return xa(this.year(),a.dow,a.doy)}function Ec(a,b,c,d,e){var f;return null==a?wa(this,d,e).year:(f=xa(a,d,e),b>f&&(b=f),Fc.call(this,a,b,c,d,e))}function Fc(a,b,c,d,e){var f=va(a,b,c,d,e),g=ta(f.year,0,f.dayOfYear);return this.year(g.getUTCFullYear()),this.month(g.getUTCMonth()),this.date(g.getUTCDate()),this}
	// MOMENTS
	function Gc(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}
	// HELPERS
	// MOMENTS
	function Hc(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function Ic(a,b){b[df]=u(1e3*("0."+a))}
	// MOMENTS
	function Jc(){return this._isUTC?"UTC":""}function Kc(){return this._isUTC?"Coordinated Universal Time":""}function Lc(a){return sb(1e3*a)}function Mc(){return sb.apply(null,arguments).parseZone()}function Nc(a){return a}function Oc(a,b,c,d){var e=bb(),f=k().set(d,b);return e[c](f,a)}function Pc(a,b,c){if(f(a)&&(b=a,a=void 0),a=a||"",null!=b)return Oc(a,b,c,"month");var d,e=[];for(d=0;d<12;d++)e[d]=Oc(a,d,c,"month");return e}
	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function Qc(a,b,c,d){"boolean"==typeof a?(f(b)&&(c=b,b=void 0),b=b||""):(b=a,c=b,a=!1,f(b)&&(c=b,b=void 0),b=b||"");var e=bb(),g=a?e._week.dow:0;if(null!=c)return Oc(b,(c+g)%7,d,"day");var h,i=[];for(h=0;h<7;h++)i[h]=Oc(b,(h+g)%7,d,"day");return i}function Rc(a,b){return Pc(a,b,"months")}function Sc(a,b){return Pc(a,b,"monthsShort")}function Tc(a,b,c){return Qc(a,b,c,"weekdays")}function Uc(a,b,c){return Qc(a,b,c,"weekdaysShort")}function Vc(a,b,c){return Qc(a,b,c,"weekdaysMin")}function Wc(){var a=this._data;return this._milliseconds=Xf(this._milliseconds),this._days=Xf(this._days),this._months=Xf(this._months),a.milliseconds=Xf(a.milliseconds),a.seconds=Xf(a.seconds),a.minutes=Xf(a.minutes),a.hours=Xf(a.hours),a.months=Xf(a.months),a.years=Xf(a.years),this}function Xc(a,b,c,d){var e=Ob(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}
	// supports only 2.0-style add(1, 's') or add(duration)
	function Yc(a,b){return Xc(this,a,b,1)}
	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function Zc(a,b){return Xc(this,a,b,-1)}function $c(a){return a<0?Math.floor(a):Math.ceil(a)}function _c(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;
	// if we have a mix of positive and negative values, bubble down first
	// check: https://github.com/moment/moment/issues/2166
	// The following code bubbles up values, see the tests for
	// examples of what that means.
	// convert days to months
	// 12 months -> 1 year
	return f>=0&&g>=0&&h>=0||f<=0&&g<=0&&h<=0||(f+=864e5*$c(bd(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=t(f/1e3),i.seconds=a%60,b=t(a/60),i.minutes=b%60,c=t(b/60),i.hours=c%24,g+=t(c/24),e=t(ad(g)),h+=e,g-=$c(bd(e)),d=t(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function ad(a){
	// 400 years have 146097 days (taking into account leap year rules)
	// 400 years have 12 months === 4800
	return 4800*a/146097}function bd(a){
	// the reverse of daysToMonths
	return 146097*a/4800}function cd(a){var b,c,d=this._milliseconds;if(a=K(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+ad(b),"month"===a?c:c/12;switch(
	// handle milliseconds separately because of floating point math errors (issue #1867)
	b=this._days+Math.round(bd(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;
	// Math.floor prevents floating point math errors here
	case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}
	// TODO: Use this.as('ms')?
	function dd(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*u(this._months/12)}function ed(a){return function(){return this.as(a)}}function fd(a){return a=K(a),this[a+"s"]()}function gd(a){return function(){return this._data[a]}}function hd(){return t(this.days()/7)}
	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function id(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function jd(a,b,c){var d=Ob(a).abs(),e=lg(d.as("s")),f=lg(d.as("m")),g=lg(d.as("h")),h=lg(d.as("d")),i=lg(d.as("M")),j=lg(d.as("y")),k=e<mg.s&&["s",e]||f<=1&&["m"]||f<mg.m&&["mm",f]||g<=1&&["h"]||g<mg.h&&["hh",g]||h<=1&&["d"]||h<mg.d&&["dd",h]||i<=1&&["M"]||i<mg.M&&["MM",i]||j<=1&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,id.apply(null,k)}
	// This function allows you to set the rounding function for relative time strings
	function kd(a){return void 0===a?lg:"function"==typeof a&&(lg=a,!0)}
	// This function allows you to set a threshold for relative time strings
	function ld(a,b){return void 0!==mg[a]&&(void 0===b?mg[a]:(mg[a]=b,!0))}function md(a){var b=this.localeData(),c=jd(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function nd(){
	// for ISO strings we do not use the normal bubbling rules:
	//  * milliseconds bubble up until they become hours
	//  * days do not bubble at all
	//  * months bubble up until they become years
	// This is because there is no context-free conversion between hours and days
	// (think of clock changes)
	// and also not between days and months (28-31 days per month)
	var a,b,c,d=ng(this._milliseconds)/1e3,e=ng(this._days),f=ng(this._months);
	// 3600 seconds -> 60 minutes -> 1 hour
	a=t(d/60),b=t(a/60),d%=60,a%=60,
	// 12 months -> 1 year
	c=t(f/12),f%=12;
	// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(m<0?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}
	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	function od(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&b%10<=4&&(b%100<10||b%100>=20)?c[1]:c[2]}function pd(a,b,c){var d={mm:b?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:b?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===c?b?"хвіліна":"хвіліну":"h"===c?b?"гадзіна":"гадзіну":a+" "+od(d[c],+a)}
	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	function qd(a,b,c){var d={mm:"munutenn",MM:"miz",dd:"devezh"};return a+" "+td(d[c],a)}function rd(a){switch(sd(a)){case 1:case 3:case 4:case 5:case 9:return a+" bloaz";default:return a+" vloaz"}}function sd(a){return a>9?sd(a%10):a}function td(a,b){return 2===b?ud(a):a}function ud(a){var b={m:"v",b:"v",d:"z"};return void 0===b[a.charAt(0)]?a:b[a.charAt(0)]+a.substring(1)}
	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	function vd(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}function wd(a){return a>1&&a<5&&1!==~~(a/10)}function xd(a,b,c,d){var e=a+" ";switch(c){case"s":// a few seconds / in a few seconds / a few seconds ago
	return b||d?"pár sekund":"pár sekundami";case"m":// a minute / in a minute / a minute ago
	return b?"minuta":d?"minutu":"minutou";case"mm":// 9 minutes / in 9 minutes / 9 minutes ago
	// 9 minutes / in 9 minutes / 9 minutes ago
	return b||d?e+(wd(a)?"minuty":"minut"):e+"minutami";break;case"h":// an hour / in an hour / an hour ago
	return b?"hodina":d?"hodinu":"hodinou";case"hh":// 9 hours / in 9 hours / 9 hours ago
	// 9 hours / in 9 hours / 9 hours ago
	return b||d?e+(wd(a)?"hodiny":"hodin"):e+"hodinami";break;case"d":// a day / in a day / a day ago
	return b||d?"den":"dnem";case"dd":// 9 days / in 9 days / 9 days ago
	// 9 days / in 9 days / 9 days ago
	return b||d?e+(wd(a)?"dny":"dní"):e+"dny";break;case"M":// a month / in a month / a month ago
	return b||d?"měsíc":"měsícem";case"MM":// 9 months / in 9 months / 9 months ago
	// 9 months / in 9 months / 9 months ago
	return b||d?e+(wd(a)?"měsíce":"měsíců"):e+"měsíci";break;case"y":// a year / in a year / a year ago
	return b||d?"rok":"rokem";case"yy":// 9 years / in 9 years / 9 years ago
	// 9 years / in 9 years / 9 years ago
	return b||d?e+(wd(a)?"roky":"let"):e+"lety"}}
	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	function yd(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}
	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	function zd(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}
	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	function Ad(a,b,c,d){var e={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[a+" minuti",a+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[a+" tunni",a+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[a+" kuu",a+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[a+" aasta",a+" aastat"]};return b?e[c][2]?e[c][2]:e[c][1]:d?e[c][0]:e[c][1]}function Bd(a,b,c,d){var e="";switch(c){case"s":return d?"muutaman sekunnin":"muutama sekunti";case"m":return d?"minuutin":"minuutti";case"mm":e=d?"minuutin":"minuuttia";break;case"h":return d?"tunnin":"tunti";case"hh":e=d?"tunnin":"tuntia";break;case"d":return d?"päivän":"päivä";case"dd":e=d?"päivän":"päivää";break;case"M":return d?"kuukauden":"kuukausi";case"MM":e=d?"kuukauden":"kuukautta";break;case"y":return d?"vuoden":"vuosi";case"yy":e=d?"vuoden":"vuotta"}return e=Cd(a,d)+" "+e}function Cd(a,b){return a<10?b?Sg[a]:Rg[a]:a}
	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	function Dd(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}function Ed(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function Fd(a){return(a?"":"[múlt] ")+"["+ah[this.day()]+"] LT[-kor]"}
	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	function Gd(a){return a%100===11||a%10!==1}function Hd(a,b,c,d){var e=a+" ";switch(c){case"s":return b||d?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return b?"mínúta":"mínútu";case"mm":return Gd(a)?e+(b||d?"mínútur":"mínútum"):b?e+"mínúta":e+"mínútu";case"hh":return Gd(a)?e+(b||d?"klukkustundir":"klukkustundum"):e+"klukkustund";case"d":return b?"dagur":d?"dag":"degi";case"dd":return Gd(a)?b?e+"dagar":e+(d?"daga":"dögum"):b?e+"dagur":e+(d?"dag":"degi");case"M":return b?"mánuður":d?"mánuð":"mánuði";case"MM":return Gd(a)?b?e+"mánuðir":e+(d?"mánuði":"mánuðum"):b?e+"mánuður":e+(d?"mánuð":"mánuði");case"y":return b||d?"ár":"ári";case"yy":return Gd(a)?e+(b||d?"ár":"árum"):e+(b||d?"ár":"ári")}}
	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	function Id(a,b,c,d){var e={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return b?e[c][0]:e[c][1]}function Jd(a){var b=a.substr(0,a.indexOf(" "));return Ld(b)?"a "+a:"an "+a}function Kd(a){var b=a.substr(0,a.indexOf(" "));return Ld(b)?"viru "+a:"virun "+a}/**
	 * Returns true if the word before the given number loses the '-n' ending.
	 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	 *
	 * @param number {integer}
	 * @returns {boolean}
	 */
	function Ld(a){if(a=parseInt(a,10),isNaN(a))return!1;if(a<0)
	// Negative Number --> always true
	return!0;if(a<10)
	// Only 1 digit
	return 4<=a&&a<=7;if(a<100){
	// 2 digits
	var b=a%10,c=a/10;return Ld(0===b?c:b)}if(a<1e4){
	// 3 or 4 digits --> recursively check first digit
	for(;a>=10;)a/=10;return Ld(a)}
	// Anything larger than 4 digits: recursively check first n-3 digits
	return a/=1e3,Ld(a)}function Md(a,b,c,d){return b?"kelios sekundės":d?"kelių sekundžių":"kelias sekundes"}function Nd(a,b,c,d){return b?Pd(c)[0]:d?Pd(c)[1]:Pd(c)[2]}function Od(a){return a%10===0||a>10&&a<20}function Pd(a){return dh[a].split("_")}function Qd(a,b,c,d){var e=a+" ";return 1===a?e+Nd(a,b,c[0],d):b?e+(Od(a)?Pd(c)[1]:Pd(c)[0]):d?e+Pd(c)[1]:e+(Od(a)?Pd(c)[1]:Pd(c)[2])}/**
	 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	 */
	function Rd(a,b,c){return c?b%10===1&&b%100!==11?a[2]:a[3]:b%10===1&&b%100!==11?a[0]:a[1]}function Sd(a,b,c){return a+" "+Rd(eh[c],a,b)}function Td(a,b,c){return Rd(eh[c],a,b)}function Ud(a,b){return b?"dažas sekundes":"dažām sekundēm"}function Vd(a,b,c,d){var e="";if(b)switch(c){case"s":e="काही सेकंद";break;case"m":e="एक मिनिट";break;case"mm":e="%d मिनिटे";break;case"h":e="एक तास";break;case"hh":e="%d तास";break;case"d":e="एक दिवस";break;case"dd":e="%d दिवस";break;case"M":e="एक महिना";break;case"MM":e="%d महिने";break;case"y":e="एक वर्ष";break;case"yy":e="%d वर्षे"}else switch(c){case"s":e="काही सेकंदां";break;case"m":e="एका मिनिटा";break;case"mm":e="%d मिनिटां";break;case"h":e="एका तासा";break;case"hh":e="%d तासां";break;case"d":e="एका दिवसा";break;case"dd":e="%d दिवसां";break;case"M":e="एका महिन्या";break;case"MM":e="%d महिन्यां";break;case"y":e="एका वर्षा";break;case"yy":e="%d वर्षां"}return e.replace(/%d/i,a)}function Wd(a){return a%10<5&&a%10>1&&~~(a/10)%10!==1}function Xd(a,b,c){var d=a+" ";switch(c){case"m":return b?"minuta":"minutę";case"mm":return d+(Wd(a)?"minuty":"minut");case"h":return b?"godzina":"godzinę";case"hh":return d+(Wd(a)?"godziny":"godzin");case"MM":return d+(Wd(a)?"miesiące":"miesięcy");case"yy":return d+(Wd(a)?"lata":"lat")}}
	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	function Yd(a,b,c){var d={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},e=" ";return(a%100>=20||a>=100&&a%100===0)&&(e=" de "),a+e+d[c]}
	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	function Zd(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&b%10<=4&&(b%100<10||b%100>=20)?c[1]:c[2]}function $d(a,b,c){var d={mm:b?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===c?b?"минута":"минуту":a+" "+Zd(d[c],+a)}function _d(a){return a>1&&a<5}function ae(a,b,c,d){var e=a+" ";switch(c){case"s":// a few seconds / in a few seconds / a few seconds ago
	return b||d?"pár sekúnd":"pár sekundami";case"m":// a minute / in a minute / a minute ago
	return b?"minúta":d?"minútu":"minútou";case"mm":// 9 minutes / in 9 minutes / 9 minutes ago
	// 9 minutes / in 9 minutes / 9 minutes ago
	return b||d?e+(_d(a)?"minúty":"minút"):e+"minútami";break;case"h":// an hour / in an hour / an hour ago
	return b?"hodina":d?"hodinu":"hodinou";case"hh":// 9 hours / in 9 hours / 9 hours ago
	// 9 hours / in 9 hours / 9 hours ago
	return b||d?e+(_d(a)?"hodiny":"hodín"):e+"hodinami";break;case"d":// a day / in a day / a day ago
	return b||d?"deň":"dňom";case"dd":// 9 days / in 9 days / 9 days ago
	// 9 days / in 9 days / 9 days ago
	return b||d?e+(_d(a)?"dni":"dní"):e+"dňami";break;case"M":// a month / in a month / a month ago
	return b||d?"mesiac":"mesiacom";case"MM":// 9 months / in 9 months / 9 months ago
	// 9 months / in 9 months / 9 months ago
	return b||d?e+(_d(a)?"mesiace":"mesiacov"):e+"mesiacmi";break;case"y":// a year / in a year / a year ago
	return b||d?"rok":"rokom";case"yy":// 9 years / in 9 years / 9 years ago
	// 9 years / in 9 years / 9 years ago
	return b||d?e+(_d(a)?"roky":"rokov"):e+"rokmi"}}
	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	function be(a,b,c,d){var e=a+" ";switch(c){case"s":return b||d?"nekaj sekund":"nekaj sekundami";case"m":return b?"ena minuta":"eno minuto";case"mm":return e+=1===a?b?"minuta":"minuto":2===a?b||d?"minuti":"minutama":a<5?b||d?"minute":"minutami":b||d?"minut":"minutami";case"h":return b?"ena ura":"eno uro";case"hh":return e+=1===a?b?"ura":"uro":2===a?b||d?"uri":"urama":a<5?b||d?"ure":"urami":b||d?"ur":"urami";case"d":return b||d?"en dan":"enim dnem";case"dd":return e+=1===a?b||d?"dan":"dnem":2===a?b||d?"dni":"dnevoma":b||d?"dni":"dnevi";case"M":return b||d?"en mesec":"enim mesecem";case"MM":return e+=1===a?b||d?"mesec":"mesecem":2===a?b||d?"meseca":"mesecema":a<5?b||d?"mesece":"meseci":b||d?"mesecev":"meseci";case"y":return b||d?"eno leto":"enim letom";case"yy":return e+=1===a?b||d?"leto":"letom":2===a?b||d?"leti":"letoma":a<5?b||d?"leta":"leti":b||d?"let":"leti"}}function ce(a){var b=a;return b=a.indexOf("jaj")!==-1?b.slice(0,-3)+"leS":a.indexOf("jar")!==-1?b.slice(0,-3)+"waQ":a.indexOf("DIS")!==-1?b.slice(0,-3)+"nem":b+" pIq"}function de(a){var b=a;return b=a.indexOf("jaj")!==-1?b.slice(0,-3)+"Hu’":a.indexOf("jar")!==-1?b.slice(0,-3)+"wen":a.indexOf("DIS")!==-1?b.slice(0,-3)+"ben":b+" ret"}function ee(a,b,c,d){var e=fe(a);switch(c){case"mm":return e+" tup";case"hh":return e+" rep";case"dd":return e+" jaj";case"MM":return e+" jar";case"yy":return e+" DIS"}}function fe(a){var b=Math.floor(a%1e3/100),c=Math.floor(a%100/10),d=a%10,e="";return b>0&&(e+=Fh[b]+"vatlh"),c>0&&(e+=(""!==e?" ":"")+Fh[c]+"maH"),d>0&&(e+=(""!==e?" ":"")+Fh[d]),""===e?"pagh":e}function ge(a,b,c,d){var e={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[a+" míuts",""+a+" míuts"],h:["'n þora","'iensa þora"],hh:[a+" þoras",""+a+" þoras"],d:["'n ziua","'iensa ziua"],dd:[a+" ziuas",""+a+" ziuas"],M:["'n mes","'iens mes"],MM:[a+" mesen",""+a+" mesen"],y:["'n ar","'iens ar"],yy:[a+" ars",""+a+" ars"]};return d?e[c][0]:b?e[c][0]:e[c][1]}
	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	function he(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&b%10<=4&&(b%100<10||b%100>=20)?c[1]:c[2]}function ie(a,b,c){var d={mm:b?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:b?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===c?b?"хвилина":"хвилину":"h"===c?b?"година":"годину":a+" "+he(d[c],+a)}function je(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function ke(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}var le,me;me=Array.prototype.some?Array.prototype.some:function(a){for(var b=Object(this),c=b.length>>>0,d=0;d<c;d++)if(d in b&&a.call(this,b[d],d,b))return!0;return!1};var ne=me,oe=a.momentProperties=[],pe=!1,qe={};a.suppressDeprecationWarnings=!1,a.deprecationHandler=null;var re;re=Object.keys?Object.keys:function(a){var b,c=[];for(b in a)i(a,b)&&c.push(b);return c};var se,te=re,ue={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},ve={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},we="Invalid date",xe="%d",ye=/\d{1,2}/,ze={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Ae={},Be={},Ce=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,De=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ee={},Fe={},Ge=/\d/,He=/\d\d/,Ie=/\d{3}/,Je=/\d{4}/,Ke=/[+-]?\d{6}/,Le=/\d\d?/,Me=/\d\d\d\d?/,Ne=/\d\d\d\d\d\d?/,Oe=/\d{1,3}/,Pe=/\d{1,4}/,Qe=/[+-]?\d{1,6}/,Re=/\d+/,Se=/[+-]?\d+/,Te=/Z|[+-]\d\d:?\d\d/gi,Ue=/Z|[+-]\d\d(?::?\d\d)?/gi,Ve=/[+-]?\d+(\.\d{1,3})?/,We=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Xe={},Ye={},Ze=0,$e=1,_e=2,af=3,bf=4,cf=5,df=6,ef=7,ff=8;se=Array.prototype.indexOf?Array.prototype.indexOf:function(a){
	// I know
	var b;for(b=0;b<this.length;++b)if(this[b]===a)return b;return-1};var gf=se;
	// FORMATTING
	U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),U("MMMM",0,0,function(a){return this.localeData().months(this,a)}),
	// ALIASES
	J("month","M"),
	// PRIORITY
	M("month",8),
	// PARSING
	Z("M",Le),Z("MM",Le,He),Z("MMM",function(a,b){return b.monthsShortRegex(a)}),Z("MMMM",function(a,b){return b.monthsRegex(a)}),ba(["M","MM"],function(a,b){b[$e]=u(a)-1}),ba(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);
	// if we didn't find a month name, mark the date as invalid.
	null!=e?b[$e]=e:m(c).invalidMonth=a});
	// LOCALES
	var hf=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,jf="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),kf="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),lf=We,mf=We;
	// FORMATTING
	U("Y",0,0,function(){var a=this.year();return a<=9999?""+a:"+"+a}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),
	// ALIASES
	J("year","y"),
	// PRIORITIES
	M("year",1),
	// PARSING
	Z("Y",Se),Z("YY",Le,He),Z("YYYY",Pe,Je),Z("YYYYY",Qe,Ke),Z("YYYYYY",Qe,Ke),ba(["YYYYY","YYYYYY"],Ze),ba("YYYY",function(b,c){c[Ze]=2===b.length?a.parseTwoDigitYear(b):u(b)}),ba("YY",function(b,c){c[Ze]=a.parseTwoDigitYear(b)}),ba("Y",function(a,b){b[Ze]=parseInt(a,10)}),
	// HOOKS
	a.parseTwoDigitYear=function(a){return u(a)+(u(a)>68?1900:2e3)};
	// MOMENTS
	var nf=O("FullYear",!0);
	// FORMATTING
	U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),
	// ALIASES
	J("week","w"),J("isoWeek","W"),
	// PRIORITIES
	M("week",5),M("isoWeek",5),
	// PARSING
	Z("w",Le),Z("ww",Le,He),Z("W",Le),Z("WW",Le,He),ca(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=u(a)});var of={dow:0,// Sunday is the first day of the week.
	doy:6};
	// FORMATTING
	U("d",0,"do","day"),U("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),U("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),U("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),
	// ALIASES
	J("day","d"),J("weekday","e"),J("isoWeekday","E"),
	// PRIORITY
	M("day",11),M("weekday",11),M("isoWeekday",11),
	// PARSING
	Z("d",Le),Z("e",Le),Z("E",Le),Z("dd",function(a,b){return b.weekdaysMinRegex(a)}),Z("ddd",function(a,b){return b.weekdaysShortRegex(a)}),Z("dddd",function(a,b){return b.weekdaysRegex(a)}),ca(["dd","ddd","dddd"],function(a,b,c,d){var e=c._locale.weekdaysParse(a,d,c._strict);
	// if we didn't get a weekday name, mark the date as invalid
	null!=e?b.d=e:m(c).invalidWeekday=a}),ca(["d","e","E"],function(a,b,c,d){b[d]=u(a)});
	// LOCALES
	var pf="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),qf="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),rf="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),sf=We,tf=We,uf=We;U("H",["HH",2],0,"hour"),U("h",["hh",2],0,Ra),U("k",["kk",2],0,Sa),U("hmm",0,0,function(){return""+Ra.apply(this)+T(this.minutes(),2)}),U("hmmss",0,0,function(){return""+Ra.apply(this)+T(this.minutes(),2)+T(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+T(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+T(this.minutes(),2)+T(this.seconds(),2)}),Ta("a",!0),Ta("A",!1),
	// ALIASES
	J("hour","h"),
	// PRIORITY
	M("hour",13),Z("a",Ua),Z("A",Ua),Z("H",Le),Z("h",Le),Z("HH",Le,He),Z("hh",Le,He),Z("hmm",Me),Z("hmmss",Ne),Z("Hmm",Me),Z("Hmmss",Ne),ba(["H","HH"],af),ba(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),ba(["h","hh"],function(a,b,c){b[af]=u(a),m(c).bigHour=!0}),ba("hmm",function(a,b,c){var d=a.length-2;b[af]=u(a.substr(0,d)),b[bf]=u(a.substr(d)),m(c).bigHour=!0}),ba("hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[af]=u(a.substr(0,d)),b[bf]=u(a.substr(d,2)),b[cf]=u(a.substr(e)),m(c).bigHour=!0}),ba("Hmm",function(a,b,c){var d=a.length-2;b[af]=u(a.substr(0,d)),b[bf]=u(a.substr(d))}),ba("Hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[af]=u(a.substr(0,d)),b[bf]=u(a.substr(d,2)),b[cf]=u(a.substr(e))});var vf,wf=/[ap]\.?m?\.?/i,xf=O("Hours",!0),yf={calendar:ue,longDateFormat:ve,invalidDate:we,ordinal:xe,ordinalParse:ye,relativeTime:ze,months:jf,monthsShort:kf,week:of,weekdays:pf,weekdaysMin:rf,weekdaysShort:qf,meridiemParse:wf},zf={},Af={},Bf=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Cf=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Df=/Z|[+-]\d\d(?::?\d\d)?/,Ef=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],
	// YYYYMM is NOT allowed by the standard
	["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ff=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Gf=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=x("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),
	// constant that refers to the ISO standard
	a.ISO_8601=function(){};var Hf=x("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var a=sb.apply(null,arguments);return this.isValid()&&a.isValid()?a<this?this:a:o()}),If=x("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var a=sb.apply(null,arguments);return this.isValid()&&a.isValid()?a>this?this:a:o()}),Jf=function(){return Date.now?Date.now():+new Date};zb("Z",":"),zb("ZZ",""),
	// PARSING
	Z("Z",Ue),Z("ZZ",Ue),ba(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Ab(Ue,a)});
	// HELPERS
	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var Kf=/([\+\-]|\d\d)/gi;
	// HOOKS
	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	a.updateOffset=function(){};
	// ASP.NET json date format regex
	var Lf=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Mf=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Ob.fn=wb.prototype;var Nf=Sb(1,"add"),Of=Sb(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Pf=x("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});
	// FORMATTING
	U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),zc("gggg","weekYear"),zc("ggggg","weekYear"),zc("GGGG","isoWeekYear"),zc("GGGGG","isoWeekYear"),
	// ALIASES
	J("weekYear","gg"),J("isoWeekYear","GG"),
	// PRIORITY
	M("weekYear",1),M("isoWeekYear",1),
	// PARSING
	Z("G",Se),Z("g",Se),Z("GG",Le,He),Z("gg",Le,He),Z("GGGG",Pe,Je),Z("gggg",Pe,Je),Z("GGGGG",Qe,Ke),Z("ggggg",Qe,Ke),ca(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=u(a)}),ca(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),
	// FORMATTING
	U("Q",0,"Qo","quarter"),
	// ALIASES
	J("quarter","Q"),
	// PRIORITY
	M("quarter",7),
	// PARSING
	Z("Q",Ge),ba("Q",function(a,b){b[$e]=3*(u(a)-1)}),
	// FORMATTING
	U("D",["DD",2],"Do","date"),
	// ALIASES
	J("date","D"),
	// PRIOROITY
	M("date",9),
	// PARSING
	Z("D",Le),Z("DD",Le,He),Z("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),ba(["D","DD"],_e),ba("Do",function(a,b){b[_e]=u(a.match(Le)[0],10)});
	// MOMENTS
	var Qf=O("Date",!0);
	// FORMATTING
	U("DDD",["DDDD",3],"DDDo","dayOfYear"),
	// ALIASES
	J("dayOfYear","DDD"),
	// PRIORITY
	M("dayOfYear",4),
	// PARSING
	Z("DDD",Oe),Z("DDDD",Ie),ba(["DDD","DDDD"],function(a,b,c){c._dayOfYear=u(a)}),
	// FORMATTING
	U("m",["mm",2],0,"minute"),
	// ALIASES
	J("minute","m"),
	// PRIORITY
	M("minute",14),
	// PARSING
	Z("m",Le),Z("mm",Le,He),ba(["m","mm"],bf);
	// MOMENTS
	var Rf=O("Minutes",!1);
	// FORMATTING
	U("s",["ss",2],0,"second"),
	// ALIASES
	J("second","s"),
	// PRIORITY
	M("second",15),
	// PARSING
	Z("s",Le),Z("ss",Le,He),ba(["s","ss"],cf);
	// MOMENTS
	var Sf=O("Seconds",!1);
	// FORMATTING
	U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),
	// ALIASES
	J("millisecond","ms"),
	// PRIORITY
	M("millisecond",16),
	// PARSING
	Z("S",Oe,Ge),Z("SS",Oe,He),Z("SSS",Oe,Ie);var Tf;for(Tf="SSSS";Tf.length<=9;Tf+="S")Z(Tf,Re);for(Tf="S";Tf.length<=9;Tf+="S")ba(Tf,Ic);
	// MOMENTS
	var Uf=O("Milliseconds",!1);
	// FORMATTING
	U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var Vf=r.prototype;Vf.add=Nf,Vf.calendar=Vb,Vf.clone=Wb,Vf.diff=bc,Vf.endOf=oc,Vf.format=gc,Vf.from=hc,Vf.fromNow=ic,Vf.to=jc,Vf.toNow=kc,Vf.get=R,Vf.invalidAt=xc,Vf.isAfter=Xb,Vf.isBefore=Yb,Vf.isBetween=Zb,Vf.isSame=$b,Vf.isSameOrAfter=_b,Vf.isSameOrBefore=ac,Vf.isValid=vc,Vf.lang=Pf,Vf.locale=lc,Vf.localeData=mc,Vf.max=If,Vf.min=Hf,Vf.parsingFlags=wc,Vf.set=S,Vf.startOf=nc,Vf.subtract=Of,Vf.toArray=sc,Vf.toObject=tc,Vf.toDate=rc,Vf.toISOString=ec,Vf.inspect=fc,Vf.toJSON=uc,Vf.toString=dc,Vf.unix=qc,Vf.valueOf=pc,Vf.creationData=yc,
	// Year
	Vf.year=nf,Vf.isLeapYear=ra,
	// Week Year
	Vf.weekYear=Ac,Vf.isoWeekYear=Bc,
	// Quarter
	Vf.quarter=Vf.quarters=Gc,
	// Month
	Vf.month=ka,Vf.daysInMonth=la,
	// Week
	Vf.week=Vf.weeks=Ba,Vf.isoWeek=Vf.isoWeeks=Ca,Vf.weeksInYear=Dc,Vf.isoWeeksInYear=Cc,
	// Day
	Vf.date=Qf,Vf.day=Vf.days=Ka,Vf.weekday=La,Vf.isoWeekday=Ma,Vf.dayOfYear=Hc,
	// Hour
	Vf.hour=Vf.hours=xf,
	// Minute
	Vf.minute=Vf.minutes=Rf,
	// Second
	Vf.second=Vf.seconds=Sf,
	// Millisecond
	Vf.millisecond=Vf.milliseconds=Uf,
	// Offset
	Vf.utcOffset=Db,Vf.utc=Fb,Vf.local=Gb,Vf.parseZone=Hb,Vf.hasAlignedHourOffset=Ib,Vf.isDST=Jb,Vf.isLocal=Lb,Vf.isUtcOffset=Mb,Vf.isUtc=Nb,Vf.isUTC=Nb,
	// Timezone
	Vf.zoneAbbr=Jc,Vf.zoneName=Kc,
	// Deprecations
	Vf.dates=x("dates accessor is deprecated. Use date instead.",Qf),Vf.months=x("months accessor is deprecated. Use month instead",ka),Vf.years=x("years accessor is deprecated. Use year instead",nf),Vf.zone=x("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Eb),Vf.isDSTShifted=x("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Kb);var Wf=C.prototype;Wf.calendar=D,Wf.longDateFormat=E,Wf.invalidDate=F,Wf.ordinal=G,Wf.preparse=Nc,Wf.postformat=Nc,Wf.relativeTime=H,Wf.pastFuture=I,Wf.set=A,
	// Month
	Wf.months=fa,Wf.monthsShort=ga,Wf.monthsParse=ia,Wf.monthsRegex=na,Wf.monthsShortRegex=ma,
	// Week
	Wf.week=ya,Wf.firstDayOfYear=Aa,Wf.firstDayOfWeek=za,
	// Day of Week
	Wf.weekdays=Fa,Wf.weekdaysMin=Ha,Wf.weekdaysShort=Ga,Wf.weekdaysParse=Ja,Wf.weekdaysRegex=Na,Wf.weekdaysShortRegex=Oa,Wf.weekdaysMinRegex=Pa,
	// Hours
	Wf.isPM=Va,Wf.meridiem=Wa,$a("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===u(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),
	// Side effect imports
	a.lang=x("moment.lang is deprecated. Use moment.locale instead.",$a),a.langData=x("moment.langData is deprecated. Use moment.localeData instead.",bb);var Xf=Math.abs,Yf=ed("ms"),Zf=ed("s"),$f=ed("m"),_f=ed("h"),ag=ed("d"),bg=ed("w"),cg=ed("M"),dg=ed("y"),eg=gd("milliseconds"),fg=gd("seconds"),gg=gd("minutes"),hg=gd("hours"),ig=gd("days"),jg=gd("months"),kg=gd("years"),lg=Math.round,mg={s:45,// seconds to minute
	m:45,// minutes to hour
	h:22,// hours to day
	d:26,// days to month
	M:11},ng=Math.abs,og=wb.prototype;og.abs=Wc,og.add=Yc,og.subtract=Zc,og.as=cd,og.asMilliseconds=Yf,og.asSeconds=Zf,og.asMinutes=$f,og.asHours=_f,og.asDays=ag,og.asWeeks=bg,og.asMonths=cg,og.asYears=dg,og.valueOf=dd,og._bubble=_c,og.get=fd,og.milliseconds=eg,og.seconds=fg,og.minutes=gg,og.hours=hg,og.days=ig,og.weeks=hd,og.months=jg,og.years=kg,og.humanize=md,og.toISOString=nd,og.toString=nd,og.toJSON=nd,og.locale=lc,og.localeData=mc,
	// Deprecations
	og.toIsoString=x("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",nd),og.lang=Pf,
	// Side effect imports
	// FORMATTING
	U("X",0,0,"unix"),U("x",0,0,"valueOf"),
	// PARSING
	Z("x",Se),Z("X",Ve),ba("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),ba("x",function(a,b,c){c._d=new Date(u(a))}),
	// Side effect imports
	//! moment.js
	//! version : 2.17.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	a.version="2.17.1",b(sb),a.fn=Vf,a.min=ub,a.max=vb,a.now=Jf,a.utc=k,a.unix=Lc,a.months=Rc,a.isDate=g,a.locale=$a,a.invalid=o,a.duration=Ob,a.isMoment=s,a.weekdays=Tc,a.parseZone=Mc,a.localeData=bb,a.isDuration=xb,a.monthsShort=Sc,a.weekdaysMin=Vc,a.defineLocale=_a,a.updateLocale=ab,a.locales=cb,a.weekdaysShort=Uc,a.normalizeUnits=K,a.relativeTimeRounding=kd,a.relativeTimeThreshold=ld,a.calendarFormat=Ub,a.prototype=Vf,
	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	a.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(a){return/^nm$/i.test(a)},meridiem:function(a,b,c){return a<12?c?"vm":"VM":c?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,// Maandag is die eerste dag van die week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme
	a.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,// Sunday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	var pg={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},qg=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&a%100<=10?3:a%100>=11?4:5},rg={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},sg=function(a){return function(b,c,d,e){var f=qg(b),g=rg[a][qg(b)];return 2===f&&(g=g[c?0:1]),g.replace(/%d/i,b)}},tg=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];a.defineLocale("ar-ly",{months:tg,monthsShort:tg,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return a<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:sg("s"),m:sg("m"),mm:sg("m"),h:sg("h"),hh:sg("h"),d:sg("d"),dd:sg("d"),M:sg("M"),MM:sg("M"),y:sg("y"),yy:sg("y")},preparse:function(a){return a.replace(/\u200f/g,"").replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return pg[a]}).replace(/,/g,"،")},week:{dow:6,// Saturday is the first day of the week.
	doy:12}}),
	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	a.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,// Saturday is the first day of the week.
	doy:12}});
	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	var ug={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},vg={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};a.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return a<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return vg[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return ug[a]}).replace(/,/g,"،")},week:{dow:0,// Sunday is the first day of the week.
	doy:6}}),
	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	a.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	var wg={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},xg={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},yg=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&a%100<=10?3:a%100>=11?4:5},zg={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},Ag=function(a){return function(b,c,d,e){var f=yg(b),g=zg[a][yg(b)];return 2===f&&(g=g[c?0:1]),g.replace(/%d/i,b)}},Bg=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];a.defineLocale("ar",{months:Bg,monthsShort:Bg,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return a<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:Ag("s"),m:Ag("m"),mm:Ag("m"),h:Ag("h"),hh:Ag("h"),d:Ag("d"),dd:Ag("d"),M:Ag("M"),MM:Ag("M"),y:Ag("y"),yy:Ag("y")},preparse:function(a){return a.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return xg[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return wg[a]}).replace(/,/g,"،")},week:{dow:6,// Saturday is the first day of the week.
	doy:12}});
	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	var Cg={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};a.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(a){return/^(gündüz|axşam)$/.test(a)},meridiem:function(a,b,c){return a<4?"gecə":a<12?"səhər":a<17?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(a){if(0===a)// special case for zero
	return a+"-ıncı";var b=a%10,c=a%100-b,d=a>=100?100:null;return a+(Cg[b]||Cg[c]||Cg[d])},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),a.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:pd,mm:pd,h:pd,hh:pd,d:"дзень",dd:pd,M:"месяц",MM:pd,y:"год",yy:pd},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(a){return/^(дня|вечара)$/.test(a)},meridiem:function(a,b,c){return a<4?"ночы":a<12?"раніцы":a<17?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a%10!==2&&a%10!==3||a%100===12||a%100===13?a+"-ы":a+"-і";case"D":return a+"-га";default:return a}},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	a.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&c<20?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	var Dg={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},Eg={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};a.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(a){return a.replace(/[১২৩৪৫৬৭৮৯০]/g,function(a){return Eg[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return Dg[a]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(a,b){return 12===a&&(a=0),"রাত"===b&&a>=4||"দুপুর"===b&&a<5||"বিকাল"===b?a+12:a},meridiem:function(a,b,c){return a<4?"রাত":a<10?"সকাল":a<17?"দুপুর":a<20?"বিকাল":"রাত"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}});
	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	var Fg={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},Gg={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};a.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(a){return a.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(a){return Gg[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return Fg[a]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(a,b){return 12===a&&(a=0),"མཚན་མོ"===b&&a>=4||"ཉིན་གུང"===b&&a<5||"དགོང་དག"===b?a+12:a},meridiem:function(a,b,c){return a<4?"མཚན་མོ":a<10?"ཞོགས་ཀས":a<17?"ཉིན་གུང":a<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}}),a.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:qd,h:"un eur",hh:"%d eur",d:"un devezh",dd:qd,M:"ur miz",MM:qd,y:"ur bloaz",yy:rd},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(a){var b=1===a?"añ":"vet";return a+b},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:vd,mm:vd,h:vd,hh:vd,d:"dan",dd:vd,M:"mjesec",MM:vd,y:"godinu",yy:vd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	a.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?"r":2===a?"n":3===a?"r":4===a?"t":"è";return"w"!==b&&"W"!==b||(c="a"),a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	var Hg="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),Ig="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");a.defineLocale("cs",{months:Hg,monthsShort:Ig,monthsParse:function(a,b){var c,d=[];for(c=0;c<12;c++)
	// use custom parser to solve problem with July (červenec)
	d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(Hg,Ig),shortMonthsParse:function(a){var b,c=[];for(b=0;b<12;b++)c[b]=new RegExp("^"+a[b]+"$","i");return c}(Ig),longMonthsParse:function(a){var b,c=[];for(b=0;b<12;b++)c[b]=new RegExp("^"+a[b]+"$","i");return c}(Hg),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:xd,m:xd,mm:xd,h:xd,hh:xd,d:xd,dd:xd,M:xd,MM:xd,y:xd,yy:xd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	a.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(a){var b=/сехет$/i.exec(a)?"рен":/ҫул$/i.exec(a)?"тан":"ран";return a+b},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},ordinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	a.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,
	// time formats are the same as en-gb
	longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	// traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	ordinal:function(a){var b=a,c="",d=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed",// 1af to 10fed
	"eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return b>20?c=40===b||50===b||60===b||80===b||100===b?"fed":"ain":b>0&&(c=d[b]),a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	a.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:yd,mm:"%d Minuten",h:yd,hh:"%d Stunden",d:yd,dd:yd,M:yd,MM:yd,y:yd,yy:yd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:zd,mm:"%d Minuten",h:zd,hh:"%d Stunden",d:zd,dd:zd,M:zd,MM:zd,y:zd,yy:zd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	var Jg=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],Kg=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];a.defineLocale("dv",{months:Jg,monthsShort:Jg,weekdays:Kg,weekdaysShort:Kg,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(a){return"މފ"===a},meridiem:function(a,b,c){return a<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(a){return a.replace(/،/g,",")},postformat:function(a){return a.replace(/,/g,"،")},week:{dow:7,// Sunday is the first day of the week.
	doy:12}}),
	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	a.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},isPM:function(a){return"μ"===(a+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return z(c)&&(c=c.apply(b)),c.replace("{}",d%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	a.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	a.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),
	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	a.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	a.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	a.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!
	a.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-an de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(a){return"p"===a.charAt(0).toLowerCase()},meridiem:function(a,b,c){return a>11?c?"p.t.m.":"P.T.M.":c?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",//ne 'diurno', ĉar estas uzita por proksimumo
	dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	var Lg="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),Mg="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");a.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?Mg[a.month()]:Lg[a.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	var Ng="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),Og="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");a.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?Og[a.month()]:Ng[a.month()]},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:Ad,m:Ad,mm:Ad,h:Ad,hh:Ad,d:Ad,dd:"%d päeva",M:Ad,MM:Ad,y:Ad,yy:Ad},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	a.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	var Pg={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},Qg={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};a.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return a<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return Qg[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return Pg[a]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,// Saturday is the first day of the week.
	doy:12}});
	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	var Rg="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),Sg=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",Rg[7],Rg[8],Rg[9]];a.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:Bd,m:Bd,mm:Bd,h:Bd,hh:Bd,d:Bd,dd:Bd,M:Bd,MM:Bd,y:Bd,yy:Bd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	a.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	a.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(a){return a+(1===a?"er":"e")}}),
	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	a.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(a){return a+(1===a?"er":"e")},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	a.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	var Tg="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),Ug="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");a.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?Ug[a.month()]:Tg[a.month()]},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	var Vg=["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],Wg=["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],Xg=["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],Yg=["Did","Dil","Dim","Dic","Dia","Dih","Dis"],Zg=["Dò","Lu","Mà","Ci","Ar","Ha","Sa"];a.defineLocale("gd",{months:Vg,monthsShort:Wg,monthsParseExact:!0,weekdays:Xg,weekdaysShort:Yg,weekdaysMin:Zg,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},ordinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(a){var b=1===a?"d":a%10===2?"na":"mh";return a+b},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	a.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(a){return 0===a.indexOf("un")?"n"+a:"en "+a},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	a.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a%10===0&&10!==a?a+" שנה":a+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(a){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(a)},meridiem:function(a,b,c){return a<5?"לפנות בוקר":a<10?"בבוקר":a<12?c?'לפנה"צ':"לפני הצהריים":a<18?c?'אחה"צ':"אחרי הצהריים":"בערב"}});
	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	var $g={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},_g={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};a.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return _g[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return $g[a]})},
	// Hindi notation for meridiems are quite fuzzy in practice. While there exists
	// a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात"===b?a<4?a:a+12:"सुबह"===b?a:"दोपहर"===b?a>=10?a:a+12:"शाम"===b?a+12:void 0},meridiem:function(a,b,c){return a<4?"रात":a<10?"सुबह":a<17?"दोपहर":a<20?"शाम":"रात"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}}),a.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:Dd,mm:Dd,h:Dd,hh:Dd,d:"dan",dd:Dd,M:"mjesec",MM:Dd,y:"godinu",yy:Dd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	var ah="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");a.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(a){return"u"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return a<12?c===!0?"de":"DE":c===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return Fd.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return Fd.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:Ed,m:Ed,mm:Ed,h:Ed,hh:Ed,d:Ed,dd:Ed,M:Ed,MM:Ed,y:Ed,yy:Ed},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	a.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(a){return/^(ցերեկվա|երեկոյան)$/.test(a)},meridiem:function(a){return a<4?"գիշերվա":a<12?"առավոտվա":a<17?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(a,b){switch(b){case"DDD":case"w":case"W":case"DDDo":return 1===a?a+"-ին":a+"-րդ";default:return a}},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	a.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"siang"===b?a>=11?a:a+12:"sore"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return a<11?"pagi":a<15?"siang":a<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),a.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:Hd,m:Hd,mm:Hd,h:"klukkustund",hh:Hd,d:Hd,dd:Hd,M:Hd,MM:Hd,y:Hd,yy:Hd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	a.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	a.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(a){return"午後"===a},meridiem:function(a,b,c){return a<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},ordinalParse:/\d{1,2}日/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";default:return a}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),
	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	a.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(a,b){return 12===a&&(a=0),"enjing"===b?a:"siyang"===b?a>=11?a:a+12:"sonten"===b||"ndalu"===b?a+12:void 0},meridiem:function(a,b,c){return a<11?"enjing":a<15?"siyang":a<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	a.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(a){return/(წამი|წუთი|საათი|წელი)/.test(a)?a.replace(/ი$/,"ში"):a+"ში"},past:function(a){return/(წამი|წუთი|საათი|დღე|თვე)/.test(a)?a.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(a)?a.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(a){return 0===a?a:1===a?a+"-ლი":a<20||a<=100&&a%20===0||a%100===0?"მე-"+a:a+"-ე"},week:{dow:1,doy:7}});
	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	var bh={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};a.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(a){var b=a%10,c=a>=100?100:null;return a+(bh[a]||bh[b]||bh[c])},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	a.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	a.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"일분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(a){return"오후"===a},meridiem:function(a,b,c){return a<12?"오전":"오후"}});
	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	var ch={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};a.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(a){var b=a%10,c=a>=100?100:null;return a+(ch[a]||ch[b]||ch[c])},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),a.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){
	// Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:Jd,past:Kd,s:"e puer Sekonnen",m:Id,mm:"%d Minutten",h:Id,hh:"%d Stonnen",d:Id,dd:"%d Deeg",M:Id,MM:"%d Méint",y:Id,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	a.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(a){return"ຕອນແລງ"===a},meridiem:function(a,b,c){return a<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},ordinalParse:/(ທີ່)\d{1,2}/,ordinal:function(a){return"ທີ່"+a}});
	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	var dh={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};a.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:Md,m:Nd,mm:Qd,h:Nd,hh:Qd,d:Nd,dd:Qd,M:Nd,MM:Qd,y:Nd,yy:Qd},ordinalParse:/\d{1,2}-oji/,ordinal:function(a){return a+"-oji"},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	var eh={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};a.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:Ud,m:Td,mm:Sd,h:Td,hh:Sd,d:Td,dd:Sd,M:Td,MM:Sd,y:Td,yy:Sd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	var fh={words:{//Different grammatical cases
	m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&a<=4?b[1]:b[2]},translate:function(a,b,c){var d=fh.words[c];return 1===c.length?b?d[0]:d[1]:a+" "+fh.correctGrammaticalCase(a,d)}};a.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:fh.translate,mm:fh.translate,h:fh.translate,hh:fh.translate,d:"dan",dd:fh.translate,M:"mjesec",MM:fh.translate,y:"godinu",yy:fh.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	a.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	a.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&c<20?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	a.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(a,b){return 12===a&&(a=0),"രാത്രി"===b&&a>=4||"ഉച്ച കഴിഞ്ഞ്"===b||"വൈകുന്നേരം"===b?a+12:a},meridiem:function(a,b,c){return a<4?"രാത്രി":a<12?"രാവിലെ":a<17?"ഉച്ച കഴിഞ്ഞ്":a<20?"വൈകുന്നേരം":"രാത്രി"}});
	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	var gh={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},hh={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};a.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:Vd,m:Vd,mm:Vd,h:Vd,hh:Vd,d:Vd,dd:Vd,M:Vd,MM:Vd,y:Vd,yy:Vd},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return hh[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return gh[a]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात्री"===b?a<4?a:a+12:"सकाळी"===b?a:"दुपारी"===b?a>=10?a:a+12:"सायंकाळी"===b?a+12:void 0},meridiem:function(a,b,c){return a<4?"रात्री":a<10?"सकाळी":a<17?"दुपारी":a<20?"सायंकाळी":"रात्री"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}}),
	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	a.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"tengahari"===b?a>=11?a:a+12:"petang"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return a<11?"pagi":a<15?"tengahari":a<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	a.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"tengahari"===b?a>=11?a:a+12:"petang"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return a<11?"pagi":a<15?"tengahari":a<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	var ih={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},jh={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};a.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(a){return a.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(a){return jh[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return ih[a]})},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	a.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	var kh={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},lh={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};a.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return lh[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return kh[a]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(a,b){return 12===a&&(a=0),"राति"===b?a<4?a:a+12:"बिहान"===b?a:"दिउँसो"===b?a>=10?a:a+12:"साँझ"===b?a+12:void 0},meridiem:function(a,b,c){return a<3?"राति":a<12?"बिहान":a<16?"दिउँसो":a<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}});
	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	var mh="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),nh="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),oh=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],ph=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;a.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?nh[a.month()]:mh[a.month()]},monthsRegex:ph,monthsShortRegex:ph,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:oh,longMonthsParse:oh,shortMonthsParse:oh,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	var qh="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),rh="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),sh=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],th=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;a.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?rh[a.month()]:qh[a.month()]},monthsRegex:th,monthsShortRegex:th,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:sh,longMonthsParse:sh,shortMonthsParse:sh,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind
	a.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	var uh={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},vh={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};a.defineLocale("pa-in",{
	// There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(a){return a.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(a){return vh[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return uh[a]})},
	// Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	// a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(a,b){return 12===a&&(a=0),"ਰਾਤ"===b?a<4?a:a+12:"ਸਵੇਰ"===b?a:"ਦੁਪਹਿਰ"===b?a>=10?a:a+12:"ਸ਼ਾਮ"===b?a+12:void 0},meridiem:function(a,b,c){return a<4?"ਰਾਤ":a<10?"ਸਵੇਰ":a<17?"ਦੁਪਹਿਰ":a<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}});
	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	var wh="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),xh="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");a.defineLocale("pl",{months:function(a,b){return""===b?"("+xh[a.month()]+"|"+wh[a.month()]+")":/D MMMM/.test(b)?xh[a.month()]:wh[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:Xd,mm:Xd,h:Xd,hh:Xd,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:Xd,y:"rok",yy:Xd},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	a.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){// Saturday + Sunday
	return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),
	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	a.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){// Saturday + Sunday
	return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:Yd,h:"o oră",hh:Yd,d:"o zi",dd:Yd,M:"o lună",MM:Yd,y:"un an",yy:Yd},week:{dow:1,// Monday is the first day of the week.
	doy:7}});var yh=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];
	// http://new.gramota.ru/spravka/rules/139-prop : § 103
	// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	a.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{
	// по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:yh,longMonthsParse:yh,shortMonthsParse:yh,
	// полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	// копия предыдущего
	monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	// полные названия с падежами
	monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	// Выражение, которое соотвествует только сокращённым формам
	monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:$d,mm:$d,h:"час",hh:$d,d:"день",dd:$d,M:"месяц",MM:$d,y:"год",yy:$d},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return a<4?"ночи":a<12?"утра":a<17?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	a.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	/*jshint -W100*/
	a.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},ordinalParse:/\d{1,2} වැනි/,ordinal:function(a){return a+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(a){return"ප.ව."===a||"පස් වරු"===a},meridiem:function(a,b,c){return a>11?c?"ප.ව.":"පස් වරු":c?"පෙ.ව.":"පෙර වරු"}});
	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	var zh="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),Ah="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");a.defineLocale("sk",{months:zh,monthsShort:Ah,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:ae,m:ae,mm:ae,h:ae,hh:ae,d:ae,dd:ae,M:ae,MM:ae,y:ae,yy:ae},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:be,m:be,mm:be,h:be,hh:be,d:be,dd:be,M:be,MM:be,y:be,yy:be},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	a.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(a){return"M"===a.charAt(0)},meridiem:function(a,b,c){return a<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	var Bh={words:{//Different grammatical cases
	m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&a<=4?b[1]:b[2]},translate:function(a,b,c){var d=Bh.words[c];return 1===c.length?b?d[0]:d[1]:a+" "+Bh.correctGrammaticalCase(a,d)}};a.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var a=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:Bh.translate,mm:Bh.translate,h:Bh.translate,hh:Bh.translate,d:"дан",dd:Bh.translate,M:"месец",MM:Bh.translate,y:"годину",yy:Bh.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	var Ch={words:{//Different grammatical cases
	m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&a<=4?b[1]:b[2]},translate:function(a,b,c){var d=Ch.words[c];return 1===c.length?b?d[0]:d[1]:a+" "+Ch.correctGrammaticalCase(a,d)}};a.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:Ch.translate,mm:Ch.translate,h:Ch.translate,hh:Ch.translate,d:"dan",dd:Ch.translate,M:"mesec",MM:Ch.translate,y:"godinu",yy:Ch.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:7}}),
	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	a.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(a,b,c){return a<11?"ekuseni":a<15?"emini":a<19?"entsambama":"ebusuku"},meridiemHour:function(a,b){return 12===a&&(a=0),"ekuseni"===b?a:"emini"===b?a>=11?a:a+12:"entsambama"===b||"ebusuku"===b?0===a?0:a+12:void 0},ordinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	a.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":"e";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	a.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,// Monday is the first day of the week.
	doy:7}});
	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	var Dh={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},Eh={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};a.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(a){return a+"வது"},preparse:function(a){return a.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(a){return Eh[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return Dh[a]})},
	// refer http://ta.wikipedia.org/s/1er1
	meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(a,b,c){return a<2?" யாமம்":a<6?" வைகறை":a<10?" காலை":a<14?" நண்பகல்":a<18?" எற்பாடு":a<22?" மாலை":" யாமம்"},meridiemHour:function(a,b){return 12===a&&(a=0),"யாமம்"===b?a<2?a:a+12:"வைகறை"===b||"காலை"===b?a:"நண்பகல்"===b&&a>=10?a:a+12},week:{dow:0,// Sunday is the first day of the week.
	doy:6}}),
	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	a.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},ordinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(a,b){return 12===a&&(a=0),"రాత్రి"===b?a<4?a:a+12:"ఉదయం"===b?a:"మధ్యాహ్నం"===b?a>=10?a:a+12:"సాయంత్రం"===b?a+12:void 0},meridiem:function(a,b,c){return a<4?"రాత్రి":a<10?"ఉదయం":a<17?"మధ్యాహ్నం":a<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,// Sunday is the first day of the week.
	doy:6}}),
	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	a.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sext_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Sex_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",m:"minutu ida",mm:"minutus %d",h:"horas ida",hh:"horas %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),
	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	a.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),// yes, three characters difference
	weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return"หลังเที่ยง"===a},meridiem:function(a,b,c){return a<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),
	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	a.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	var Fh="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");a.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:ce,past:de,s:"puS lup",m:"wa’ tup",mm:ee,h:"wa’ rep",hh:ee,d:"wa’ jaj",dd:ee,M:"wa’ jar",MM:ee,y:"wa’ DIS",yy:ee},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}});
	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	var Gh={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};
	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	// This is currently too difficult (maybe even impossible) to add.
	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	return a.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(a){if(0===a)// special case for zero
	return a+"'ıncı";var b=a%10,c=a%100-b,d=a>=100?100:null;return a+(Gh[b]||Gh[c]||Gh[d])},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),a.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(a){return"d'o"===a.toLowerCase()},meridiem:function(a,b,c){return a>11?c?"d'o":"D'O":c?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:ge,m:ge,mm:ge,h:ge,hh:ge,d:ge,dd:ge,M:ge,MM:ge,y:ge,yy:ge},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,// Saturday is the first day of the week.
	doy:12}}),a.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,// Saturday is the first day of the week.
	doy:12}}),a.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:je,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:ke("[Сьогодні "),nextDay:ke("[Завтра "),lastDay:ke("[Вчора "),nextWeek:ke("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return ke("[Минулої] dddd [").call(this);case 1:case 2:case 4:return ke("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:ie,mm:ie,h:"годину",hh:ie,d:"день",dd:ie,M:"місяць",MM:ie,y:"рік",yy:ie},
	// M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return a<4?"ночі":a<12?"ранку":a<17?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),a.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,// Monday is the first day of the week.
	doy:7}}),a.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(a){return/^ch$/i.test(a)},meridiem:function(a,b,c){return a<12?c?"sa":"SA":c?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},ordinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"下午"===b||"晚上"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return d<600?"凌晨":d<900?"早上":d<1130?"上午":d<1230?"中午":d<1800?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var b,c;return b=a().startOf("week"),c=this.diff(b,"days")>=7?"[下]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},lastWeek:function(){var b,c;return b=a().startOf("week"),c=this.unix()<b.unix()?"[上]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{
	// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	dow:1,// Monday is the first day of the week.
	doy:4}}),a.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return d<600?"凌晨":d<900?"早上":d<1130?"上午":d<1230?"中午":d<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}}),a.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return d<600?"凌晨":d<900?"早上":d<1130?"上午":d<1230?"中午":d<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}}),a.locale("en"),a});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module)))

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 12/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	entcore_1.ng.addRequiredModule('chart.js');
	//CONTROLLERS
	var eval_teacher_ctl_1 = __webpack_require__(8);
	var eval_acu_teacher_ctl_1 = __webpack_require__(23);
	var eval_suivi_competences_eleve_ctl_1 = __webpack_require__(24);
	var eval_suivi_competences_classe_ctl_1 = __webpack_require__(25);
	entcore_1.ng.controllers.push(eval_teacher_ctl_1.evaluationsController);
	entcore_1.ng.controllers.push(eval_acu_teacher_ctl_1.evalAcuTeacherController);
	entcore_1.ng.controllers.push(eval_suivi_competences_eleve_ctl_1.evalSuiviCompetenceEleveCtl);
	entcore_1.ng.controllers.push(eval_suivi_competences_classe_ctl_1.evalSuiviCompetenceClasseCtl);
	//FILTERS
	var unique_1 = __webpack_require__(26);
	var customSearch_1 = __webpack_require__(27);
	var customSearchCompetences_1 = __webpack_require__(28);
	var getMatiereClasse_1 = __webpack_require__(29);
	entcore_1.ng.filters.push(unique_1.uniqueFilter);
	entcore_1.ng.filters.push(customSearch_1.customSearchFilter);
	entcore_1.ng.filters.push(customSearchCompetences_1.customSearchCompetencesFilter);
	entcore_1.ng.filters.push(getMatiereClasse_1.getMatiereClasseFilter);
	//DIRECTIVES
	var cFilAriane_1 = __webpack_require__(30);
	var navigable_1 = __webpack_require__(31);
	var cNavigableCompetences_1 = __webpack_require__(32);
	var navigatable_1 = __webpack_require__(33);
	var tabs_1 = __webpack_require__(34);
	var pane_1 = __webpack_require__(35);
	var cSkillNoteDevoir_1 = __webpack_require__(36);
	var cSkillsColorColumn_1 = __webpack_require__(37);
	var cSkillsColorPage_1 = __webpack_require__(38);
	var cSkillsList_1 = __webpack_require__(39);
	var autofocus_1 = __webpack_require__(40);
	var sticky_1 = __webpack_require__(41);
	var ProportionSuiviCompetence_1 = __webpack_require__(42);
	var slider_1 = __webpack_require__(43);
	entcore_1.ng.directives.push(cFilAriane_1.cFilAriane);
	entcore_1.ng.directives.push(navigable_1.navigable);
	entcore_1.ng.directives.push(navigatable_1.navigatable);
	entcore_1.ng.directives.push(cNavigableCompetences_1.navigableCompetences);
	entcore_1.ng.directives.push(tabs_1.tabs);
	entcore_1.ng.directives.push(pane_1.pane);
	entcore_1.ng.directives.push(cSkillNoteDevoir_1.cSkillNoteDevoir);
	entcore_1.ng.directives.push(cSkillsColorColumn_1.cSkillsColorColumn);
	entcore_1.ng.directives.push(cSkillsColorPage_1.cSkillsColorPage);
	entcore_1.ng.directives.push(cSkillsList_1.cSkillsList);
	entcore_1.ng.directives.push(autofocus_1.autofocus);
	entcore_1.ng.directives.push(sticky_1.sticky);
	entcore_1.ng.directives.push(ProportionSuiviCompetence_1.proportionSuiviCompetence);
	entcore_1.ng.directives.push(slider_1.rzslider);
	entcore_1.routes.define(function ($routeProvider) {
	    $routeProvider
	        .when('/devoirs/list', { action: 'listDevoirs' })
	        .when('/devoir/create', { action: 'createDevoir' })
	        .when('/devoir/:idDevoir/edit', { action: 'editDevoir' })
	        .when('/devoir/:devoirId', { action: 'viewNotesDevoir' })
	        .when('/releve', { action: 'displayReleveNotes' })
	        .when('/competences/eleve', { action: 'displaySuiviCompetencesEleve' })
	        .when('/competences/classe', { action: 'displaySuiviCompetencesClasse' })
	        .when('/remplacements/list', { action: 'listRemplacements' })
	        .when('/remplacement/create', { action: 'createRemplacements' })
	        .when('/disabled', { action: 'disabled' })
	        .when('/', { action: 'accueil' })
	        .otherwise({
	        redirectTo: '/'
	    });
	});
	


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var entcore_1 = __webpack_require__(2);
	var eval_teacher_mdl_1 = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var moment = __webpack_require__(5);
	exports.evaluationsController = entcore_1.ng.controller('EvaluationsController', [
	    '$scope', 'route', '$rootScope', '$location', '$filter', '$sce', '$compile', '$timeout', '$route',
	    function ($scope, route, $rootScope, $location, $filter, $sce, $compile, $timeout, $route) {
	        $scope.initPeriodesList = function () {
	            $scope.periodesList = {
	                "type": "select",
	                "name": "Service",
	                "value": $scope.periodeParDefault(),
	                "values": []
	            };
	            _.map($scope.periodes.all, function (periode) {
	                $scope.periodesList.values.push(periode);
	            });
	            $scope.periodesList.values.push({ libelle: $scope.translate('viescolaire.utils.annee'), id: undefined });
	        };
	        $scope.initSearch = function () {
	            return {
	                matiere: '*',
	                periode: $scope.periodeParDefault(),
	                classe: '*',
	                sousmatiere: '*',
	                type: '*',
	                idEleve: '*',
	                name: '',
	                duplication: ''
	            };
	        };
	        route({
	            accueil: function (params) {
	                if (eval_teacher_mdl_1.evaluations.structure !== undefined) {
	                    $scope.cleanRoot();
	                    // Chefs d'établissement
	                    if ($scope.Structure === undefined) {
	                        $scope.Structure = new eval_teacher_mdl_1.Structure();
	                    }
	                    //si les Eleves ne sont pas sync
	                    if ($scope.Structure.synchronized.Eleve !== false) {
	                        if ($scope.isChefEtab()) {
	                            eval_teacher_mdl_1.evaluations.on('eleves-sync', function () {
	                                $scope.Structure.eleves.all = eval_teacher_mdl_1.evaluations.eleves;
	                                utils.safeApply($scope);
	                            });
	                        }
	                        else {
	                            eval_teacher_mdl_1.evaluations.on('eleves-sync', function () {
	                                $scope.eleves = eval_teacher_mdl_1.evaluations.eleves;
	                                utils.safeApply($scope);
	                            });
	                        }
	                    }
	                }
	                entcore_1.template.open('main', '../templates/evaluations/enseignants/eval_acu_teacher');
	                utils.safeApply($scope);
	            },
	            listRemplacements: function () {
	                $scope.cleanRoot();
	                $scope.listRemplacements();
	            },
	            createDevoir: function (params) {
	                $scope.cleanRoot();
	                $scope.createDevoir();
	                eval_teacher_mdl_1.evaluations.enseignements.on('sync', function () {
	                    $scope.initFilter(true);
	                });
	            },
	            editDevoir: function (params) {
	                $scope.cleanRoot();
	                var devoirTmp = $scope.devoirs.findWhere({ id: parseInt(params.idDevoir) });
	                $scope.devoir = $scope.initDevoir();
	                $scope.devoir.id_groupe = devoirTmp.id_groupe;
	                $scope.devoir.id = devoirTmp.id;
	                $scope.devoir.name = devoirTmp.name;
	                $scope.devoir.owner = devoirTmp.owner;
	                $scope.devoir.libelle = devoirTmp.libelle;
	                $scope.devoir.id_sousmatiere = devoirTmp.id_sousmatiere;
	                $scope.devoir.id_type = parseInt(devoirTmp.id_type);
	                $scope.devoir.id_matiere = devoirTmp.id_matiere;
	                $scope.devoir.id_etat = parseInt(devoirTmp.id_etat);
	                $scope.devoir.date_publication = new Date(devoirTmp.date_publication);
	                $scope.devoir.id_etablissement = devoirTmp.id_etablissement;
	                $scope.devoir.diviseur = devoirTmp.diviseur;
	                $scope.devoir.coefficient = parseInt(devoirTmp.coefficient);
	                $scope.devoir.date = new Date(devoirTmp.date);
	                $scope.devoir.ramener_sur = devoirTmp.ramener_sur;
	                $scope.devoir.is_evaluated = devoirTmp.is_evaluated;
	                $scope.oldIs_Evaluated = devoirTmp.is_evaluated;
	                $scope.devoir.dateDevoir = new Date($scope.devoir.date);
	                $scope.devoir.datePublication = new Date($scope.devoir.date_publication);
	                $scope.devoir.id_periode = devoirTmp.id_periode;
	                $scope.devoir.controlledDate = true;
	                $scope.firstConfirmSuppSkill = false;
	                $scope.secondConfirmSuppSkill = false;
	                $scope.evaluatedDisabel = false;
	                $scope.allCompetences = devoirTmp.competences;
	                $scope.evaluatedCompetence = $scope.evaluationOfSkilles($scope.allCompetences, devoirTmp);
	                $scope.devoir.competences.sync().then(function () {
	                    $scope.createDevoir();
	                    eval_teacher_mdl_1.evaluations.enseignements.on('sync', function () {
	                        $scope.initFilter(true);
	                        $scope.evaluations.competencesDevoir = $scope.devoir.competences.all;
	                        //tableau des connaissances à cocher éventuellement
	                        var parentToCheck = [];
	                        for (var i = 0; i < $scope.evaluations.competencesDevoir.length; i++) {
	                            for (var j = 0; j < $scope.evaluations.enseignements.all.length; j++) {
	                                if ($scope.competencesFilter[$scope.evaluations.competencesDevoir[i].id_competence + '_'
	                                    + $scope.evaluations.enseignements.all[j].id] !== undefined) {
	                                    //selection des competences du devoir
	                                    $scope.competencesFilter[$scope.evaluations.competencesDevoir[i].id_competence
	                                        + '_' + $scope.evaluations.enseignements.all[j].id].isSelected = true;
	                                    $scope.evaluations.competencesDevoir[i].id
	                                        = $scope.evaluations.competencesDevoir[i].id_competence;
	                                    $scope.devoir.competences.all[i].id = $scope.devoir.competences.all[i].id_competence;
	                                    //remplissage des connaissances parent  à cocher éventuellement
	                                    var parentCo = $scope.competencesFilter[$scope.evaluations.competencesDevoir[i].id_parent
	                                        + '_' + $scope.evaluations.enseignements.all[j].id];
	                                    if (parentToCheck.indexOf(parentCo) === -1 && parentCo !== undefined) {
	                                        parentToCheck.push(parentCo);
	                                    }
	                                    utils.safeApply($scope);
	                                }
	                            }
	                        }
	                        //On coche la connaissance si elle n'a aucun fils sélectionné
	                        for (var i = 0; i < parentToCheck.length; i++) {
	                            var checkIt = true;
	                            for (var j in $scope.competencesFilter) {
	                                if ($scope.competencesFilter.hasOwnProperty(j)) {
	                                    var currComp = $scope.competencesFilter[j];
	                                    if (currComp !== undefined && currComp.data.id_parent === parentToCheck[i].data.id) {
	                                        checkIt = currComp.isSelected;
	                                    }
	                                    // si on rencontre un fils non selectionné on arrête de chercher
	                                    if (!checkIt) {
	                                        break;
	                                    }
	                                }
	                            }
	                            if (checkIt) {
	                                parentToCheck[i].isSelected = true;
	                                parentToCheck[i].id = parentToCheck[i].id_competence;
	                            }
	                            else {
	                                parentToCheck[i].isSelected = false;
	                                parentToCheck[i].id = parentToCheck[i].id_competence;
	                            }
	                            //depliement de l'enseignement pour les compétences sélectionnées du devoir à modifier
	                            var enseignementToOpen = $scope.devoir.enseignements.all.find(function (elem) { return elem.id === parentToCheck[i].data.id_enseignement; });
	                            enseignementToOpen.open = true;
	                            //depliement des connaissances parent des compétences du devoir à modifier
	                            parentToCheck[i].data.open = true;
	                            utils.safeApply($scope);
	                        }
	                    });
	                    entcore_1.template.open('main', '../templates/evaluations/enseignants/creation_devoir/display_creation_devoir');
	                    $scope.displayCreationDevoir = true;
	                    utils.safeApply($scope);
	                });
	            },
	            listDevoirs: function (params) {
	                $scope.cleanRoot();
	                var openTamplates = function () {
	                    //rajout de la periode Annee
	                    $scope.periodes.sync();
	                    $scope.periodes.on('sync', function () {
	                        $scope.search.periode = $scope.periodeParDefault();
	                        $scope.initPeriodesList();
	                        utils.safeApply($scope);
	                    });
	                    entcore_1.template.open('main', '../templates/evaluations/enseignants/liste_devoirs/display_devoirs_structure');
	                    entcore_1.template.open('evaluations', '../templates/evaluations/enseignants/liste_devoirs/list_view');
	                };
	                if ($scope.isChefEtab()) {
	                    $scope.modificationDevoir = false;
	                    if ($scope.Structure === undefined)
	                        $scope.Structure = new eval_teacher_mdl_1.Structure();
	                    if (!$scope.Structure.synchronized.classes) {
	                        $scope.Structure.syncClasses($scope.evaluations.structure.id);
	                        $scope.Structure.classes.on('classes-sync', function () {
	                            $scope.Structure.syncDevoirs();
	                            // console.log("Classes sync (/)");
	                            $scope.Structure.devoirs.on("devoirs-sync", function () {
	                                eval_teacher_mdl_1.evaluations.devoirs.getPercentDone(_.pluck(eval_teacher_mdl_1.evaluations.devoirs.all, 'id')).then(function () {
	                                    utils.safeApply($scope);
	                                });
	                                openTamplates();
	                            });
	                        });
	                    }
	                    else {
	                        openTamplates();
	                    }
	                }
	                else {
	                    eval_teacher_mdl_1.evaluations.devoirs.getPercentDone(_.pluck(eval_teacher_mdl_1.evaluations.devoirs.all, 'id'));
	                    openTamplates();
	                }
	            },
	            viewNotesDevoir: function (params) {
	                $scope.cleanRoot();
	                window.scrollTo(0, 0);
	                $scope.resetSelected();
	                if (!entcore_1.template.isEmpty('leftSide-userInfo'))
	                    entcore_1.template.close('leftSide-userInfo');
	                if (!entcore_1.template.isEmpty('leftSide-devoirInfo'))
	                    entcore_1.template.close('leftSide-devoirInfo');
	                $scope.currentDevoir = _.findWhere(eval_teacher_mdl_1.evaluations.devoirs.all, { id: parseInt(params.devoirId) });
	                var current_periode = $scope.periodes.findWhere({ id: $scope.currentDevoir.id_periode });
	                var date_saisie = current_periode.date_fin_saisie;
	                if (moment(date_saisie).diff(moment($scope.currentDevoir.date), "days") >= 0
	                    || $scope.isChefEtab()) {
	                    $scope.endSaisie = false;
	                    utils.safeApply($scope);
	                }
	                else {
	                    $scope.endSaisie = true;
	                    utils.safeApply($scope);
	                }
	                $scope.currentDevoir.endSaisie = $scope.endSaisie;
	                var syncStudents = function () {
	                    $scope.openedDetails = true;
	                    $scope.openedStatistiques = true;
	                    $scope.openedStudentInfo = true;
	                    if ($scope.currentDevoir !== undefined) {
	                        $scope.currentDevoir.competences.sync().then(function () {
	                            utils.safeApply($scope);
	                        });
	                        $scope.currentDevoir.eleves.sync().then(function () {
	                            $scope.$broadcast('initHeaderColumn');
	                            var _evals = [];
	                            for (var i = 0; i < $scope.currentDevoir.eleves.all.length; i++) {
	                                if ($scope.currentDevoir.eleves.all[i].evaluation.valeur !== null
	                                    && $scope.currentDevoir.eleves.all[i].evaluation.valeur !== undefined
	                                    && $scope.currentDevoir.eleves.all[i].evaluation.valeur !== "") {
	                                    _evals.push($scope.currentDevoir.eleves.all[i].evaluation);
	                                }
	                            }
	                            utils.safeApply($scope);
	                            $scope.currentDevoir.calculStats(_evals).then(function () {
	                                utils.safeApply($scope);
	                            });
	                        });
	                    }
	                    entcore_1.template.open('main', '../templates/evaluations/enseignants/liste_notes_devoir/display_notes_devoir');
	                    utils.safeApply($scope);
	                };
	                var _classe = eval_teacher_mdl_1.evaluations.classes.findWhere({ id: $scope.currentDevoir.id_groupe });
	                if (_classe !== undefined) {
	                    if (_classe.eleves.all.length === 0) {
	                        _classe.eleves.sync().then(function () {
	                            syncStudents();
	                        });
	                    }
	                    else {
	                        syncStudents();
	                    }
	                }
	            },
	            displayReleveNotes: function (params) {
	                $scope.cleanRoot();
	                //rajout de la periode Annee
	                $scope.periodes.sync();
	                $scope.periodes.on('sync', function () {
	                    $scope.search.periode = $scope.periodeParDefault();
	                    $scope.initPeriodesList();
	                    // Affichage des criteres par défaut quand on arrive sur le releve
	                    $scope.openLeftMenu("opened.criteres", false);
	                    if (!entcore_1.template.isEmpty('leftSide-userInfo'))
	                        entcore_1.template.close('leftSide-userInfo');
	                    if (!entcore_1.template.isEmpty('leftSide-devoirInfo'))
	                        entcore_1.template.close('leftSide-devoirInfo');
	                    if ($scope.releveNote !== undefined && (($scope.search.matiere === undefined || $scope.search.matiere === null) || $scope.search.matiere.id !== $scope.releveNote.idMatiere
	                        || $scope.search.classe.id !== $scope.releveNote.idClasse || $scope.search.periode.id !== $scope.releveNote.idPeriode)) {
	                        $scope.releveNote = undefined;
	                    }
	                    if ($scope.search.classe !== '*' && ($scope.search.matiere !== null && $scope.search.matiere.id !== '*') && $scope.search.periode !== '*') {
	                        $scope.getReleve();
	                    }
	                    utils.safeApply($scope);
	                });
	                entcore_1.template.open('main', '../templates/evaluations/enseignants/releve_notes/display_releve');
	            },
	            displaySuiviCompetencesEleve: function (params) {
	                $scope.cleanRoot();
	                var display = function () {
	                    entcore_1.template.open('main', '../templates/evaluations/enseignants/suivi_competences_eleve/container');
	                    if ($scope.informations.eleve === undefined) {
	                        $scope.informations.eleve = null;
	                    }
	                    $scope.sortType = 'title'; // set the default sort type
	                    $scope.sortReverse = false; // set the default sort order
	                };
	                if (params.idEleve != undefined && params.idClasse != undefined) {
	                    $scope.search.classe = _.findWhere(eval_teacher_mdl_1.evaluations.classes.all, { 'id': params.idClasse });
	                    $scope.search.classe.eleves.sync().then(function () {
	                        $scope.search.eleve = _.findWhere($scope.search.classe.eleves.all, { 'id': params.idEleve });
	                        if ($scope.displayFromClass)
	                            $scope.displayFromClass = false;
	                        $scope.displayFromClass = true;
	                        display();
	                    });
	                }
	                else {
	                    display();
	                }
	            },
	            displaySuiviCompetencesClasse: function (params) {
	                $scope.cleanRoot();
	                var display = function () {
	                    entcore_1.template.open('main', '../templates/evaluations/enseignants/suivi_competences_classe/container');
	                    $scope.allRefreshed = false;
	                    $scope.sortType = 'title'; // set the default sort type
	                    $scope.sortReverse = false; // set the default sort order
	                };
	                if (params.idClasse != undefined) {
	                    var classe = eval_teacher_mdl_1.evaluations.classes.findWhere({ id: params.idClasse });
	                    $scope.search.classe = classe;
	                    if (classe !== undefined) {
	                        if (classe.eleves.empty())
	                            classe.eleves.sync();
	                        if (params.idPeriode !== undefined) {
	                            $scope.search.periode = eval_teacher_mdl_1.evaluations.periodes.findWhere({ id: parseInt(params.idPeriode) });
	                        }
	                        else {
	                            $scope.search.periode = $scope.getPeriodeAnnee();
	                        }
	                        display();
	                    }
	                }
	                else {
	                    display();
	                }
	            },
	            disabled: function () {
	                entcore_1.template.open('main', '../templates/disabled_structure');
	                utils.safeApply($scope);
	            }
	        });
	        $scope.opened = {
	            devoir: -1,
	            note: -1,
	            criteres: true,
	            details: true,
	            statistiques: true,
	            studentInfo: true,
	            devoirInfo: true,
	            lightbox: false,
	            lightboxEvalLibre: false,
	            lightboxs: {
	                updateDevoir: {
	                    firstConfirmSupp: false,
	                    secondConfirmSupp: false,
	                    evaluatedSkillDisabel: false
	                },
	                createDevoir: {
	                    firstConfirmSupp: false,
	                    secondConfirmSupp: false
	                }
	            },
	            accOp: 0,
	            evaluation: {
	                suppretionMsg1: false,
	                suppretionMsg2: false,
	            }
	        };
	        $scope.isChefEtab = function () {
	            return entcore_1.model.me.type === 'PERSEDUCNAT' &&
	                entcore_1.model.me.functions !== undefined &&
	                entcore_1.model.me.functions.DIR !== undefined &&
	                entcore_1.model.me.functions.DIR.code === 'DIR';
	        };
	        $scope.evaluations = eval_teacher_mdl_1.evaluations;
	        $scope.competencesSearchKeyWord = "";
	        $scope.devoirs = eval_teacher_mdl_1.evaluations.devoirs;
	        $scope.enseignements = eval_teacher_mdl_1.evaluations.enseignements;
	        $scope.bSelectAllEnseignements = false;
	        $scope.matieres = eval_teacher_mdl_1.evaluations.matieres;
	        $scope.releveNotes = eval_teacher_mdl_1.evaluations.releveNotes;
	        $scope.releveNote = null;
	        $scope.periodes = eval_teacher_mdl_1.evaluations.periodes;
	        if ($scope.periodes !== undefined) {
	            $scope.periodes.sync();
	        }
	        else {
	            console.log("Periodes indéfinies, l'établissement ne doit pas être actif.");
	        }
	        $scope.periodesWithYear = _.extendedDiagnostics;
	        $scope.classes = eval_teacher_mdl_1.evaluations.classes;
	        $scope.types = eval_teacher_mdl_1.evaluations.types;
	        $scope.filter = $filter;
	        $scope.template = entcore_1.template;
	        $scope.currentDevoir = {};
	        $scope.search = {
	            matiere: '*',
	            periode: '*',
	            classe: '*',
	            sousmatiere: '*',
	            type: '*',
	            idEleve: '*',
	            name: '',
	            duplication: ''
	        };
	        $scope.informations = {};
	        $scope.messages = {
	            successEvalLibre: false
	        };
	        $scope.me = entcore_1.model.me;
	        $scope.text = "";
	        $scope.selected = {
	            devoirs: {
	                list: [],
	                listwithEvaluatedSkills: [],
	                listwithEvaluatedMarks: [],
	                all: false
	            },
	            eleve: null,
	            eleves: {
	                list: [],
	                all: false
	            },
	            competences: {
	                list: [],
	                all: false
	            },
	            chartClasse: false,
	            classes: [],
	        };
	        $scope.synchronizeStudents = function (idClasse) {
	            var _classe = eval_teacher_mdl_1.evaluations.classes.findWhere({ id: idClasse });
	            if (_classe !== undefined && !_classe.remplacement && _classe.eleves.empty()) {
	                _classe.eleves.sync();
	            }
	        };
	        $scope.confirmerDuplication = function () {
	            if ($scope.selected.devoirs.list.length === 1) {
	                var devoir = $scope.selected.devoirs.list[0];
	                devoir.duplicate($scope.selected.classes)
	                    .then(function () {
	                    $scope.devoirs.sync().then(function () {
	                        $scope.resetSelected();
	                        $scope.opened.lightboxs.duplication = false;
	                        utils.safeApply($scope);
	                    });
	                })
	                    .catch(function () {
	                    entcore_1.notify.error(entcore_1.idiom.translate('evaluation.duplicate.devoir.error'));
	                });
	            }
	        };
	        $scope.getPeriodeAnnee = function () {
	            return { libelle: $scope.translate('viescolaire.utils.annee'), id: undefined };
	        };
	        /**
	         * Changement établissemnt : réinitial
	         */
	        // $scope.changeEtablissement = () => {
	        //     $scope.evaluations.sync().then(()=>{
	        //         $scope.evaluations = evaluations;
	        //
	        //         evaluations.periodes.on('sync', function () {
	        //             setCurrentPeriode().then((defaultPeriode) => {
	        //                 $scope.search.periode = (defaultPeriode !== -1) ? defaultPeriode : '*';
	        //                 utils.safeApply($scope);
	        //             });
	        //         });
	        //         // On réinitialise les éléments de rech
	        //         $scope.search = {
	        //             matiere: '*',
	        //             periode : undefined,
	        //             classe : '*',
	        //             sousmatiere : '*',
	        //             type : '*',
	        //             idEleve : '*',
	        //             name : ''
	        //         };
	        //
	        //         $scope.periodes = evaluations.periodes;
	        //         $scope.periodes.sync();
	        //         $scope.classes = evaluations.classes;
	        //         $scope.devoirs = evaluations.devoirs;
	        //         $scope.matieres = evaluations.matieres;
	        //         utils.safeApply($scope);
	        //     });
	        // };
	        // $scope.updateEtabInfo = () =>{
	        //     // On récupère l'établissement sélectionné
	        //     $scope.evaluations.structure = _.findWhere($scope.evaluations.structures.all, {id : $scope.devoir.id_etablissement})
	        //     $scope.evaluations.sync().then(()=>{
	        //         $scope.evaluations = evaluations;
	        //
	        //         evaluations.periodes.on('sync', function () {
	        //             setCurrentPeriode().then((defaultPeriode) => {
	        //                 $scope.search.periode = (defaultPeriode !== -1) ? defaultPeriode : '*';
	        //                 utils.safeApply($scope);
	        //             });
	        //         });
	        //         $scope.periodes = evaluations.periodes;
	        //         $scope.periodes.sync();
	        //         $scope.classes = evaluations.classes;
	        //         $scope.devoirs = evaluations.devoirs;
	        //         $scope.matieres = evaluations.matieres;
	        //         utils.safeApply($scope);
	        //     });
	        // };
	        $scope.changeEtablissement = function () {
	            var init = function () {
	                $scope.initReferences();
	                $scope.search = $scope.initSearch();
	            };
	            if (!eval_teacher_mdl_1.evaluations.structure.isSynchronized) {
	                eval_teacher_mdl_1.evaluations.structure.sync().then(function () {
	                    init();
	                });
	            }
	            else {
	                init();
	            }
	        };
	        $scope.switchStructureCreation = function () {
	            var structure = eval_teacher_mdl_1.evaluations.structures.findWhere({ id: $scope.devoir.id_etablissement });
	            if (structure !== undefined) {
	                eval_teacher_mdl_1.evaluations.structure = structure;
	                $scope.changeEtablissement();
	            }
	        };
	        $scope.annulerDuplication = function () {
	            $scope.selected.classes = [];
	            $scope.opened.lightboxs.duplication = false;
	        };
	        $scope.getClassesByIdCycle = function (type_groupe) {
	            var currentIdGroup = $scope.selected.devoirs.list[0].id_groupe;
	            var targetIdCycle = _.find($scope.classes.all, { id: currentIdGroup }).id_cycle;
	            return _.filter($scope.classes.all, function (classe) {
	                return type_groupe !== undefined ?
	                    (classe.id_cycle === targetIdCycle && classe.id !== currentIdGroup && type_groupe === classe.type_groupe) :
	                    (classe.id_cycle === targetIdCycle && classe.id !== currentIdGroup);
	            });
	        };
	        $scope.filterSearchDuplication = function () {
	            return function (classe) {
	                if ($scope.search.duplication === '')
	                    return true;
	                else
	                    return classe.name.indexOf($scope.search.duplication) !== -1;
	            };
	        };
	        /**
	         * Ajoute la classe qui vient
	         * @param selectedClasseId Identifiant de la classe sélectionnée
	         */
	        $scope.selectClasse = function (selectedClasseId) {
	            var classe = $scope.classes.findWhere({ id: selectedClasseId });
	            if (classe !== undefined) {
	                $scope.selected.classes.push({
	                    id: selectedClasseId,
	                    type_groupe: classe.type_groupe
	                });
	            }
	            else {
	                $scope.selected.classes = _.reject($scope.selected.classes, function (classe) {
	                    return classe.id === selectedClasseId;
	                });
	            }
	        };
	        $scope.isSelected = function (id) {
	            return _.indexOf($scope.selected.classes, id) !== -1;
	        };
	        $scope.eleves = [];
	        if (eval_teacher_mdl_1.evaluations.synchronized.classes !== 0) {
	            if (eval_teacher_mdl_1.evaluations.classes !== undefined) {
	                eval_teacher_mdl_1.evaluations.classes.on('classes-sync', function () {
	                    var _loop_1 = function (i) {
	                        var elevesOfclass = _.map(eval_teacher_mdl_1.evaluations.classes.all[i].eleves.all, function (eleve) {
	                            if ((_.findWhere($scope.eleves, { id: eleve.id })) === undefined) {
	                                return _.extend(eleve, {
	                                    classEleve: eval_teacher_mdl_1.evaluations.classes.all[i]
	                                });
	                            }
	                        });
	                        $scope.eleves = _.union($scope.eleves, _.without(elevesOfclass, undefined));
	                    };
	                    for (var i = 0; i < eval_teacher_mdl_1.evaluations.classes.all.length; i++) {
	                        _loop_1(i);
	                    }
	                });
	            }
	        }
	        else {
	            var _loop_2 = function (i) {
	                var elevesOfclass = _.map(eval_teacher_mdl_1.evaluations.classes.all[i].eleves.all, function (eleve) {
	                    if ((_.findWhere($scope.eleves, { id: eleve.id })) === undefined) {
	                        return _.extend(eleve, {
	                            classEleve: eval_teacher_mdl_1.evaluations.classes.all[i]
	                        });
	                    }
	                });
	                $scope.eleves = _.union($scope.eleves, _.without(elevesOfclass, undefined));
	            };
	            for (var i = 0; i < eval_teacher_mdl_1.evaluations.classes.all.length; i++) {
	                _loop_2(i);
	            }
	        }
	        /**
	         * cette function permet d'extraire les competences evalué du devoir
	         * @param Skills : les competences du devoir
	         * @param Devoir : le devoir à examiner
	         * @returns {Array} of skills
	         */
	        $scope.evaluationOfSkilles = function (Skills, Devoir) {
	            var Myarray = [];
	            if (Skills.all.length > 0) {
	                var _loop_3 = function (i) {
	                    var isEvaluated = false;
	                    _.map(Devoir.eleves.all, function (eleve) {
	                        if (eleve.evaluation.competenceNotes.findWhere({ id_competence: Skills.all[i].id_competence }).evaluation !== -1) {
	                            isEvaluated = true;
	                        }
	                    });
	                    if (isEvaluated)
	                        Myarray.push(Skills.all[i]);
	                };
	                for (var i = 0; i < Skills.all.length; i++) {
	                    _loop_3(i);
	                }
	                return Myarray;
	            }
	        };
	        $scope.afficherRecap = function () {
	            if ($scope.opened.accOp === 1) {
	                $scope.opened.accOp = 0;
	            }
	            else {
	                $scope.opened.accOp = 1;
	            }
	        };
	        $scope.confirmSuppretion = function () {
	            if ($scope.selected.devoirs.list.length > 0) {
	                $scope.devoirsUncancelable = [];
	                if (!$scope.isChefEtab()) {
	                    _.map($scope.selected.devoirs.list, function (devoir) {
	                        var current_periode = $scope.periodes.findWhere({ id: devoir.id_periode });
	                        var date_saisie = current_periode.date_fin_saisie;
	                        var current_date = new Date();
	                        // si la date de fin de saisie de la periode du devoir est dépassée
	                        // le devoir n'est plus supprimable
	                        if (moment(date_saisie).diff(moment(current_date), "days") < 0) {
	                            $scope.selected.devoirs.list = _.without($scope.selected.devoirs.list, devoir);
	                            devoir.selected = false;
	                            $scope.devoirsUncancelable.push(devoir);
	                            utils.safeApply($scope);
	                        }
	                    });
	                }
	                $scope.opened.evaluation.suppretionMsg1 = true;
	                utils.safeApply($scope);
	            }
	        };
	        $scope.textSuppretionMsg2 = {
	            Text1: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.text1'),
	            Text2: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.text2'),
	            Text3: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.text3'),
	            Text4: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.text4'),
	            Text5: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.text5'),
	            Text6: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.text6'),
	            TexTUncancelable: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.Uncacelable'),
	            TextFin: entcore_1.idiom.translate('evaluations.devoir.recaputilatif.suppression.confirmation')
	        };
	        $scope.firstConfirmationSuppDevoir = function () {
	            if ($scope.selected.devoirs.list.length > 0) {
	                var idDevoir_1 = [];
	                _.map($scope.selected.devoirs.list, function (devoir) {
	                    var current_periode = $scope.periodes.findWhere({ id: devoir.id_periode });
	                    var date_saisie = current_periode.date_fin_saisie;
	                    var current_date = new Date();
	                    // si la date de fin de saisie de la periode du devoir est dépassée
	                    // le devoir n'est plus supprimable
	                    if ($scope.isChefEtab()) {
	                        idDevoir_1.push(devoir.id);
	                    }
	                    else if (moment(date_saisie).diff(moment(current_date), "days") >= 0) {
	                        idDevoir_1.push(devoir.id);
	                    }
	                });
	                //verification si le/les devoirs ne contiennent pas une compétence evaluée
	                $scope.devoirs.areEvaluatedDevoirs(idDevoir_1).then(function (res) {
	                    $scope.selected.devoirs.listwithEvaluatedSkills = [];
	                    $scope.selected.devoirs.listwithEvaluatedMarks = [];
	                    for (var i = 0; i < res.length; i++) {
	                        if (res[i].nbevalskill > 0 && res[i].nbevalskill != null) {
	                            $scope.selected.devoirs.listwithEvaluatedSkills.push({
	                                id: res[i].id,
	                                nbevalskill: res[i].nbevalskill,
	                                name: _.findWhere($scope.devoirs.all, { id: res[i].id }).name
	                            });
	                        }
	                        if (res[i].nbevalnum > 0 && res[i].nbevalnum != null) {
	                            $scope.selected.devoirs.listwithEvaluatedMarks.push({
	                                id: res[i].id,
	                                nbevalnum: res[i].nbevalnum,
	                                name: _.findWhere($scope.devoirs.all, { id: res[i].id }).name
	                            });
	                        }
	                    }
	                    $scope.opened.evaluation.suppretionMsg1 = false;
	                    if ($scope.selected.devoirs.listwithEvaluatedSkills.length > 0
	                        || $scope.selected.devoirs.listwithEvaluatedMarks.length > 0) {
	                        $scope.opened.evaluation.suppretionMsg2 = true;
	                    }
	                    else {
	                        $scope.deleteDevoir();
	                    }
	                    utils.safeApply($scope);
	                });
	            }
	        };
	        /* $scope.$watch(function() { return $scope.opened.evaluation.suppretionMsg1; }, function (newValue, oldValue) {
	         if (newValue===false && oldValue){
	         if ($scope.selected.devoirs.listwithEvaluatedSkills.length > 0 || $scope.selected.devoirs.listwithEvaluatedMarks.length > 0) {
	         $scope.opened.evaluation.suppretionMsg2 = true;
	         }
	         }
	
	         });*/
	        $scope.conditionAffichageText = function (NumText) {
	            if (NumText === 1) {
	                if (($scope.selected.devoirs.listwithEvaluatedSkills.length + $scope.selected.devoirs.listwithEvaluatedMarks.length) > 16 && $scope.selected.devoirs.listwithEvaluatedSkills.length !== 0 && $scope.selected.devoirs.listwithEvaluatedMarks.length !== 0) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else if (NumText === 2) {
	                if ($scope.selected.devoirs.listwithEvaluatedMarks.length > 16 && $scope.selected.devoirs.listwithEvaluatedSkills.length === 0) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else if (NumText === 3) {
	                if ($scope.selected.devoirs.listwithEvaluatedSkills.length > 16 && $scope.selected.devoirs.listwithEvaluatedMarks.length === 0) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else if (NumText === 4) {
	                if ($scope.selected.devoirs.listwithEvaluatedSkills.length < 16 && $scope.selected.devoirs.listwithEvaluatedMarks.length === 0) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else if (NumText === 5) {
	                if ($scope.selected.devoirs.listwithEvaluatedMarks.length < 16 && $scope.selected.devoirs.listwithEvaluatedSkills.length === 0) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else if (NumText === 6) {
	                if (($scope.selected.devoirs.listwithEvaluatedSkills.length + $scope.selected.devoirs.listwithEvaluatedMarks.length) < 16 && $scope.selected.devoirs.listwithEvaluatedSkills.length !== 0 && $scope.selected.devoirs.listwithEvaluatedMarks.length !== 0) {
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else {
	                return false;
	            }
	        };
	        $scope.annulerSuppretion = function () {
	            $scope.opened.evaluation.suppretionMsg2 = false;
	            $scope.opened.evaluation.suppretionMsg1 = false;
	        };
	        $scope.releveNote = undefined;
	        if ($scope.devoirs !== undefined) {
	            eval_teacher_mdl_1.evaluations.devoirs.on('sync', function () {
	                $scope.mapIdLibelleDevoir = _.object(_.map($scope.devoirs.all, function (item) {
	                    return [item.id, item.name];
	                }));
	            });
	        }
	        else {
	            console.log("Devoirs indéfinies, l'établissement ne doit pas être actif.");
	        }
	        if ($scope.classes !== undefined) {
	            eval_teacher_mdl_1.evaluations.classes.on('classes-sync', function () {
	                utils.safeApply($scope);
	            });
	        }
	        else {
	            console.log("Classes indéfinies, l'établissement ne doit pas être actif.");
	        }
	        $scope.goTo = function (path, id) {
	            $location.path(path);
	            if (id != undefined)
	                $location.search(id);
	            $location.replace();
	            utils.safeApply($scope);
	        };
	        // if($scope.periodes !== undefined) {
	        //     evaluations.periodes.on('sync', function () {
	        //         setCurrentPeriode().then((defaultPeriode) => {
	        //             $scope.search.periode = (defaultPeriode !== -1) ? defaultPeriode : '*';
	        //             utils.safeApply($scope);
	        //         });
	        //     });
	        // } else {
	        //     console.log("Periodes indéfinies, l'établissement ne doit pas être actif.");
	        // }
	        $scope.resetSelected = function () {
	            $scope.selected = {
	                devoirs: {
	                    list: [],
	                    listwithEvaluatedSkills: [{}],
	                    listwithEvaluatedMarks: [],
	                    all: false
	                },
	                eleve: null,
	                eleves: {
	                    list: [],
	                    all: false
	                },
	                competences: {
	                    list: [],
	                    all: false
	                },
	                classes: []
	            };
	        };
	        /**
	         * Initialise un nouveau devoir.
	         */
	        $scope.initDevoir = function () {
	            return new eval_teacher_mdl_1.Devoir({
	                name: undefined,
	                date_publication: new Date(),
	                date: new Date(),
	                diviseur: 20,
	                coefficient: 1,
	                id_etablissement: $scope.evaluations.structure.id,
	                ramener_sur: false,
	                id_etat: 1,
	                owner: entcore_1.model.me.userId,
	                matieresByClasse: [],
	                controlledDate: true,
	                is_evaluated: false
	            });
	        };
	        /**
	         * Controle que la date de publication du devoir n'est pas inférieur à la date du devoir.
	         *          et que la date du devoir est comprise dans la période
	         */
	        $scope.controleDate = function () {
	            var current_periode = $scope.periodes.findWhere({ id: $scope.devoir.id_periode });
	            var start_datePeriode = current_periode.timestamp_dt;
	            var end_datePeriode = current_periode.timestamp_fn;
	            var date_saisie = current_periode.date_fin_saisie;
	            if (moment(date_saisie).diff(moment($scope.devoir.dateDevoir), "days") >= 0) {
	                $scope.endSaisie = false;
	                utils.safeApply($scope);
	            }
	            else {
	                $scope.endSaisie = true;
	                utils.safeApply($scope);
	            }
	            $scope.devoir.controlledDate = (moment($scope.devoir.datePublication).diff(moment($scope.devoir.dateDevoir), "days") >= 0)
	                && (moment($scope.devoir.dateDevoir).diff(moment(start_datePeriode), "days") >= 0)
	                && (moment(end_datePeriode).diff(moment($scope.devoir.dateDevoir), "days") >= 0)
	                && (moment(date_saisie).diff(moment($scope.devoir.dateDevoir), "days") >= 0);
	        };
	        $scope.selectDevoir = function (devoir) {
	            var index = _.indexOf($scope.selected.devoirs.list, devoir);
	            if (index === -1) {
	                $scope.selected.devoirs.list.push(devoir);
	            }
	            else {
	                $scope.selected.devoirs.list = _.without($scope.selected.devoirs.list, devoir);
	            }
	        };
	        /**
	         * Controle la validité du formulaire de création d'un devoir
	         * @returns {boolean} Validité du formulaire
	         */
	        $scope.controleNewDevoirForm = function () {
	            return !($scope.devoir.controlledDate
	                && $scope.devoir.id_etablissement !== undefined
	                && $scope.devoir.id_groupe !== undefined
	                && $scope.devoir.id_matiere !== undefined
	                && $scope.devoir.name !== undefined
	                && $scope.devoir.id_periode !== undefined
	                && $scope.devoir.coefficient !== undefined
	                && $scope.devoir.coefficient > 0
	                && $scope.devoir.diviseur !== undefined
	                && $scope.devoir.diviseur > 0
	                && $scope.devoir.id_type !== undefined
	                && $scope.devoir.ramener_sur !== undefined
	                && $scope.devoir.id_etat !== undefined
	                && ($scope.devoir.is_evaluated || $scope.evaluations.competencesDevoir.length > 0));
	        };
	        /**
	         * Retourne la valeur de la clé i18n
	         * @param key Clé i18n
	         * @returns {any} Valeur i18n
	         */
	        $scope.translate = function (key) {
	            return utils.translate(key);
	        };
	        /**
	         * Permet de faire la jointure entre les directive de compétences cSkilllsColorColumn et cSkillsNoteDevoir
	         */
	        $scope.$on('majHeaderColumn', function (event, competence) {
	            $scope.$broadcast('changeHeaderColumn', competence);
	        });
	        /**
	         * Retourne le nom de la structure en fonction de l'id de la structure
	         * @param etabId Identifiant de la structure
	         * @returns {any} Nom de la structure
	         */
	        $scope.getEtablissementName = function (etabId) {
	            return entcore_1.model.me.structureNames[entcore_1.model.me.structures.indexOf(etabId)];
	        };
	        /**
	         * Sélectionne/Déselectionne chaque objet de la liste
	         * @param list liste d'objet
	         * @param bool booleen
	         */
	        $scope.selectElement = function (list, bool) {
	            for (var i = 0; i < list.length; i++) {
	                if (bool !== undefined && list[i].selected === bool)
	                    continue;
	                list[i].selected = !list[i].selected;
	            }
	        };
	        /**
	         * Sélectionne/Déselectionne tous les devoirs de l'utilisateur
	         */
	        $scope.selectAllDevoirs = function () {
	            if ($scope.selected.devoirs.all !== true) {
	                $scope.selectElement($scope.selected.devoirs.list, false);
	                $scope.selected.devoirs.list = [];
	                return;
	            }
	            $scope.selected.devoirs.list = $filter('customSearchFilters')($scope.devoirs.all, $scope.search);
	            $scope.selectElement($scope.selected.devoirs.list, true);
	        };
	        /**
	         * Récupère toutes les sous matière de la matière recherchée
	         */
	        $scope.getSousMatieres = function () {
	            var matiere = eval_teacher_mdl_1.evaluations.matieres.findWhere({ id: $scope.search.matiere.id });
	            if (matiere)
	                $scope.selected.matiere = matiere;
	        };
	        /**
	         *
	         * Initialise tous les enseignements dans l'écran de filtre des compétences
	         * lors de la création d'un devoir.
	         *
	         * @param pbInitSelected booleen indiuant si l'enseignement doit être sélectionnée ou non.
	         */
	        $scope.initFilter = function (pbInitSelected) {
	            $scope.enseignementsFilter = {};
	            $scope.competencesFilter = {};
	            for (var i = 0; i < $scope.enseignements.all.length; i++) {
	                var currEnseignement = $scope.enseignements.all[i];
	                $scope.enseignementsFilter[currEnseignement.id] = {
	                    isSelected: pbInitSelected,
	                    nomHtml: currEnseignement.nom
	                };
	                // on initialise aussi les compétences
	                $scope.initFilterRec(currEnseignement.competences, pbInitSelected);
	            }
	        };
	        /**
	         * Initialise le nom html des compétences (pour gérer le surlignement lors des recherches)
	         *
	         * @param poCompetences la liste des compétences
	         * @param pbInitSelected boolean d'initialisation
	         */
	        $scope.initFilterRec = function (poCompetences, pbInitSelected) {
	            if (poCompetences !== undefined) {
	                var _b = false;
	                var comp = null;
	                for (var i = 0; i < poCompetences.all.length; i++) {
	                    var currCompetence = poCompetences.all[i];
	                    comp = _.findWhere(poCompetences.all, { id: poCompetences.all[i].id }) !== undefined;
	                    if (comp !== undefined)
	                        _b = false;
	                    $scope.competencesFilter[currCompetence.id + "_" + currCompetence.id_enseignement] = {
	                        isSelected: _b,
	                        nomHtml: $scope.buildCompetenceNom(currCompetence),
	                        data: currCompetence
	                    };
	                    $scope.initFilterRec(currCompetence.competences, pbInitSelected);
	                }
	            }
	        };
	        /**
	         * Construis le nom d'une compétence préfixée de la codification du domaine dont elle est rattachée.
	         * Si pas de domaine rattaché, seul le nom est retourné
	         * @param poCompetence la compétence
	         * @returns {le nom construis sous forme d'une chaine de caractères}
	         */
	        $scope.buildCompetenceNom = function (poCompetence) {
	            if (poCompetence.code_domaine !== null && poCompetence.code_domaine !== undefined) {
	                return poCompetence.code_domaine + " - " + poCompetence.nom;
	            }
	            else {
	                return poCompetence.nom;
	            }
	        };
	        /**
	         * Lance la séquence d'ouverture de l'ajout d'une appréciation pour un élève
	         * @param eleve élève
	         */
	        $scope.addAppreciation = function (eleve) {
	            entcore_1.template.open('lightboxContainer', '../templates/evaluations/enseignants/liste_notes_devoir/add_appreciation');
	            $scope.selected.eleve = eleve;
	            $scope.opened.lightbox = true;
	            utils.safeApply($scope);
	        };
	        /**
	         * Methode qui determine si un enseignement doit être affiché ou non
	         * (pour chaque enseignement on rentre dans cette fonction et on check le booleen stocké
	         * dans le tableau  $scope.enseignementsFilter[])
	         *
	         * @param enseignement l'enseignement à tester
	         * @returns {true si l'enseignement est sélectionné, false sinon.}
	         */
	        $scope.enseignementsFilterFunction = function (enseignement) {
	            // si valeur est rensiegnée on la retourne sinon on considère qu'elle est sélectionné (gestion du CTRL-F5)
	            if ($scope.enseignementsFilter !== undefined) {
	                return ($scope.enseignementsFilter[enseignement.id] && $scope.enseignementsFilter[enseignement.id].isSelected);
	            }
	        };
	        /**
	         * Sélectionne/désélectionne tous les enseignements dans l'écran de filtre des compétences
	         * lors de la création d'un devoir.
	         *
	         * @param pbIsSelected booleen pour sélectionner ou désélectionner les enseignements.
	         */
	        $scope.selectEnseignements = function (pbIsSelected) {
	            for (var i = 0; i < $scope.enseignements.all.length; i++) {
	                var currEnseignement = $scope.enseignements.all[i];
	                $scope.enseignementsFilter[currEnseignement.id].isSelected = pbIsSelected;
	            }
	        };
	        /**
	         * Sélectionne/Désélectionne tous les enseignements dans l'écran de filtre des compétences
	         * lors de la création d'un devoir.
	         *
	         */
	        $scope.selectUnselectEnseignements = function () {
	            $scope.selectEnseignements($scope.bSelectAllEnseignements);
	            $scope.bSelectAllEnseignements = !$scope.bSelectAllEnseignements;
	        };
	        /**
	         *
	         * Methode qui determine si un enseignement doit être affiché ou non (selon le mot clef saisi)
	         *
	         * En realité on retourne toujours l'enseignement, il s'agit ici de savoir si on doit le déplier
	         * en cas de match de mot clef ou si on le replie.
	         *
	         * @param psKeyword le mot clef recherché
	         * @returns {function(enseignement): (retourne true systématiquement)}
	         */
	        $scope.enseignementsSearchFunction = function (psKeyword) {
	            return function (enseignement) {
	                if (!$scope.search.haschange) {
	                    return true;
	                }
	                // on check ici si l'enseignement  match le mot clef recherché pour éviter de rechecker
	                // systématiquement dans la méthode récursive
	                enseignement.open = utils.containsIgnoreCase(enseignement.nom, psKeyword);
	                if (enseignement.open) {
	                    var nomHtml = $scope.highlight(enseignement.nom, psKeyword);
	                    // mise à jour que si la réelle valeur de la chaine html est différente ($sce.trustAsHtml renvoie systématiquement une valeur différente)
	                    if ($sce.getTrustedHtml($scope.enseignementsFilter[enseignement.id].nomHtml) !== $sce.getTrustedHtml(nomHtml)) {
	                        $scope.enseignementsFilter[enseignement.id].nomHtml = nomHtml;
	                    }
	                }
	                else {
	                    $scope.enseignementsFilter[enseignement.id].nomHtml = enseignement.nom;
	                }
	                // Appel de la méthode récursive pour chercher dans les enseignements et compétences / sous compétences /
	                // sous sous compétences / ...
	                $scope.enseignementsSearchFunctionRec(enseignement, psKeyword);
	                // dans tous les cas, à la fin, on retourne l'enseignement "racine"
	                return true;
	            };
	        };
	        /**
	         * Methode récursive qui determine si un enseignement / une compétence / une sous compétence / une sous sous compétence ...
	         * match le mot clef recherché et doit être dépliée dans les résultats de recherche
	         *
	         * @param item un enseignement / une compétence / une sous compétence / une sous sous compétence / ...
	         * @psKeyword le mot clef recherché
	         */
	        $scope.enseignementsSearchFunctionRec = function (item, psKeyword) {
	            // Condition d'arret de l'appel récursif : pas de sous compétences (on est sur une feuille de l'arbre)
	            if (item.competences != undefined) {
	                // Parcours de chaque compétences / sous compétences
	                for (var i = 0; i < item.competences.all.length; i++) {
	                    var sousCompetence = item.competences.all[i];
	                    // check si la compétence / sous compétence match le mot clef
	                    // on la déplie / replie en conséquence
	                    sousCompetence.open = utils.containsIgnoreCase(sousCompetence.nom, psKeyword);
	                    if (sousCompetence.open) {
	                        var nomHtml = $scope.highlight(sousCompetence.nom, psKeyword);
	                        var DisplayNomSousCompetence = nomHtml;
	                        if (sousCompetence.code_domaine != null) {
	                            DisplayNomSousCompetence = sousCompetence.code_domaine + " - " + nomHtml;
	                        }
	                        // mise à jour que si la réelle valeur de la chaine html est différente ($sce.trustAsHtml renvoie systématiquement une valeur différente)
	                        if ($sce.getTrustedHtml($scope.competencesFilter[sousCompetence.id + "_" + sousCompetence.id_enseignement].nomHtml) !== $sce.getTrustedHtml(nomHtml)) {
	                            $scope.competencesFilter[sousCompetence.id + "_" + sousCompetence.id_enseignement].nomHtml = DisplayNomSousCompetence;
	                        }
	                    }
	                    else {
	                        $scope.competencesFilter[sousCompetence.id + "_" + sousCompetence.id_enseignement].nomHtml = $scope.buildCompetenceNom(sousCompetence);
	                    }
	                    // si elle match le mot clef on déplie également les parents
	                    if (sousCompetence.open) {
	                        item.open = true;
	                        var parent = item.composer;
	                        while (parent !== undefined) {
	                            parent.open = true;
	                            parent = parent.composer;
	                        }
	                    }
	                    // et on check sur les compétences de l'item en cours de parcours
	                    $scope.enseignementsSearchFunctionRec(sousCompetence, psKeyword);
	                }
	            }
	        };
	        /**
	         * Retourne une chaine avec toutes les occurences du mot clef trouvées surlignées (encadrement via des balises html)
	         *
	         * @param psText le texte où rechercher
	         * @param psKeyword le mot clef à rechercher
	         * @returns le texte avec les occurences trouvées surlignées
	         */
	        $scope.highlight = function (psText, psKeyword) {
	            var psTextLocal = psText;
	            if (!psKeyword) {
	                return $sce.trustAsHtml(psText);
	            }
	            return $sce.trustAsHtml(psTextLocal.replace(new RegExp(psKeyword, 'gi'), '<span class="highlightedText">$&</span>'));
	        };
	        /**
	         * Charge les enseignements et les compétences en fonction de la classe.
	         */
	        $scope.loadEnseignementsByClasse = function () {
	            var classe_Id = $scope.devoir.id_groupe;
	            var newIdCycle = $scope.getClasseData(classe_Id, 'id_cycle');
	            var currentIdCycle = null;
	            for (var i = 0; i < $scope.enseignements.all.length && currentIdCycle == null; i++) {
	                if ($scope.enseignements.all[i].data.competences_1 !== undefined &&
	                    $scope.enseignements.all[i].data.competences_1 !== null) {
	                    for (var j = 0; j < $scope.enseignements.all[i].data.competences_1.length && currentIdCycle == null; j++) {
	                        currentIdCycle = $scope.enseignements.all[i].data.competences_1[j].id_cycle;
	                    }
	                }
	            }
	            if (currentIdCycle !== null && currentIdCycle !== newIdCycle) {
	                eval_teacher_mdl_1.evaluations.enseignements.sync(classe_Id);
	                eval_teacher_mdl_1.evaluations.enseignements.on('sync', function () {
	                    //suppression des compétences qui n'appartiennent pas au cycle
	                    $scope.initFilter(true);
	                    eval_teacher_mdl_1.evaluations.competencesDevoir = [];
	                    utils.safeApply($scope);
	                });
	            }
	        };
	        /**
	         * Séquence de création d'un devoir
	         */
	        //TODO Déplacer cette séquence dans la séquence du router
	        $scope.createDevoir = function () {
	            entcore_1.template.open('main', '../templates/evaluations/enseignants/creation_devoir/display_creation_devoir');
	            if ($location.path() === "/devoir/create") {
	                $scope.devoir = $scope.initDevoir();
	            }
	            //$scope.opened.lightbox = true;
	            $scope.controlledDate = (moment($scope.devoir.date_publication).diff(moment($scope.devoir.date), "days") <= 0);
	            // resynchronisation de la liste pour eviter les problemes de references et de checkbox precedements cochees
	            $scope.search.keyword = "";
	            // si le mot clef de recherche n'a pas changé c'est qu'on rentre dans le filtre lors d'un autre
	            // evenement (depliement/repliement d'un compétence par exemple)
	            // on ne réaplique pas le filtre dans ce cas car on veut déplier l'élément sur lequel on a cliqué
	            $scope.$watch('search.keyword', function (newValue, oldValue) {
	                $scope.search.haschange = (newValue !== oldValue);
	            }, true);
	            _.extend($scope.devoir.enseignements, $scope.enseignements);
	            eval_teacher_mdl_1.evaluations.competencesDevoir = [];
	            $scope.devoir.getLastSelectedCompetence().then(function (res) {
	                $scope.devoir.competencesLastDevoirList = res;
	            });
	            //Séquence non exécutée lors de la modification d'un devoir
	            if ($scope.devoir.id_periode === undefined) {
	                setCurrentPeriode().then(function (defaultPeriode) {
	                    $scope.devoir.id_periode = defaultPeriode.id;
	                    utils.safeApply($scope);
	                });
	            }
	            if ($scope.devoir.id_type === undefined) {
	                $scope.devoir.id_type = getDefaultTypDevoir();
	            }
	            if ($scope.devoir.id_groupe === undefined) {
	                if ($scope.search.classe !== null && $scope.search.classe !== undefined && $scope.search.classe.id !== '*' && $scope.search.matiere !== '*') {
	                    $scope.devoir.id_groupe = $scope.search.classe.id;
	                    $scope.devoir.id_matiere = $scope.search.matiere.id;
	                    $scope.setClasseMatieres();
	                    $scope.selectedMatiere();
	                }
	                else {
	                    // selection de la premiere classe par defaut
	                    $scope.devoir.id_groupe = $scope.classes.all[0].id;
	                    // selection de la premiere matière associée à la classe
	                    $scope.setClasseMatieres();
	                }
	            }
	            // Chargement des enseignements et compétences en fonction de la classe
	            // evaluations.enseignements.sync($scope.devoir.id_groupe);
	            if ($location.path() === "/devoirs/list") {
	                $scope.devoir.id_type = $scope.search.type.id;
	                $scope.devoir.id_sousmatiere = $scope.search.sousmatiere.id;
	            }
	            //template.open('lightboxContainer', '../templates/evaluations/enseignants/creation_devoir/display_creation_devoir');
	            // if($location.path() !== "/devoir/"+$scope.devoir.id+"/edit") {
	            // template.open('main', '../templates/evaluations/enseignants/creation_devoir/display_creation_devoir');
	            // utils.safeApply($scope);
	            // }
	        };
	        // on ecoute sur l'evenement checkConnaissances
	        // ie on doit ajouter/supprimer toutes les sous competences dans le recap
	        $scope.$on('checkConnaissances', function (event, parentItem) {
	            parentItem.competences.each(function (e) {
	                if ($scope.competencesFilter[parentItem.id + "_" + parentItem.id_enseignement].isSelected === true) {
	                    // check si on a pas deja ajoute pour eviter les doublons
	                    var competence = _.findWhere(eval_teacher_mdl_1.evaluations.competencesDevoir, { id: e.id });
	                    // on ajoute que si la compétence n'existe pas (cela peut arriver si on a la même compétence sous un ensignement différent par exemple)
	                    if (competence === undefined) {
	                        //if(!_.contains(evaluations.competencesDevoir, e)) {
	                        eval_teacher_mdl_1.evaluations.competencesDevoir.push(e);
	                    }
	                }
	                else {
	                    eval_teacher_mdl_1.evaluations.competencesDevoir = _.reject(eval_teacher_mdl_1.evaluations.competencesDevoir, function (comp) { return comp.id === e.id; });
	                }
	            });
	        });
	        // on ecoute sur l'evenement checkParent
	        // ie on doit ajouter la sous competence selectionnee dans le recap
	        $scope.$on('checkParent', function (event, parentItem, item) {
	            if ($scope.competencesFilter[item.id + "_" + item.id_enseignement].isSelected === true) {
	                // check si on a pas deja ajoute pour eviter les doublons
	                var competence = _.findWhere(eval_teacher_mdl_1.evaluations.competencesDevoir, { id: item.id });
	                // on ajoute que si la compétence n'existe pas (cela peut arriver si on a la même compétence sous un ensignement différent par exemple)
	                if (competence === undefined) {
	                    //if(!_.contains(evaluations.competencesDevoir, item)) {
	                    eval_teacher_mdl_1.evaluations.competencesDevoir.push(item);
	                }
	            }
	            else {
	                eval_teacher_mdl_1.evaluations.competencesDevoir = _.reject(eval_teacher_mdl_1.evaluations.competencesDevoir, function (comp) { return comp.id === item.id; });
	            }
	        });
	        // create the timer variable
	        var timer;
	        // mouseenter event
	        $scope.showIt = function (item) {
	            timer = $timeout(function () {
	                item.hoveringRecap = true;
	            }, 350);
	        };
	        // mouseleave event
	        $scope.hideIt = function (item) {
	            $timeout.cancel(timer);
	            item.hoveringRecap = false;
	        };
	        $scope.deleteDevoir = function () {
	            if ($scope.selected.devoirs.list.length > 0) {
	                $scope.selected.devoirs.list.forEach(function (d) {
	                    d.remove().then(function (res) {
	                        eval_teacher_mdl_1.evaluations.devoirs.sync();
	                        eval_teacher_mdl_1.evaluations.devoirs.on('sync', function () {
	                            $scope.opened.lightbox = false;
	                            var index = $scope.selected.devoirs.list.indexOf(d);
	                            if (index > -1) {
	                                $scope.selected.devoirs.list = _.without($scope.selected.devoirs.list, d);
	                            }
	                            $scope.goTo('/devoirs/list');
	                            utils.safeApply($scope);
	                        });
	                    })
	                        .catch(function () {
	                        entcore_1.notify.error("evaluation.delete.devoir.error");
	                    });
	                });
	            }
	            $scope.opened.evaluation.suppretionMsg2 = false;
	        };
	        $scope.cancelUpdateDevoir = function () {
	            $scope.firstConfirmSuppSkill = false;
	            $scope.secondConfirmSuppSkill = false;
	            $scope.evaluatedDisabel = false;
	            $scope.opened.lightboxs.updateDevoir.firstConfirmSupp = false;
	            $scope.opened.lightboxs.updateDevoir.secondConfirmSupp = false;
	            $scope.opened.lightboxs.updateDevoir.evaluatedSkillDisabel = false;
	        };
	        $scope.ConfirmeUpdateDevoir = function () {
	            if ($scope.opened.lightboxs.updateDevoir.firstConfirmSupp === true) {
	                $scope.firstConfirmSuppSkill = true;
	                $scope.opened.lightboxs.updateDevoir.secondConfirmSupp = true;
	                $scope.opened.lightboxs.updateDevoir.firstConfirmSupp = false;
	            }
	            else if ($scope.opened.lightboxs.updateDevoir.secondConfirmSupp === true) {
	                $scope.secondConfirmSuppSkill = true;
	                $scope.opened.lightboxs.updateDevoir.secondConfirmSupp = false;
	            }
	            else if ($scope.opened.lightboxs.updateDevoir.evaluatedSkillDisabel) {
	                $scope.evaluatedDisabel = true;
	                $scope.opened.lightboxs.updateDevoir.evaluatedSkillDisabel = false;
	            }
	        };
	        /**
	         *
	         */
	        $scope.beforSaveDevoir = function () {
	            $scope.competencesSupp = [];
	            $scope.evaluatedCompetencesSupp = [];
	            //
	            if ($location.path() === "/devoir/" + $scope.devoir.id + "/edit") {
	                //les compétences à supprimer
	                for (var i = 0; i < $scope.allCompetences.all.length; i++) {
	                    var maCompetence = _.findWhere(eval_teacher_mdl_1.evaluations.competencesDevoir, { id: $scope.allCompetences.all[i].id_competence });
	                    if (maCompetence === undefined) {
	                        $scope.competencesSupp.push($scope.allCompetences.all[i]);
	                    }
	                }
	                $scope.devoir.isEvaluatedDevoir($scope.devoir.id).then(function (res) {
	                    $scope.devoir.evaluationDevoirs;
	                    //si il y a des competences à supprimer
	                    if ($scope.competencesSupp.length > 0) {
	                        //est ce que les competences sont evalué
	                        var competence = void 0;
	                        for (var i = 0; i < $scope.competencesSupp.length; i++) {
	                            competence = _.findWhere($scope.devoir.evaluationDevoirs.all, { id: String($scope.competencesSupp[i].id_competence), typeeval: 'TypeEvalSkill' });
	                            if (competence !== undefined) {
	                                $scope.evaluatedCompetencesSupp.push($scope.competencesSupp[i]);
	                            }
	                        }
	                        if ($scope.evaluatedCompetencesSupp.length > 0)
	                            $scope.opened.lightboxs.updateDevoir.firstConfirmSupp = true;
	                        else {
	                            $scope.firstConfirmSuppSkill = true;
	                            $scope.secondConfirmSuppSkill = true;
	                        }
	                    }
	                    else {
	                        $scope.firstConfirmSuppSkill = true;
	                        $scope.secondConfirmSuppSkill = true;
	                    }
	                });
	            }
	            else {
	                $scope.firstConfirmSuppSkill = true;
	                $scope.secondConfirmSuppSkill = true;
	                $scope.evaluatedDisabel = true;
	            }
	        };
	        $scope.listnerSaveNewDevoir = function () {
	            if ($scope.firstConfirmSuppSkill === true && $scope.secondConfirmSuppSkill === true && $scope.evaluatedDisabel === true) {
	                $scope.saveNewDevoir();
	                $scope.firstConfirmSuppSkill = false;
	                $scope.secondConfirmSuppSkill = false;
	                $scope.evaluatedDisabel = false;
	            }
	        };
	        $scope.$watch(function () { return $scope.firstConfirmSuppSkill; }, function (newValue, oldValue) {
	            if (newValue) {
	                $scope.listnerSaveNewDevoir();
	            }
	        });
	        $scope.$watch(function () { return $scope.secondConfirmSuppSkill; }, function (newValue, oldValue) {
	            if (newValue) {
	                if ($scope.firstConfirmSuppSkill === true && $scope.secondConfirmSuppSkill === true && $scope.evaluatedDisabel === false) {
	                    if ($scope.oldIs_Evaluated === true && $scope.devoir.is_evaluated === false && (_.findWhere($scope.devoir.evaluationDevoirs.all, { typeeval: 'TypeEvalNum' }) !== undefined)) {
	                        $scope.opened.lightboxs.updateDevoir.evaluatedSkillDisabel = true;
	                    }
	                    else
	                        $scope.evaluatedDisabel = true;
	                }
	                $scope.listnerSaveNewDevoir();
	            }
	        });
	        $scope.$watch(function () { return $scope.evaluatedDisabel; }, function (newValue, oldValue) {
	            if (newValue)
	                $scope.listnerSaveNewDevoir();
	        });
	        /**
	         *  Sauvegarde du devoir à la suite du formulaire de création
	         */
	        $scope.saveNewDevoir = function () {
	            $scope.devoir.date = $scope.getDateFormated($scope.devoir.dateDevoir);
	            $scope.devoir.date_publication = $scope.getDateFormated($scope.devoir.datePublication);
	            // Pour la sauvegarde on ne recupere que les id des competences
	            if ($location.path() !== "/devoir/" + $scope.devoir.id + "/edit") {
	                if (eval_teacher_mdl_1.evaluations.competencesDevoir !== undefined) {
	                    $scope.devoir.competences = [];
	                    for (var i = 0; i < eval_teacher_mdl_1.evaluations.competencesDevoir.length; i++) {
	                        $scope.devoir.competences.push(eval_teacher_mdl_1.evaluations.competencesDevoir[i].id);
	                    }
	                }
	            }
	            else {
	                $scope.devoir.coefficient = parseInt($scope.devoir.coefficient);
	                if (eval_teacher_mdl_1.evaluations.competencesDevoir !== undefined) {
	                    $scope.devoir.competencesAdd = [];
	                    $scope.devoir.competencesRem = [];
	                    //recherche des competences a ajouter
	                    for (var i_1 = 0; i_1 < eval_teacher_mdl_1.evaluations.competencesDevoir.length; i_1++) {
	                        var toAdd = true;
	                        for (var j = 0; j < $scope.devoir.competences.all.length; j++) {
	                            if ($scope.devoir.competences.all[j].id_competence
	                                === eval_teacher_mdl_1.evaluations.competencesDevoir[i_1].id) {
	                                toAdd = false;
	                                break;
	                            }
	                        }
	                        if (toAdd) {
	                            $scope.devoir.competencesAdd.push(eval_teacher_mdl_1.evaluations.competencesDevoir[i_1].id);
	                        }
	                    }
	                    //Remplissage des competences a supprimer
	                    for (var j = 0; j < $scope.competencesSupp.length; j++) {
	                        $scope.devoir.competencesRem.push($scope.competencesSupp[j].id_competence);
	                    }
	                }
	                utils.safeApply($scope);
	            }
	            $scope.devoir.save($scope.devoir.competencesAdd, $scope.devoir.competencesRem).then(function (res) {
	                eval_teacher_mdl_1.evaluations.devoirs.sync().then(function () {
	                    if ($location.path() === "/devoir/create") {
	                        if (res !== undefined) {
	                            $location.path("/devoir/" + res.id);
	                        }
	                    }
	                    else if ($location.path() === "/releve") {
	                        if ($scope.releveNote === undefined || !$scope.releveNote) {
	                            $scope.search.classe.id = $scope.devoir.id_groupe;
	                            $scope.search.matiere.id = $scope.devoir.id_matiere;
	                            $scope.search.periode.id = $scope.devoir.id_periode;
	                            $scope.getReleve();
	                        }
	                        else {
	                            $scope.releveNote.devoirs.sync();
	                        }
	                    }
	                    else if ($location.path() === "/devoir/" + $scope.devoir.id + "/edit") {
	                        $location.path("/devoir/" + $scope.devoir.id);
	                    }
	                    $scope.opened.lightbox = false;
	                    utils.safeApply($scope);
	                });
	            });
	        };
	        /**
	         * Récupère les matières enseignées sur la classe donnée
	         * @param idClasse Identifiant de la classe
	         * @returns {Promise<T>} Promesse de retour
	         */
	        var getClassesMatieres = function (idClasse) {
	            return new Promise(function (resolve, reject) {
	                var classe = $scope.classes.findWhere({ id: idClasse });
	                if (classe !== undefined) {
	                    if (resolve && typeof resolve === 'function') {
	                        resolve($scope.matieres.filter(function (matiere) {
	                            return (matiere.libelleClasses.indexOf(classe.externalId) !== -1);
	                        }));
	                    }
	                }
	                else {
	                    reject();
	                }
	            });
	        };
	        /**
	         * Set les matière en fonction de l'identifiant de la classe
	         */
	        $scope.setClasseMatieres = function () {
	            getClassesMatieres($scope.devoir.id_groupe).then(function (matieres) {
	                $scope.devoir.matieresByClasse = matieres;
	                if ($scope.devoir.matieresByClasse.length === 1)
	                    $scope.devoir.id_matiere = $scope.devoir.matieresByClasse[0].id;
	                $scope.selectedMatiere();
	            });
	        };
	        /**
	         * Déclenche un safeApply lors de l'event apply du model
	         */
	        entcore_1.model.on('apply', function () {
	            utils.safeApply($scope);
	        });
	        $scope.openLeftMenu = function openLeftMenu(psMenu, pbAfficherMenu) {
	            pbAfficherMenu = !pbAfficherMenu;
	            if (psMenu === "openedDevoirInfo") {
	                $scope.openedDevoirInfo = pbAfficherMenu;
	            }
	            else if (psMenu === "openedStudentInfo") {
	                $scope.openedStudentInfo = pbAfficherMenu;
	            }
	            else if (psMenu === "opened.criteres") {
	                $scope.opened.criteres = pbAfficherMenu;
	            }
	            else {
	                console.error("Parametre psMenu inconnu : psMenu=" + psMenu);
	            }
	            // Dans le cas du relevé de notes, on replie les 2 autres menus dans
	            // un problème d'espace vertical
	            if ($location.$$path === '/releve') {
	                if (pbAfficherMenu) {
	                    if (psMenu === "openedDevoirInfo") {
	                        $scope.openedStudentInfo = false;
	                        $scope.opened.criteres = false;
	                    }
	                    if (psMenu === "openedStudentInfo") {
	                        $scope.openedDevoirInfo = false;
	                        $scope.opened.criteres = false;
	                    }
	                    if (psMenu === "opened.criteres") {
	                        $scope.openedDevoirInfo = false;
	                        $scope.openedStudentInfo = false;
	                    }
	                }
	            }
	        };
	        /**
	         *Afficher une lightbox 'page en cours de construction'
	         */
	        $scope.displayInConstruction = function () {
	            $scope.modificationDevoir = true;
	            utils.safeApply($scope);
	        };
	        /**
	         *Fermer une lightbox 'page en cours de construction'
	         */
	        $scope.closeInConstruction = function () {
	            $scope.modificationDevoir = false;
	            utils.safeApply($scope);
	        };
	        /**
	         * Séquence de récupération d'un relevé de note
	         */
	        $scope.getReleve = function () {
	            if ($scope.selected.devoirs.list !== undefined) {
	                for (var i = 0; i < $scope.selected.devoirs.list.length; i++) {
	                    $scope.selected.devoirs.list[i].selected = false;
	                }
	                $scope.selected.devoirs.list = [];
	            }
	            var currentPeriode = $scope.search.periode;
	            if ($scope.search.classe !== null && $scope.search.classe !== undefined && $scope.search.classe.id !== undefined
	                && $scope.search.matiere !== null && $scope.search.matiere !== undefined && $scope.search.matiere.id !== undefined
	                && $scope.search.periode !== undefined
	                && $scope.search.classe !== undefined && $scope.search.classe.id !== '*'
	                && $scope.search.matiere !== '*' && $scope.search.periode !== '*') {
	                var p = {
	                    idEtablissement: $scope.evaluations.structure.id,
	                    idClasse: $scope.search.classe.id,
	                    idPeriode: undefined,
	                    idMatiere: $scope.search.matiere.id
	                };
	                if (currentPeriode !== null) {
	                    p.idPeriode = currentPeriode.id;
	                }
	                // var rn = evaluations.releveNotes.findWhere(p);
	                // if (rn === undefined) {
	                if (eval_teacher_mdl_1.evaluations.synchronized.classes !== 0) {
	                    eval_teacher_mdl_1.evaluations.classes.on('classes-sync', function () {
	                        var releve = new eval_teacher_mdl_1.ReleveNote(p);
	                        eval_teacher_mdl_1.evaluations.releveNotes.push(releve);
	                        $scope.releveNote = releve;
	                        $scope.releveNote.sync().then(function () {
	                            $scope.releveNote.synchronized.releve = true;
	                            $scope.releveNote.calculStatsDevoirs().then(function () {
	                                $scope.releveNote.calculMoyennesEleves().then(function () {
	                                    utils.safeApply($scope);
	                                });
	                                utils.safeApply($scope);
	                            });
	                            utils.safeApply($scope);
	                        });
	                    });
	                    return;
	                }
	                var releve = new eval_teacher_mdl_1.ReleveNote(p);
	                eval_teacher_mdl_1.evaluations.releveNotes.push(releve);
	                $scope.releveNote = releve;
	                $scope.releveNote.sync().then(function () {
	                    $scope.releveNote.synchronized.releve = true;
	                    $scope.releveNote.calculStatsDevoirs().then(function () {
	                        $scope.releveNote.calculMoyennesEleves().then(function () {
	                            utils.safeApply($scope);
	                        });
	                        utils.safeApply($scope);
	                    });
	                    utils.safeApply($scope);
	                });
	                // } else {
	                //     $scope.releveNote = rn;
	                //     utils.safeApply($scope);
	                // }
	                $scope.openedStudentInfo = false;
	                utils.safeApply($scope);
	            }
	        };
	        /**
	         * Position l'objet matière sur le devoir en cours de création
	         */
	        $scope.selectedMatiere = function () {
	            var matiere = eval_teacher_mdl_1.evaluations.matieres.findWhere({ id: $scope.devoir.id_matiere });
	            if (matiere !== undefined)
	                $scope.devoir.matiere = matiere;
	        };
	        /**
	         * Controle le fonctionnement des filtres dates sur la vue liste des devoirs
	         */
	        $scope.controleDatePicker = function () {
	            if (moment($scope.search.dateCreation.debut).diff(moment($scope.search.dateCreation.fin)) > 0) {
	                $scope.search.dateCreation.fin = moment();
	            }
	            if (moment($scope.search.datePublication.debut).diff(moment($scope.search.datePublication.fin)) > 0) {
	                $scope.search.datePublication.fin = moment();
	            }
	            utils.safeApply($scope);
	        };
	        /**
	         * Retourne l'identifiant du type de devoirs par défaut
	         * @returns {number} identifiant du type de devoir par défaut
	         */
	        var getDefaultTypDevoir = function () {
	            var typeDefault = ($scope.types.findWhere({ default_type: true }));
	            if (typeDefault === undefined) {
	                typeDefault = ($scope.evaluations.types.findWhere({ default_type: true }));
	            }
	            return typeDefault.id;
	        };
	        /**
	         * Format la date passée en paramètre
	         * @param date Date à formatter
	         * @returns {any|string} date formattée
	         */
	        $scope.getDateFormated = function (date) {
	            return utils.getFormatedDate(date, "DD/MM/YYYY");
	        };
	        /**
	         * Retourne la données de la classe passé en paramètre
	         * @param idClasse identifiant de la classe
	         * @param key clé à renvoyer
	         * @returns {any} la valeur de la clé passée en paramètre
	         */
	        $scope.getClasseData = function (idClasse, key) {
	            if ($scope.classes === undefined || idClasse == null || idClasse === ''
	                || ($scope.classes === undefined || $scope.evaluations.classes === undefined)
	                || ($scope.classes.all.length === 0 && $scope.evaluations.classes.all.length === 0)) {
	                return '';
	            }
	            var classe = $scope.classes.findWhere({ id: idClasse });
	            if (classe === undefined) {
	                classe = $scope.evaluations.classes.findWhere({ id: idClasse });
	            }
	            if (classe !== undefined && classe.hasOwnProperty(key)) {
	                return classe[key];
	            }
	            else {
	                return '';
	            }
	        };
	        /**
	         * Retourne le libelle de la période correspondant à l'identifiant passé en paramètre
	         * @param idPeriode identifiant de la période
	         * @returns {any} libelle de la période
	         */
	        $scope.getLibellePeriode = function (idPeriode) {
	            if (idPeriode == null || idPeriode === "")
	                return "";
	            return _.findWhere($scope.periodes.all, { id: parseInt(idPeriode) }).libelle;
	        };
	        /**
	         * Retourne le libelle du type de devoir correspondant à l'identifiant passé en paramètre
	         * @param idType identifiant du type de devoir
	         * @returns {any} libelle du type de devoir
	         */
	        $scope.getLibelleType = function (idType) {
	            if (idType == null || idType === "")
	                return "";
	            var type = _.findWhere($scope.types.all, { id: parseInt(idType) });
	            if (type !== undefined && type.hasOwnProperty('nom'))
	                return type.nom;
	            else
	                return '';
	        };
	        /**
	         * Retourne le libelle de la matière correspondant à l'identifiant passé en paramètre
	         * @param idMatiere identifiant de la matière
	         * @returns {any} libelle de la matière
	         */
	        $scope.getLibelleMatiere = function (idMatiere) {
	            if (idMatiere == null || idMatiere === "")
	                return "";
	            return _.findWhere($scope.matieres.all, { id: idMatiere }).name;
	        };
	        /**
	         * Retourne le libelle de la sous matière correspondant à l'identifiant passé en paramètre
	         * @param idSousMatiere identifiant de la sous matière
	         * @returns {any} libelle de la sous matière
	         */
	        $scope.getLibelleSousMatiere = function (idSousMatiere) {
	            if (idSousMatiere == null || idSousMatiere === "" || idSousMatiere == undefined)
	                return "";
	            $scope.selectedMatiere();
	            return _.findWhere($scope.devoir.matiere.sousMatieres.all, { id: parseInt(idSousMatiere) }).libelle;
	        };
	        /*  $scope.getLibelleDevoir = function (id) {
	         var devoir = $scope.devoirs.findWhere({id : id});
	         if (devoir !== undefined) return devoir.name;
	         };
	         */
	        $scope.getLibelleDevoir = function (id) {
	            if ($scope.mapIdLibelleDevoir !== undefined)
	                return $scope.mapIdLibelleDevoir[parseInt(id)];
	        };
	        /**
	         * Séquence d'enregistrement d'une évaluation
	         * @param evaluation évaluation à enregistrer
	         * @param $event evenement déclenchant
	         * @param eleve élève propriétaire de l'évaluation
	         */
	        $scope.saveNoteDevoirEleve = function (evaluation, $event, eleve) {
	            var reg = /^[0-9]+(\.[0-9]{1,2})?$/;
	            if (evaluation.data.id_appreciation !== undefined && evaluation.id_appreciation === undefined) {
	                evaluation.id_appreciation = evaluation.data.id_appreciation;
	            }
	            if (evaluation.oldAppreciation !== undefined
	                && evaluation.oldAppreciation !== evaluation.appreciation
	                && evaluation.appreciation !== undefined && evaluation.appreciation !== '') {
	                evaluation.saveAppreciation().then(function (res) {
	                    evaluation.oldAppreciation = evaluation.appreciation;
	                    if (res.id !== undefined) {
	                        evaluation.id_appreciation = res.id;
	                        evaluation.data.id_appreciation = res.id;
	                    }
	                    utils.safeApply($scope);
	                });
	            }
	            else {
	                if (evaluation.id_appreciation !== undefined && evaluation.appreciation === "") {
	                    evaluation.deleteAppreciation().then(function (res) {
	                        if (res.rows === 1) {
	                            evaluation.id_appreciation = undefined;
	                            evaluation.data.id_appreciation = undefined;
	                        }
	                        utils.safeApply($scope);
	                    });
	                }
	                else {
	                    if (evaluation.data.id !== undefined && evaluation.id === undefined) {
	                        evaluation.id = evaluation.data.id;
	                    }
	                    if ((evaluation.oldValeur !== undefined && evaluation.oldValeur !== evaluation.valeur)
	                        || evaluation.oldAppreciation !== undefined && evaluation.oldAppreciation !== evaluation.appreciation) {
	                        if (evaluation.valeur !== "" && evaluation.valeur && reg.test(evaluation.valeur) && evaluation.valeur !== null) {
	                            var devoir = eval_teacher_mdl_1.evaluations.devoirs.findWhere({ id: evaluation.id_devoir });
	                            if (devoir !== undefined) {
	                                if (parseFloat(evaluation.valeur) <= devoir.diviseur && parseFloat(evaluation.valeur) >= 0) {
	                                    evaluation.save().then(function (res) {
	                                        evaluation.valid = true;
	                                        evaluation.oldValeur = evaluation.valeur;
	                                        if (res.id !== undefined) {
	                                            evaluation.id = res.id;
	                                            evaluation.data.id = res.id;
	                                        }
	                                        if ($location.$$path === '/releve') {
	                                            $scope.calculerMoyenneEleve(eleve);
	                                            $scope.calculStatsDevoirReleve(evaluation.id_devoir);
	                                        }
	                                        else {
	                                            $scope.calculStatsDevoir();
	                                        }
	                                        $scope.opened.lightbox = false;
	                                        delete $scope.selected.eleve;
	                                        utils.safeApply($scope);
	                                    });
	                                }
	                                else {
	                                    entcore_1.notify.error(entcore_1.idiom.translate("error.note.outbound") + devoir.diviseur);
	                                    evaluation.valeur = evaluation.oldValeur;
	                                    evaluation.valid = false;
	                                    utils.safeApply($scope);
	                                    $event.target.focus();
	                                    return;
	                                }
	                            }
	                        }
	                        else {
	                            if (evaluation.id !== undefined && evaluation.valeur === "") {
	                                evaluation.delete().then(function (res) {
	                                    if ($location.$$path === '/releve') {
	                                        $scope.calculerMoyenneEleve(eleve);
	                                        $scope.calculStatsDevoirReleve(evaluation.id_devoir);
	                                        if (res.rows === 1) {
	                                            evaluation.id = undefined;
	                                            evaluation.data.id = undefined;
	                                        }
	                                    }
	                                    else {
	                                        if (res.rows === 1) {
	                                            evaluation.id = undefined;
	                                            evaluation.data.id = undefined;
	                                        }
	                                        $scope.calculStatsDevoir();
	                                    }
	                                    utils.safeApply($scope);
	                                });
	                            }
	                            else {
	                                if (evaluation.valeur !== "") {
	                                    entcore_1.notify.error(entcore_1.idiom.translate("error.note.invalid"));
	                                    evaluation.valid = false;
	                                    $event.target.focus();
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	            $scope.opened.lightbox = false;
	        };
	        /**
	         * Ouvre le détail du devoir correspondant à l'index passé en paramètre
	         * @param index index du devoir
	         * @param bool état du détail
	         */
	        $scope.expand = function (index, bool) {
	            if ($scope.openedDevoir !== index) {
	                $scope.openedDevoir = index;
	            }
	            else {
	                if (bool === true) {
	                    $scope.openedDevoir = -1;
	                }
	            }
	        };
	        /**
	         * Ouvre le détail de l'élève correspondant à l'index passé en paramètre et affiche l'appréciation
	         * @param index index du devoir
	         * @param bool état du détail
	         */
	        $scope.expandAppreciation = function (index, bool) {
	            if ($scope.openedEleve !== index) {
	                $scope.openedEleve = index;
	            }
	            else {
	                if (bool === true) {
	                    $scope.openedEleve = -1;
	                }
	            }
	        };
	        /**
	         * Calcul la moyenne pour un élève
	         * @param eleve élève
	         */
	        $scope.calculerMoyenneEleve = function (eleve) {
	            eleve.getMoyenne().then(function () {
	                utils.safeApply($scope);
	            });
	        };
	        /**
	         * Ouvre la fenêtre détail des compétences sur un devoir
	         */
	        $scope.getInfoCompetencesDevoir = function () {
	            $scope.opened.lightbox = true;
	            entcore_1.template.open('lightboxContainer', '../templates/evaluations/enseignants/informations/display_competences');
	        };
	        /**
	         * Calcul les statistiques du devoir courant
	         */
	        $scope.calculStatsDevoir = function () {
	            var evals = [];
	            for (var i = 0; i < $scope.currentDevoir.eleves.all.length; i++) {
	                if ($scope.currentDevoir.eleves.all[i].evaluation !== undefined &&
	                    $scope.currentDevoir.eleves.all[i].evaluation.valeur !== '' &&
	                    $scope.currentDevoir.eleves.all[i].evaluation.valeur !== undefined &&
	                    $scope.currentDevoir.eleves.all[i].evaluation.valeur !== null) {
	                    evals.push($scope.currentDevoir.eleves.all[i].evaluation);
	                    $scope.currentDevoir.eleves.all[i].evaluation.ramener_sur = $scope.currentDevoir.ramener_sur;
	                }
	            }
	            $scope.currentDevoir.calculStats(evals).then(function () {
	                $scope.evaluations.devoirs.getPercentDone($scope.currentDevoir.id).then(function () {
	                    utils.safeApply($scope);
	                });
	            });
	        };
	        /**
	         * Calcul les statistiques du devoir dont l'identifiant est passé en paramètre
	         * @param devoirId identifiant du devoir
	         */
	        $scope.calculStatsDevoirReleve = function (devoirId) {
	            var devoir = $scope.releveNote.devoirs.findWhere({ id: devoirId });
	            if (devoir !== undefined) {
	                var evals = [];
	                for (var i = 0; i < $scope.releveNote.classe.eleves.all.length; i++) {
	                    for (var j = 0; j < $scope.releveNote.classe.eleves.all[i].evaluations.all.length; j++) {
	                        if ($scope.releveNote.classe.eleves.all[i].evaluations.all[j].valeur !== ""
	                            && $scope.releveNote.classe.eleves.all[i].evaluations.all[j].id_devoir === devoirId) {
	                            $scope.releveNote.classe.eleves.all[i].evaluations.all[j].is_evaluated = devoir.is_evaluated;
	                            evals.push($scope.releveNote.classe.eleves.all[i].evaluations.all[j]);
	                        }
	                    }
	                }
	                devoir.eleves = $scope.releveNote.classe.eleves;
	                devoir.calculStats(evals).then(function () {
	                    utils.safeApply($scope);
	                });
	            }
	        };
	        /**
	         * Lance le focus sur la cible de l'évènement
	         * @param $event évènement
	         */
	        $scope.focusMe = function ($event) {
	            $event.target.select();
	        };
	        /**
	         * Affiche les informations d'un devoir en fonction de l'objet passé en paramètre
	         * @param obj objet de type Evaluation ou de type Devoir
	         */
	        $scope.getDevoirInfo = function (obj) {
	            if (entcore_1.template.isEmpty('leftSide-devoirInfo'))
	                entcore_1.template.open('leftSide-devoirInfo', '../templates/evaluations/enseignants/informations/display_devoir');
	            if (obj instanceof eval_teacher_mdl_1.Devoir)
	                $scope.informations.devoir = obj;
	            else if (obj instanceof eval_teacher_mdl_1.Evaluation) {
	                var devoir = $scope.releveNote.devoirs.findWhere({ id: obj.id_devoir });
	                if (devoir !== undefined)
	                    $scope.informations.devoir = devoir;
	            }
	            if ($location.$$path === '/releve') {
	                $scope.openLeftMenu("openedDevoirInfo", false);
	            }
	        };
	        /**
	         * Retourne les informations relatives à un élève
	         * @param eleve élève
	         */
	        $scope.getEleveInfo = function (eleve) {
	            if (entcore_1.template.isEmpty('leftSide-userInfo'))
	                entcore_1.template.open('leftSide-userInfo', '../templates/evaluations/enseignants/informations/display_eleve');
	            $scope.informations.eleve = eleve;
	        };
	        /**
	         * Retourne la période courante
	         * @returns {Promise<T>} Promesse retournant l'identifiant de la période courante
	         */
	        var setCurrentPeriode = function () {
	            return new Promise(function (resolve, reject) {
	                var formatStr = "DD/MM/YYYY";
	                var momentCurrDate = moment(moment().format(formatStr), formatStr);
	                $scope.currentPeriodeId = -1;
	                for (var i = 0; i < eval_teacher_mdl_1.evaluations.periodes.all.length; i++) {
	                    var momentCurrPeriodeDebut = moment(moment(eval_teacher_mdl_1.evaluations.periodes.all[i].timestamp_dt).format(formatStr), formatStr);
	                    var momentCurrPeriodeFin = moment(moment(eval_teacher_mdl_1.evaluations.periodes.all[i].timestamp_fn).format(formatStr), formatStr);
	                    if (momentCurrPeriodeDebut.diff(momentCurrDate) <= 0 && momentCurrDate.diff(momentCurrPeriodeFin) <= 0) {
	                        $scope.currentPeriodeId = eval_teacher_mdl_1.evaluations.periodes.all[i].id;
	                        if (resolve && typeof (resolve) === 'function') {
	                            resolve(eval_teacher_mdl_1.evaluations.periodes.all[i]);
	                        }
	                    }
	                }
	                if (resolve && typeof (resolve) === 'function') {
	                    resolve($scope.currentPeriodeId);
	                }
	            });
	        };
	        /**
	         * Highlight la compétence survolée
	         * @param id identifiant de la compétence
	         */
	        $scope.highlightCompetence = function (id, bool) {
	            $scope.currentDevoir.competences.forEach(function (competence) {
	                if (competence && competence !== undefined && competence.id_competence === id) {
	                    competence.hovered = bool;
	                }
	                else if (competence && competence !== undefined && competence.id_competence !== id) {
	                    competence.hovered = false;
	                }
	            });
	            return;
	        };
	        $scope.isValidClasse = function (idClasse) {
	            if ($scope.classes !== undefined) {
	                return $scope.classes.findWhere({ id: idClasse, remplacement: false }) !== undefined;
	            }
	        };
	        $scope.filterValidClasse = function () {
	            return function (item) {
	                return $scope.isValidClasse(item.id_groupe || item.id);
	            };
	        };
	        /**
	         * Sélectionne un élève et l'ajoute dans la liste d'élèves sélectionnés.
	         * @param eleve élève
	         */
	        $scope.selectEleveListe = function (eleve) {
	            $scope.selectObject($scope.selected.eleves.list, eleve);
	            $scope.selected.eleves.all = $scope.currentDevoir.eleves.every(function (eleve) { return eleve.selected; });
	        };
	        /**
	         * Sélectionne tous les élèves de la liste passée en paramètre
	         */
	        $scope.selectAllEleveListe = function () {
	            if ($scope.selected.eleves.all !== true) {
	                for (var i = 0; i < $scope.currentDevoir.eleves.all.length; i++) {
	                    $scope.selected.eleves.list.push($scope.currentDevoir.eleves.all[i]);
	                }
	                $scope.selected.eleves.all = !$scope.selected.eleves.all;
	                $scope.selectElement($scope.currentDevoir.eleves.all, $scope.selected.eleves.all);
	                return;
	            }
	            $scope.selected.eleves.list = [];
	            $scope.selected.eleves.all = !$scope.selected.eleves.all;
	            $scope.selectElement($scope.currentDevoir.eleves.all, $scope.selected.eleves.all);
	        };
	        /**
	         * Ajout ou supprimer l'objet dans la liste
	         * @param list liste d'objet
	         * @param object objet
	         */
	        $scope.selectObject = function (list, object) {
	            if (list.indexOf(object) === -1) {
	                list.push(object);
	            }
	            else {
	                list.splice(list.indexOf(object), 1);
	            }
	        };
	        /**
	         * Afficher le suivi d'un élève depuis le suivi de classe
	         * @param eleve
	         */
	        $scope.displaySuiviEleve = function (eleve) {
	            $scope.informations.eleve = eleve;
	            $scope.search.eleve = eleve;
	            $scope.selected.eleve = eleve;
	            $scope.displayFromClass = true;
	            $scope.displayFromEleve = true;
	            utils.safeApply($scope);
	            $scope.goTo("/competences/eleve");
	        };
	        $scope.pOFilterEval = {
	            limitTo: 22
	        };
	        /**
	         *  Initialiser le filtre de recherche pour faire disparaitre la liste
	         *  des élèves
	         *
	         */
	        $scope.cleanRoot = function () {
	            var elem = angular.element(".autocomplete");
	            for (var i = 0; i < elem.length; i++) {
	                elem[i].style.height = "0px";
	            }
	        };
	        /**
	         * Affiche la liste des remplacements en cours et initialise le
	         * formulaire de creation d'un remplacement
	         */
	        $scope.listRemplacements = function () {
	            $scope.gestionRemplacement = new eval_teacher_mdl_1.GestionRemplacement();
	            // TODO gérer les établissements ?
	            $scope.gestionRemplacement.remplacements.sync();
	            $scope.gestionRemplacement.enseignants.sync();
	            $scope.gestionRemplacement.sortType = 'date_debut'; // set the default sort type
	            $scope.gestionRemplacement.sortReverse = false; // set the default sort order
	            entcore_1.template.open('main', '../templates/evaluations/personnels/remplacements/eval_remp_chef_etab');
	        };
	        /**
	         * Sélectionne/Déselectionne tous les remplacemnts
	         */
	        $scope.selectAllRemplacements = function () {
	            if ($scope.gestionRemplacement.selectAll === false) {
	                // maj de la vue
	                $scope.selectElement($scope.gestionRemplacement.remplacements.all, false);
	                // vidage de la sélection
	                $scope.gestionRemplacement.selectedRemplacements = [];
	            }
	            else {
	                // maj de la vue
	                $scope.selectElement($scope.gestionRemplacement.remplacements.all, true);
	                // ajout à la liste de sélection
	                $scope.gestionRemplacement.selectedRemplacements = _.where($scope.gestionRemplacement.remplacements.all, { selected: true });
	            }
	        };
	        /**
	         * Supprime les remplacments sélectionnés
	         */
	        $scope.deleteSelectedRemplacement = function () {
	            var iNbSupp = $scope.gestionRemplacement.selectedRemplacements.length;
	            var iCpteur = 0;
	            for (var i = 0; i < iNbSupp; ++i) {
	                var oRemplacement = $scope.gestionRemplacement.selectedRemplacements[i];
	                // suppression des remplacments en BDD
	                oRemplacement.remove().then(function (poRemplacementSupp) {
	                    $scope.gestionRemplacement.remplacements.remove(poRemplacementSupp);
	                    $scope.gestionRemplacement.selectedRemplacements;
	                    iCpteur++;
	                    // si toutes les suppressions ont été faites on refresh la vue
	                    if (iNbSupp === iCpteur) {
	                        // fermeture popup
	                        $scope.gestionRemplacement.confirmation = false;
	                        // désélection de tous les remplacements
	                        $scope.gestionRemplacement.selectAll = false;
	                        // vidage de la liste des remplacements sélectionnés
	                        $scope.gestionRemplacement.selectedRemplacements = [];
	                        utils.safeApply($scope);
	                    }
	                });
	            }
	        };
	        /**
	         * Sélectionne/Déselectionne un remplacment
	         * @param poRemplacement le remplacement
	         */
	        $scope.selectRemplacement = function (poRemplacement) {
	            var index = _.indexOf($scope.gestionRemplacement.selectedRemplacements, poRemplacement);
	            // ajout dans la liste des remplacements sélectionnés s'il n'y est pas présent
	            if (index === -1) {
	                $scope.gestionRemplacement.selectedRemplacements.push(poRemplacement);
	                poRemplacement.selected = true;
	            }
	            else {
	                // retrait sinon
	                $scope.gestionRemplacement.selectedRemplacements = _.without($scope.gestionRemplacement.selectedRemplacements, poRemplacement);
	                poRemplacement.selected = false;
	            }
	            // coche de la checkbox de sélection de tous les remplacements s'ils on tous été sélectionnés (un à un)
	            $scope.gestionRemplacement.selectAll = $scope.gestionRemplacement.selectedRemplacements.length > 0 &&
	                ($scope.gestionRemplacement.selectedRemplacements.length === $scope.gestionRemplacement.remplacements.all.length);
	        };
	        /**
	         * Vérification de la cohérence de l'ajout du remplacement (verif remplacement déjà existant par exemple)
	         *
	         * @return true si aucune erreur, false sinon
	         */
	        $scope.controlerNewRemplacement = function () {
	            // var oRemplacements = [];
	            // _.each($scope.gestionRemplacement.remplacements.all, function (remp) {
	            //     if (oRemplacement.titulaire.id == $scope.gestionRemplacement.remplacement.titulaire.id) {
	            //         oRemplacements.push(remp);
	            //     }
	            // });
	            $scope.gestionRemplacement.showError = false;
	            for (var i = 0; i < $scope.gestionRemplacement.remplacements.all.length; i++) {
	                var oRemplacement = $scope.gestionRemplacement.remplacements.all[i];
	                if (oRemplacement.titulaire.id == $scope.gestionRemplacement.remplacement.titulaire.id) {
	                    // la date de fin du nouveau  remplacement doit etre avant la date de debut d'un remplacement existant
	                    var isRemplacementApresExistant = moment($scope.gestionRemplacement.remplacement.date_fin).diff(moment(oRemplacement.date_debut), "days") < 0;
	                    // la date de fin d'un remplacement existant doit être avant la date de début d'un nouveau remplacement
	                    var isFinApresFinRemplacementExistant = moment(oRemplacement.date_fin).diff(moment($scope.gestionRemplacement.remplacement.date_debut), "days") < 0;
	                    // si l'une des 2 conditions n'est pas remplie le remplacement chevauche un remplacent existant
	                    if (!(isRemplacementApresExistant || isFinApresFinRemplacementExistant)) {
	                        $scope.gestionRemplacement.showError = true;
	                        return false;
	                    }
	                }
	            }
	            return true;
	        };
	        /**
	         * Enregistre un remplacemnt en base de données
	         */
	        $scope.saveNewRemplacement = function () {
	            // Vérification de la cohérence de l'ajout du remplacement (verif remplacement déjà existant par exemple)
	            var hasError = !$scope.controlerNewRemplacement();
	            if (hasError) {
	                return;
	            }
	            // TODO Recupere le bon établissement
	            $scope.gestionRemplacement.remplacement.id_etablissement = $scope.evaluations.structure.id;
	            // Conversion des dates en string
	            /*$scope.gestionRemplacement.remplacement.date_debut = $scope.getDateFormated($scope.gestionRemplacement.remplacement.date_debut);
	             $scope.gestionRemplacement.remplacement.date_fin = $scope.getDateFormated($scope.gestionRemplacement.remplacement.date_fin);*/
	            // enregistrement du remplacement et refressh de la liste
	            $scope.gestionRemplacement.remplacement.create().then(function () {
	                // Mise à jour de la liste des remplacements
	                $scope.gestionRemplacement.remplacements.sync().then(function () {
	                    // Réinitialisation du formulaire d'ajout de remplacement
	                    $scope.gestionRemplacement.remplacement.date_debut = new Date();
	                    var today = new Date();
	                    today.setFullYear(today.getFullYear() + 1);
	                    $scope.gestionRemplacement.remplacement.date_fin = today;
	                    $scope.gestionRemplacement.remplacement.titulaire = undefined;
	                    $scope.gestionRemplacement.remplacement.remplacant = undefined;
	                    $scope.gestionRemplacement.selectAll = false;
	                    $scope.gestionRemplacement.selectedRemplacements = [];
	                    utils.safeApply($scope);
	                });
	            });
	        };
	        $scope.disabledDevoir = [];
	        $rootScope.$on("$locationChangeSuccess", function ($event, $nextRoute, $oldRoute) {
	            if ($oldRoute === $nextRoute && ($route.current.originalPath === '/devoir/:idDevoir/edit' || $route.current.originalPath === '/devoir/:idDevoir/edit/')) {
	                $scope.$watch(function () { return $scope.displayCreationDevoir; }, function (newValue, oldValue) {
	                    if (newValue) {
	                        $scope.goTo('');
	                        console.log('redirect');
	                        utils.safeApply($scope);
	                    }
	                });
	            }
	            utils.safeApply($scope);
	        });
	        /**
	         * Cherche si la période de fin de saisie est dépassée pour un devoir donné
	         * @param devoir
	         */
	        $scope.checkEndSaisie = function (devoir) {
	            var current_periode = $scope.periodes.findWhere({ id: devoir.id_periode });
	            var date_saisie = current_periode.date_fin_saisie;
	            var current_date = new Date();
	            if (moment(date_saisie).diff(moment(current_date), "days") >= 0 || $scope.isChefEtab()) {
	                return false;
	            }
	            else
	                return true;
	        };
	        /**
	         * Return la periode scolaire courante
	         * @returns {any}
	         */
	        $scope.periodeParDefault = function () {
	            return utils.getDefaultPeriode($scope.periodes.all);
	        };
	        /**
	         * Controle la validité du formulaire de création d'un remplacement
	         * @returns {boolean} Validité du formulaire
	         */
	        $scope.controleNewRemplacementForm = function () {
	            return !($scope.gestionRemplacement.remplacement !== undefined
	                && $scope.gestionRemplacement.remplacement.titulaire !== undefined
	                && $scope.gestionRemplacement.remplacement.remplacant !== undefined
	                && $scope.gestionRemplacement.remplacement.titulaire.id !== $scope.gestionRemplacement.remplacement.remplacant.id
	                && $scope.gestionRemplacement.remplacement.date_debut !== undefined
	                && $scope.gestionRemplacement.remplacement.date_fin !== undefined
	                && (moment($scope.gestionRemplacement.remplacement.date_fin).diff(moment($scope.gestionRemplacement.remplacement.date_debut), "days") >= 0));
	        };
	        $scope.initReferences = function () {
	            $scope.devoirs = eval_teacher_mdl_1.evaluations.structure.devoirs;
	            $scope.enseignements = eval_teacher_mdl_1.evaluations.structure.enseignements;
	            $scope.matieres = eval_teacher_mdl_1.evaluations.structure.matieres;
	            $scope.releveNotes = eval_teacher_mdl_1.evaluations.structure.releveNotes;
	            $scope.periodes = eval_teacher_mdl_1.evaluations.structure.periodes;
	            $scope.classes = eval_teacher_mdl_1.evaluations.structure.classes;
	            $scope.types = eval_teacher_mdl_1.evaluations.structure.types;
	            $scope.eleves = eval_teacher_mdl_1.evaluations.structure.eleves;
	            $scope.initPeriodesList();
	            utils.safeApply($scope);
	        };
	        eval_teacher_mdl_1.evaluations.sync()
	            .then(function () {
	            $scope.structure = eval_teacher_mdl_1.evaluations.structure;
	            eval_teacher_mdl_1.evaluations.structure.sync().then(function () {
	                $scope.initReferences();
	            });
	            if ($location.path() === '/disabled') {
	                $location.path('/');
	                $location.replace();
	            }
	            else {
	                $route.reload();
	            }
	        })
	            .catch(function () {
	            $location.path() === '/disabled' ? $route.reload() : $location.path('/disabled');
	            $location.replace();
	        });
	    }
	]);
	


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
	    return { next: verb(0), "throw": verb(1), "return": verb(2) };
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [0, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var entcore_1 = __webpack_require__(2);
	var utils = __webpack_require__(10);
	var moment = __webpack_require__(5);
	var $ = __webpack_require__(18);
	var Structure = (function (_super) {
	    __extends(Structure, _super);
	    function Structure(o) {
	        var _this = _super.call(this) || this;
	        if (o)
	            _this.updateData(o);
	        _this.isSynchronized = false;
	        _this.synchronized = {
	            devoirs: false,
	            classes: false,
	            eleves: false,
	            matieres: false,
	            periodes: false,
	            types: false,
	            enseignements: false
	        };
	        var that = _this;
	        _this.collection(Eleve, {
	            sync: function () {
	                //chargement des élèves Pour les enseignants ou personnel de l'établissement
	                var url = that.api.ELEVE.synchronization;
	                //filtre par classe pour les enseignants
	                if ((entcore_1.model.me.type === 'ENSEIGNANT')) {
	                    exports.evaluations.classes.forEach(function (classe) {
	                        url += '&idClasse=' + classe.id;
	                    });
	                }
	                if (entcore_1.model.me.type === 'PERSEDUCNAT'
	                    || entcore_1.model.me.type === 'ENSEIGNANT') {
	                    entcore_1.http().getJson(url).done(function (res) {
	                        that.eleves.load(res);
	                        exports.evaluations.trigger('eleves-sync');
	                    });
	                }
	            }
	        });
	        _this.collection(Type, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson(that.api.TYPE.synchronization).done(function (res) {
	                        this.load(res);
	                        that.synchronized.types = true;
	                        resolve();
	                    }.bind(_this));
	                });
	            }
	        });
	        _this.collection(Devoir, new DevoirsCollection(that.id));
	        _this.collection(Enseignement, {
	            // sync : '/viescolaire/evaluations/enseignements'
	            sync: function (idClasse) {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    var uri = that.api.ENSEIGNEMENT.synchronization;
	                    if (idClasse !== undefined) {
	                        uri += '?idClasse=' + idClasse;
	                    }
	                    entcore_1.http().getJson(uri).done(function (res) {
	                        this.load(res);
	                        this.each(function (enseignement) {
	                            enseignement.competences.load(enseignement['competences_1']);
	                            _.map(enseignement.competences.all, function (competence) {
	                                return competence.composer = enseignement;
	                            });
	                            enseignement.competences.each(function (competence) {
	                                if (competence['competences_2'].length > 0) {
	                                    competence.competences.load(competence['competences_2']);
	                                    _.map(competence.competences.all, function (sousCompetence) {
	                                        return sousCompetence.composer = competence;
	                                    });
	                                }
	                                delete competence['competences_2'];
	                            });
	                            delete enseignement['competences_1'];
	                        });
	                        that.synchronized.enseignements = true;
	                        resolve();
	                    }.bind(_this));
	                });
	            }
	        });
	        _this.collection(Matiere, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    if (isChefEtab()) {
	                        entcore_1.http().getJson(that.api.MATIERE.synchronizationCE).done(function (res) {
	                            this.load(res);
	                            resolve();
	                        }.bind(_this));
	                    }
	                    else {
	                        entcore_1.http().getJson(that.api.MATIERE.synchronization)
	                            .done(function (res) {
	                            this.load(res);
	                            this.each(function (matiere) {
	                                matiere.sousMatieres.load(matiere.sous_matieres);
	                                that.synchronized.matieres = true;
	                                delete matiere.sous_matieres;
	                            });
	                            resolve();
	                        }.bind(_this));
	                    }
	                });
	            }
	        });
	        _this.collection(Periode, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson(that.api.PERIODE.synchronization).done(function (res) {
	                        this.load(res);
	                        exports.evaluations.periodes = this;
	                        that.synchronized.periodes = true;
	                        this.trigger('sync');
	                        resolve();
	                    }.bind(_this));
	                });
	            }
	        });
	        _this.collection(ReleveNote);
	        var libelle = {
	            CLASSE: 'Classe',
	            GROUPE: "Groupe d'enseignement"
	        };
	        var castClasses = function (classes) {
	            return _.map(classes, function (classe) {
	                var libelleClasse;
	                if (classe.type_groupe_libelle = classe.type_groupe === 0) {
	                    libelleClasse = libelle.CLASSE;
	                }
	                else {
	                    libelleClasse = libelle.GROUPE;
	                }
	                classe.type_groupe_libelle = libelleClasse;
	                if (!classe.hasOwnProperty("remplacement"))
	                    classe.remplacement = false;
	                classe = new Classe(classe);
	                return classe;
	            });
	        };
	        _this.syncRemplacement = function () {
	            var _this = this;
	            return new Promise(function (resolve, reject) {
	                entcore_1.http().getJson(that.api.CLASSE.synchronizationRemplacement)
	                    .done(function (res) {
	                    _this.classes.addRange(castClasses(res));
	                    entcore_1.model.trigger('apply');
	                    resolve();
	                });
	            });
	        };
	        _this.collection(Classe, {
	            sync: function () {
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson(that.api.CLASSE.synchronization).done(function (res) {
	                        that.classes.addRange(castClasses(res));
	                        that.synchronized.classes = true;
	                        that.syncRemplacement().then(function () {
	                            that.eleves.sync();
	                            resolve();
	                        });
	                    });
	                });
	            },
	        });
	        _this.devoirs.on('sync', function () {
	            that.synchronized.devoirs = true;
	        });
	        return _this;
	    }
	    Object.defineProperty(Structure.prototype, "api", {
	        get: function () {
	            return {
	                getEleves: '/viescolaire/evaluations/eleves?idEtablissement=' + this.id,
	                getDevoirs: '/viescolaire/evaluations/etab/devoirs/',
	                getClasses: '/viescolaire/evaluations/classes?idEtablissement=' + this.id,
	                TYPE: {
	                    synchronization: '/viescolaire/evaluations/types?idEtablissement=' + this.id
	                },
	                ENSEIGNEMENT: {
	                    synchronization: '/viescolaire/evaluations/enseignements'
	                },
	                MATIERE: {
	                    synchronizationCE: '/viescolaire/matieres',
	                    synchronization: '/viescolaire/matieres?idEnseignant=' + entcore_1.model.me.userId + '&idEtablissement=' + this.id
	                },
	                PERIODE: {
	                    synchronization: '/viescolaire/evaluations/periodes?idEtablissement=' + this.id
	                },
	                CLASSE: {
	                    synchronization: '/viescolaire/evaluations/classes?idEtablissement=' + this.id,
	                    synchronizationRemplacement: '/viescolaire/evaluations/remplacements/classes?idEtablissement=' + this.id
	                },
	                ELEVE: {
	                    synchronization: '/viescolaire/eleves?idEtablissement=' + this.id
	                }
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Structure.prototype.sync = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var isSynced = function () {
	                var b = _this.synchronized.matieres &&
	                    _this.synchronized.periodes &&
	                    _this.synchronized.types &&
	                    _this.synchronized.classes &&
	                    _this.synchronized.enseignements &&
	                    _this.synchronized.devoirs;
	                if (b) {
	                    _this.isSynchronized = true;
	                    resolve();
	                }
	            };
	            _this.matieres.sync().then(isSynced);
	            _this.periodes.sync().then(isSynced);
	            _this.types.sync().then(isSynced);
	            _this.classes.sync().then(isSynced);
	            _this.enseignements.sync().then(isSynced);
	            _this.syncDevoirs().then(isSynced);
	        });
	    };
	    Structure.prototype.syncDevoirs = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this.devoirs.sync().then(function (data) {
	                _this.synchronized.devoirs = true;
	                _this.devoirs.trigger('devoirs-sync');
	                resolve();
	            });
	        });
	    };
	    Structure.prototype.syncClasses = function (idEtab) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var that = _this;
	            var libelle = {
	                CLASSE: "Classe",
	                GROUPE: "Groupe d'enseignement"
	            };
	            entcore_1.http().getJson(_this.api.getClasses).done(function (res) {
	                _.map(res, function (classe) {
	                    var libelleClasse;
	                    if (classe.type_groupe === 0) {
	                        libelleClasse = libelle.CLASSE;
	                    }
	                    else {
	                        libelleClasse = libelle.GROUPE;
	                    }
	                    classe.type_groupe_libelle = libelleClasse;
	                    return classe;
	                });
	                that.classes.load(res);
	            });
	            _this.classes.sync();
	        });
	    };
	    return Structure;
	}(entcore_1.Model));
	exports.Structure = Structure;
	var ReleveNote = (function (_super) {
	    __extends(ReleveNote, _super);
	    function ReleveNote(o) {
	        var _this = _super.call(this) || this;
	        if (o && o !== undefined)
	            _this.updateData(o);
	        var that = _this;
	        _this.synchronized = {
	            classe: false,
	            devoirs: false,
	            evaluations: false,
	            releve: false
	        };
	        _this.structure = exports.evaluations.structure;
	        _this.periode = exports.evaluations.periodes.findWhere({ id: _this.idPeriode });
	        _this.matiere = exports.evaluations.matieres.findWhere({ id: _this.idMatiere });
	        var c = exports.evaluations.classes.findWhere({ id: _this.idClasse });
	        _this.classe = new Classe({ id: c.id, name: c.name });
	        var _e = $.extend(true, {}, exports.evaluations.classes.findWhere({ id: _this.idClasse }).eleves.all);
	        _this.classe.eleves.load($.map(_e, function (el) {
	            return el;
	        }));
	        _this.collection(Devoir, {
	            sync: function () {
	                if (!exports.evaluations.synchronized.devoirs) {
	                    exports.evaluations.devoirs.on('sync', function () {
	                        console.log(this);
	                    });
	                }
	                else {
	                    var _devoirs = [];
	                    if (this.composer.idPeriode !== undefined) {
	                        _devoirs = exports.evaluations.devoirs.where({
	                            id_periode: this.composer.idPeriode,
	                            id_groupe: this.composer.idClasse,
	                            id_matiere: this.composer.idMatiere,
	                            id_etablissement: this.composer.idEtablissement
	                        });
	                    }
	                    else {
	                        _devoirs = exports.evaluations.devoirs.where({
	                            id_groupe: this.composer.idClasse,
	                            id_matiere: this.composer.idMatiere,
	                            id_etablissement: this.composer.idEtablissement
	                        });
	                    }
	                    if (_devoirs.length > 0) {
	                        this.load(_devoirs);
	                        that.trigger('format');
	                        this.trigger('sync');
	                    }
	                }
	            }
	        });
	        return _this;
	    }
	    Object.defineProperty(ReleveNote.prototype, "api", {
	        get: function () {
	            return {
	                get: '/viescolaire/evaluations/releve?idEtablissement=' + this.structure.id + '&idClasse=' + this.idClasse + '&idMatiere=' + this.idMatiere + '&idPeriode=' + this.idPeriode
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ReleveNote.prototype.sync = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var that = _this;
	            var callFormating = function () {
	                if (that.synchronized.devoirs && that.synchronized.classe && that.synchronized.evaluations)
	                    that.trigger('format');
	            };
	            _this.devoirs.on('sync', function () {
	                if (!that.synchronized.devoirs) {
	                    that.synchronized.devoirs = true;
	                    callFormating();
	                }
	            });
	            _this.devoirs.sync();
	            _this.classe.eleves.on('sync', function () {
	                that.synchronized.classe = true;
	                callFormating();
	            });
	            if (_this.classe.eleves.all.length > 0) {
	                that.synchronized.classe = true;
	                callFormating();
	            }
	            var url = '/viescolaire/evaluations/releve?idEtablissement=' + _this.structure.id + '&idClasse=' + _this.idClasse + '&idMatiere=' + _this.idMatiere;
	            if (_this.periode !== undefined && _this.periode !== null && _this.periode.id !== undefined) {
	                url += '&idPeriode=' + _this.idPeriode;
	            }
	            entcore_1.http().getJson(url)
	                .done(function (res) {
	                that._tmp = res;
	                that.synchronized.evaluations = true;
	                callFormating();
	            });
	            _this.on('format', function () {
	                _.each(that.classe.eleves.all, function (eleve) {
	                    var _evals = [];
	                    var _t;
	                    if (that._tmp && that._tmp.length !== 0)
	                        _t = _.where(that._tmp, { id_eleve: eleve.id });
	                    _.each(that.devoirs.all, function (devoir) {
	                        var devoirPeriode = exports.evaluations.periodes.findWhere({ id: devoir.id_periode });
	                        var endSaisie = undefined;
	                        var date_saisie = devoirPeriode.date_fin_saisie;
	                        var current_date = new Date();
	                        if (moment(date_saisie).diff(moment(current_date), "days") >= 0) {
	                            endSaisie = false;
	                        }
	                        else {
	                            endSaisie = true;
	                        }
	                        if (_t && _t.length !== 0) {
	                            var _e = _.findWhere(_t, { id_devoir: devoir.id });
	                            if (_e) {
	                                _e.oldValeur = _e.valeur;
	                                _e.oldAppreciation = _e.appreciation !== undefined ? _e.appreciation : '';
	                                _e.endSaisie = endSaisie;
	                                _evals.push(_e);
	                            }
	                            else {
	                                _evals.push(new Evaluation({ valeur: "", oldValeur: "", appreciation: "",
	                                    oldAppreciation: "", id_devoir: devoir.id, id_eleve: eleve.id,
	                                    ramener_sur: devoir.ramener_sur, coefficient: devoir.coefficient,
	                                    is_evaluated: devoir.is_evaluated, endSaisie: endSaisie }));
	                            }
	                        }
	                        else {
	                            _evals.push(new Evaluation({ valeur: "", oldValeur: "", appreciation: "",
	                                oldAppreciation: "", id_devoir: devoir.id, id_eleve: eleve.id,
	                                ramener_sur: devoir.ramener_sur, coefficient: devoir.coefficient,
	                                is_evaluated: devoir.is_evaluated, endSaisie: endSaisie }));
	                        }
	                    });
	                    eleve.evaluations.load(_evals);
	                });
	                this.trigger('noteOK');
	                resolve();
	            });
	        });
	    };
	    ReleveNote.prototype.calculStatsDevoirs = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this.on('noteOK', function () {
	                var that = this;
	                var _datas = [];
	                _.each(that.devoirs.all, function (devoir) {
	                    var _o = {
	                        id: String(devoir.id),
	                        evaluations: []
	                    };
	                    _.each(that.classe.eleves.all, function (eleve) {
	                        var _e = eleve.evaluations.findWhere({ id_devoir: devoir.id });
	                        if (_e !== undefined && _e.valeur !== "")
	                            _o.evaluations.push(_e.formatMoyenne());
	                    });
	                    if (_o.evaluations.length > 0)
	                        _datas.push(_o);
	                });
	                if (_datas.length > 0) {
	                    entcore_1.http().postJson('/viescolaire/evaluations/moyennes?stats=true', { data: _datas }).done(function (res) {
	                        _.each(res, function (devoir) {
	                            var nbEleves = that.classe.eleves.all.length;
	                            var nbN = _.findWhere(_datas, { id: devoir.id });
	                            var d = that.devoirs.findWhere({ id: parseInt(devoir.id) });
	                            if (d !== undefined) {
	                                d.statistiques = devoir;
	                                if (nbN !== undefined) {
	                                    d.statistiques.percentDone = Math.round((nbN.evaluations.length / nbEleves) * 100);
	                                    d.percent = d.statistiques.percentDone;
	                                    if (resolve && typeof (resolve) === 'function') {
	                                        resolve();
	                                    }
	                                }
	                            }
	                        });
	                    });
	                }
	            });
	        });
	    };
	    ReleveNote.prototype.calculMoyennesEleves = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var that = _this;
	            var _datas = [];
	            _.each(_this.classe.eleves.all, function (eleve) {
	                var _t = eleve.evaluations.filter(function (evaluation) {
	                    return evaluation.valeur !== "" && evaluation.valeur !== null && evaluation.valeur !== undefined && evaluation.is_evaluated === true;
	                });
	                if (_t.length > 0) {
	                    var _evals = [];
	                    for (var i = 0; i < _t.length; i++) {
	                        _evals.push(_t[i].formatMoyenne());
	                    }
	                    var _o = {
	                        id: eleve.id,
	                        evaluations: _evals
	                    };
	                    _datas.push(_o);
	                }
	            });
	            if (_datas.length > 0) {
	                entcore_1.http().postJson('/viescolaire/evaluations/moyennes', { data: _datas }).done(function (res) {
	                    _.each(res, function (eleve) {
	                        var e = that.classe.eleves.findWhere({ id: eleve.id });
	                        if (e !== undefined) {
	                            e.moyenne = eleve.moyenne;
	                            if (resolve && typeof (resolve) === 'function') {
	                                resolve();
	                            }
	                        }
	                    });
	                });
	            }
	        });
	    };
	    return ReleveNote;
	}(entcore_1.Model));
	exports.ReleveNote = ReleveNote;
	function isChefEtab() {
	    return entcore_1.model.me.type === 'PERSEDUCNAT' &&
	        entcore_1.model.me.functions !== undefined &&
	        entcore_1.model.me.functions.DIR !== undefined &&
	        entcore_1.model.me.functions.DIR.code === 'DIR';
	}
	var Classe = (function (_super) {
	    __extends(Classe, _super);
	    function Classe(o) {
	        var _this = _super.call(this) || this;
	        if (o !== undefined)
	            _this.updateData(o);
	        _this.collection(Eleve, {
	            sync: function () {
	                return new Promise(function (resolve, reject) {
	                    _this.mapEleves = {};
	                    var url;
	                    if (isChefEtab()) {
	                        url = _this.type_groupe === 1 ? _this.api.syncGroupe : _this.api.syncClasseChefEtab;
	                    }
	                    else {
	                        url = _this.type_groupe === 1 ? _this.api.syncGroupe : _this.api.syncClasse;
	                    }
	                    entcore_1.http().getJson(url).done(function (data) {
	                        _this.eleves.load(data);
	                        for (var i = 0; i < _this.eleves.all.length; i++) {
	                            _this.mapEleves[_this.eleves.all[i].id] = _this.eleves.all[i];
	                        }
	                        resolve();
	                    });
	                });
	            }
	        });
	        _this.collection(SuiviCompetenceClasse);
	        return _this;
	    }
	    Object.defineProperty(Classe.prototype, "api", {
	        get: function () {
	            return {
	                syncClasse: '/directory/class/' + this.id + '/users?type=Student',
	                syncGroupe: '/viescolaire/groupe/enseignement/users/' + this.id + '?type=Student',
	                syncClasseChefEtab: '/viescolaire/classes/' + this.id + '/users'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Classe;
	}(entcore_1.Model));
	exports.Classe = Classe;
	var Eleve = (function (_super) {
	    __extends(Eleve, _super);
	    function Eleve(o) {
	        var _this = _super.call(this) || this;
	        if (o) {
	            _this.updateData(o);
	        }
	        _this.collection(Evaluation);
	        _this.collection(SuiviCompetence);
	        return _this;
	    }
	    Object.defineProperty(Eleve.prototype, "api", {
	        get: function () {
	            return {
	                getMoyenne: '/viescolaire/evaluations/moyenne'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Eleve.prototype.toString = function () {
	        return this.hasOwnProperty("displayName") ? this.displayName : this.firstName + " " + this.lastName;
	    };
	    Eleve.prototype.getMoyenne = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (_this.evaluations.all.length > 0) {
	                var _datas = [];
	                for (var i = 0; i < _this.evaluations.all.length; i++) {
	                    if (_this.evaluations.all[i].valeur !== "" && _this.evaluations.all[i].is_evaluated === true)
	                        _datas.push(_this.evaluations.all[i].formatMoyenne());
	                }
	                if (_datas.length > 0) {
	                    entcore_1.http().postJson(_this.api.getMoyenne, { notes: _datas }).done(function (res) {
	                        if (_.has(res, "moyenne")) {
	                            this.moyenne = res.moyenne;
	                            if (resolve && typeof (resolve) === 'function') {
	                                resolve();
	                            }
	                        }
	                    }.bind(_this));
	                }
	            }
	        });
	    };
	    return Eleve;
	}(entcore_1.Model));
	exports.Eleve = Eleve;
	var Evaluation = (function (_super) {
	    __extends(Evaluation, _super);
	    function Evaluation(o) {
	        var _this = _super.call(this) || this;
	        if (o)
	            _this.updateData(o);
	        _this.collection(CompetenceNote);
	        return _this;
	    }
	    Object.defineProperty(Evaluation.prototype, "api", {
	        get: function () {
	            return {
	                create: '/viescolaire/evaluations/note',
	                update: '/viescolaire/evaluations/note?idNote=' + this.id,
	                delete: '/viescolaire/evaluations/note?idNote=' + this.id,
	                createAppreciation: '/viescolaire/evaluations/appreciation',
	                updateAppreciation: '/viescolaire/evaluations/appreciation?idAppreciation=' + this.id_appreciation,
	                deleteAppreciation: '/viescolaire/evaluations/appreciation?idAppreciation=' + this.id_appreciation
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Evaluation.prototype.toJSON = function () {
	        var o = new Evaluation();
	        if (this.id !== null)
	            o.id = this.id;
	        o.id_eleve = this.id_eleve;
	        o.id_devoir = parseInt(this.id_devoir);
	        o.valeur = parseFloat(this.valeur);
	        if (this.appreciation)
	            o.appreciation = this.appreciation;
	        //delete o.appreciation;
	        delete o.competenceNotes;
	        return o;
	    };
	    Evaluation.prototype.save = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (!_this.id) {
	                _this.create().then(function (data) {
	                    resolve(data);
	                });
	            }
	            else {
	                _this.update().then(function (data) {
	                    resolve(data);
	                });
	            }
	        });
	    };
	    Evaluation.prototype.saveAppreciation = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (!_this.id_appreciation) {
	                _this.createAppreciation().then(function (data) {
	                    resolve(data);
	                });
	            }
	            else {
	                _this.updateAppreciation().then(function (data) {
	                    resolve(data);
	                });
	            }
	        });
	    };
	    Evaluation.prototype.create = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var _noteData = _this.toJSON();
	            delete _noteData.appreciation;
	            delete _noteData.id_appreciation;
	            entcore_1.http().postJson(_this.api.create, _noteData).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Evaluation.prototype.update = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var _noteData = _this.toJSON();
	            delete _noteData.appreciation;
	            delete _noteData.id_appreciation;
	            entcore_1.http().putJson(_this.api.update, _noteData).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Evaluation.prototype.delete = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().delete(_this.api.delete).done(function (data) {
	                if (resolve && typeof (resolve) === 'function') {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Evaluation.prototype.createAppreciation = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var _appreciation = {
	                id_devoir: _this.id_devoir,
	                id_eleve: _this.id_eleve,
	                valeur: _this.appreciation
	            };
	            entcore_1.http().postJson(_this.api.createAppreciation, _appreciation).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Evaluation.prototype.updateAppreciation = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var _appreciation = {
	                id: _this.id_appreciation,
	                id_devoir: _this.id_devoir,
	                id_eleve: _this.id_eleve,
	                valeur: _this.appreciation
	            };
	            entcore_1.http().putJson(_this.api.updateAppreciation, _appreciation).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Evaluation.prototype.deleteAppreciation = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().delete(_this.api.deleteAppreciation).done(function (data) {
	                if (resolve && typeof (resolve) === 'function') {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Evaluation.prototype.formatMoyenne = function () {
	        return {
	            valeur: parseFloat(this.valeur),
	            coefficient: this.coefficient,
	            ramenersur: this.ramener_sur
	        };
	    };
	    return Evaluation;
	}(entcore_1.Model));
	exports.Evaluation = Evaluation;
	var EvaluationDevoir = (function (_super) {
	    __extends(EvaluationDevoir, _super);
	    function EvaluationDevoir(p) {
	        return _super.call(this) || this;
	    }
	    return EvaluationDevoir;
	}(entcore_1.Model));
	exports.EvaluationDevoir = EvaluationDevoir;
	var Devoir = (function (_super) {
	    __extends(Devoir, _super);
	    function Devoir(p) {
	        var _this = _super.call(this) || this;
	        var that = _this;
	        _this.collection(Enseignement);
	        _this.collection(EvaluationDevoir);
	        _this.collection(Competence, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson(that.api.getCompetencesDevoir + that.id).done(function (res) {
	                        this.load(res);
	                        if (resolve && (typeof (resolve) === 'function')) {
	                            resolve();
	                        }
	                    }.bind(_this));
	                });
	            }
	        });
	        _this.collection(Eleve, {
	            sync: function () {
	                return new Promise(function (resolve, reject) {
	                    var _classe = exports.evaluations.classes.findWhere({ id: that.id_groupe });
	                    // that.eleves.load(JSON.parse(JSON.stringify(_classe.eleves.all)));
	                    // that.eleves.load($.extend(true, {}, JSON.stringify(_classe.eleves.all)));
	                    var e = $.map($.extend(true, {}, _classe.eleves.all), function (el) {
	                        return el;
	                    });
	                    that.eleves.load(e);
	                    entcore_1.http().getJson(that.api.getNotesDevoir).done(function (res) {
	                        for (var i = 0; i < res.length; i++) {
	                            var _e = that.eleves.findWhere({ id: res[i].id_eleve });
	                            if (_e !== undefined) {
	                                _e.evaluation = new Evaluation(res[i]);
	                                _e.evaluation.oldValeur = _e.evaluation.valeur;
	                                _e.evaluation.oldAppreciation = _e.evaluation.appreciation !== undefined ? _e.evaluation.appreciation : '';
	                                delete _e.evaluations;
	                            }
	                        }
	                        var _t = that.eleves.filter(function (eleve) {
	                            delete eleve.evaluations;
	                            return (!_.has(eleve, "evaluation"));
	                        });
	                        for (var j = 0; j < _t.length; j++) {
	                            _t[j].evaluation = new Evaluation({ valeur: "", oldValeur: "", appreciation: "", oldAppreciation: "", id_devoir: that.id, id_eleve: _t[j].id, ramener_sur: that.ramener_sur, coefficient: that.coefficient });
	                        }
	                        that.syncCompetencesNotes().then(function () {
	                            if (resolve && (typeof (resolve) === 'function')) {
	                                resolve();
	                            }
	                        });
	                    });
	                });
	            }
	        });
	        if (p)
	            _this.updateData(p);
	        return _this;
	    }
	    Object.defineProperty(Devoir.prototype, "api", {
	        get: function () {
	            return {
	                create: '/viescolaire/evaluations/devoir',
	                update: '/viescolaire/evaluations/devoir?idDevoir=',
	                delete: '/viescolaire/evaluations/devoir?idDevoir=',
	                duplicate: '/viescolaire/evaluations/devoir/' + this.id + '/duplicate',
	                getCompetencesDevoir: '/viescolaire/evaluations/competences/devoir/',
	                getCompetencesLastDevoir: '/viescolaire/evaluations/competences/last/devoir/',
	                getNotesDevoir: '/viescolaire/evaluations/devoir/' + this.id + '/notes',
	                getAppreciationDevoir: '/viescolaire/evaluations/appreciation/' + this.id + '/appreciations',
	                getStatsDevoir: '/viescolaire/evaluations/moyenne?stats=true',
	                getCompetencesNotes: '/viescolaire/evaluations/competence/notes/devoir/',
	                saveCompetencesNotes: '/viescolaire/evaluations/competence/notes',
	                updateCompetencesNotes: '/viescolaire/evaluations/competence/notes',
	                deleteCompetencesNotes: '/viescolaire/evaluations/competence/notes',
	                isEvaluatedDevoir: '/viescolaire/evaluations/devoirs/evaluations/information?idDevoir='
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Devoir.prototype.getLastSelectedCompetence = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().getJson(_this.api.getCompetencesLastDevoir).done(function (competencesLastDevoirList) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(competencesLastDevoirList);
	                }
	            });
	        });
	    };
	    Devoir.prototype.toJSON = function () {
	        var classe = exports.evaluations.classes.findWhere({ id: this.id_groupe });
	        var type_groupe = -1;
	        var id_groupe = null;
	        if (classe !== undefined) {
	            if (classe.type_groupe !== undefined) {
	                type_groupe = classe.type_groupe;
	            }
	            id_groupe = this.id_groupe;
	        }
	        return {
	            name: this.name,
	            owner: this.owner,
	            libelle: this.libelle,
	            id_groupe: id_groupe,
	            type_groupe: type_groupe,
	            id_sousmatiere: parseInt(this.id_sousmatiere),
	            id_periode: parseInt(this.id_periode),
	            id_type: parseInt(this.id_type),
	            id_matiere: this.id_matiere,
	            id_etat: parseInt(this.id_etat),
	            date_publication: this.date_publication,
	            id_etablissement: this.id_etablissement,
	            diviseur: this.diviseur,
	            coefficient: this.coefficient,
	            date: this.date,
	            ramener_sur: this.ramener_sur,
	            is_evaluated: this.is_evaluated,
	            competences: this.competences,
	            competenceEvaluee: this.competenceEvaluee,
	            competencesAdd: null,
	            competencesRem: null
	        };
	    };
	    Devoir.prototype.create = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().postJson(_this.api.create, _this.toJSON()).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Devoir.prototype.duplicate = function (classes) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (classes.length > 0) {
	                entcore_1.http().postJson(_this.api.duplicate, { classes: classes }).done(function (res) {
	                    resolve();
	                });
	            }
	            else {
	                reject();
	            }
	        });
	    };
	    Devoir.prototype.isEvaluatedDevoir = function (idDevoir) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var that = _this;
	            entcore_1.http().getJson(_this.api.isEvaluatedDevoir + idDevoir).done(function (data) {
	                that.evaluationDevoirs.load(data);
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Devoir.prototype.update = function (addArray, remArray) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var devoirJSON = _this.toJSON();
	            devoirJSON.competencesAdd = addArray;
	            devoirJSON.competencesRem = remArray;
	            devoirJSON.competences = [];
	            if (devoirJSON.competenceEvaluee == undefined) {
	                delete devoirJSON.competenceEvaluee;
	            }
	            entcore_1.http().putJson(_this.api.update + _this.id, devoirJSON).done(function (data) {
	                exports.evaluations.devoirs.sync();
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Devoir.prototype.remove = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().delete(_this.api.delete + _this.id).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            })
	                .error(function () {
	                reject();
	            });
	        });
	    };
	    Devoir.prototype.save = function (add, rem) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (!_this.id) {
	                _this.create().then(function (data) {
	                    if (resolve && (typeof (resolve) === 'function')) {
	                        resolve(data);
	                    }
	                });
	            }
	            else {
	                _this.update(add, rem).then(function (data) {
	                    if (resolve && (typeof (resolve) === 'function')) {
	                        resolve(data);
	                    }
	                });
	            }
	        });
	    };
	    Devoir.prototype.calculStats = function (evaluations) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (evaluations.length > 0) {
	                var _datas = [];
	                for (var i = 0; i < evaluations.length; i++) {
	                    _datas.push(evaluations[i].formatMoyenne());
	                }
	                if (_datas.length > 0) {
	                    entcore_1.http().postJson(_this.api.getStatsDevoir, { "notes": _datas }).done(function (res) {
	                        this.statistiques = res;
	                        this.statistiques.percentDone = Math.round((_datas.length / this.eleves.all.length) * 100);
	                        this.percent = this.statistiques.percentDone;
	                        if (resolve && typeof (resolve) === 'function') {
	                            resolve();
	                        }
	                    }.bind(_this));
	                }
	            }
	        });
	    };
	    Devoir.prototype.syncCompetencesNotes = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var that = _this;
	            entcore_1.http().getJson(that.api.getCompetencesNotes + that.id).done(function (res) {
	                for (var i = 0; i < that.eleves.all.length; i++) {
	                    var _comps = _.where(res, { id_eleve: that.eleves.all[i].id });
	                    if (_comps.length > 0) {
	                        var _results = [];
	                        for (var j = 0; j < that.competences.all.length; j++) {
	                            var _c = that.competences.all[j];
	                            var _t = _.findWhere(_comps, { id_competence: _c.id_competence });
	                            if (_t === undefined) {
	                                _results.push(new CompetenceNote({ id_competence: _c.id_competence, nom: _c.nom, id_devoir: that.id, id_eleve: that.eleves.all[i].id, evaluation: -1 }));
	                            }
	                            else {
	                                _results.push(_t);
	                            }
	                        }
	                        that.eleves.all[i].evaluation.competenceNotes.load(_results);
	                    }
	                    else {
	                        var _results = [];
	                        for (var j = 0; j < that.competences.all.length; j++) {
	                            _results.push(new CompetenceNote({ id_competence: that.competences.all[j].id_competence, nom: that.competences.all[j].nom, id_devoir: that.id, id_eleve: that.eleves.all[i].id, evaluation: -1 }));
	                        }
	                        that.eleves.all[i].evaluation.competenceNotes.load(_results);
	                    }
	                }
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve();
	                }
	            });
	        });
	    };
	    Devoir.prototype.saveCompetencesNotes = function (_data) {
	        var that = this;
	        if (_data[0].evaluation !== -1) {
	            var _post = _.filter(_data, function (competence) {
	                return competence.id === undefined;
	            });
	            if (_post.length > 0) {
	                entcore_1.http().postJson(this.api.saveCompetencesNotes, { data: _post }).done(function (res) {
	                    if (_post.length === _data.length) {
	                        that.syncCompetencesNotes().then(function () {
	                            exports.evaluations.trigger('apply');
	                        });
	                    }
	                    else {
	                        var _put = _.filter(_data, function (competence) {
	                            return competence.id !== undefined;
	                        });
	                        if (_put.length > 0) {
	                            var url = that.api.updateCompetencesNotes + "?";
	                            for (var i = 0; i < _put.length; i++) {
	                                url += "id=" + _put[i].id + "&";
	                            }
	                            url = url.slice(0, -1);
	                            entcore_1.http().putJson(url, { data: _put }).done(function (res) {
	                                that.syncCompetencesNotes().then(function () {
	                                    exports.evaluations.trigger('apply');
	                                });
	                            });
	                        }
	                    }
	                });
	            }
	            else {
	                var _put = _.filter(_data, function (competence) {
	                    return competence.id !== undefined;
	                });
	                if (_put.length > 0) {
	                    var url = that.api.updateCompetencesNotes + "?";
	                    for (var i = 0; i < _put.length; i++) {
	                        url += "id=" + _put[i].id + "&";
	                    }
	                    url = url.slice(0, -1);
	                    entcore_1.http().putJson(url, { data: _put }).done(function (res) {
	                        that.syncCompetencesNotes().then(function () {
	                            exports.evaluations.trigger('apply');
	                        });
	                    });
	                }
	            }
	        }
	        else {
	            var _delete = [];
	            for (var i = 0; i < _data.length; i++) {
	                if (_data[i].id !== undefined)
	                    _delete.push(_data[i].id);
	            }
	            if (_delete.length > 0) {
	                entcore_1.http().delete(this.api.deleteCompetencesNotes, { id: _delete }).done(function (res) {
	                    that.syncCompetencesNotes().then(function () {
	                        exports.evaluations.trigger('apply');
	                    });
	                });
	            }
	        }
	    };
	    return Devoir;
	}(entcore_1.Model));
	exports.Devoir = Devoir;
	var DevoirsCollection = (function () {
	    function DevoirsCollection(idEtablissement) {
	        this.idEtablissement = idEtablissement;
	        this.sync = function () {
	            var _this = this;
	            return new Promise(function (resolve, reject) {
	                entcore_1.http().getJson(_this.api.get).done(function (res) {
	                    this.load(res);
	                    if (exports.evaluations.synchronized.matieres) {
	                        exports.evaluations.devoirs.synchronizeDevoirMatiere();
	                    }
	                    else {
	                        exports.evaluations.matieres.on('sync', function () {
	                            exports.evaluations.devoirs.synchronizeDevoirMatiere();
	                        });
	                    }
	                    if (exports.evaluations.synchronized.types) {
	                        exports.evaluations.devoirs.synchronizedDevoirType();
	                    }
	                    else {
	                        exports.evaluations.types.on('sync', function () {
	                            exports.evaluations.devoirs.synchronizedDevoirType();
	                        });
	                    }
	                    exports.evaluations.devoirs.trigger('sync');
	                    if (resolve && (typeof (resolve) === 'function')) {
	                        resolve(res);
	                    }
	                }.bind(_this));
	            });
	        };
	    }
	    Object.defineProperty(DevoirsCollection.prototype, "api", {
	        get: function () {
	            return {
	                get: '/viescolaire/evaluations/devoirs?idEtablissement=' + this.idEtablissement,
	                areEvaluatedDevoirs: '/viescolaire/evaluations/devoirs/evaluations/informations?'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DevoirsCollection.prototype.synchronizeDevoirMatiere = function () {
	        for (var i = 0; i < exports.evaluations.devoirs.all.length; i++) {
	            var matiere = exports.evaluations.matieres.findWhere({ id: exports.evaluations.devoirs.all[i].id_matiere });
	            if (matiere)
	                exports.evaluations.devoirs.all[i].matiere = matiere;
	        }
	    };
	    DevoirsCollection.prototype.synchronizedDevoirType = function () {
	        for (var i = 0; i < exports.evaluations.devoirs.all.length; i++) {
	            var type = exports.evaluations.types.findWhere({ id: exports.evaluations.devoirs.all[i].id_type });
	            if (type)
	                exports.evaluations.devoirs.all[i].type = type;
	        }
	    };
	    DevoirsCollection.prototype.areEvaluatedDevoirs = function (idDevoirs) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var URLBuilder = "";
	            for (var i = 0; i < idDevoirs.length; i++) {
	                if (i == 0)
	                    URLBuilder = "idDevoir=" + idDevoirs[i];
	                else
	                    URLBuilder += "&idDevoir=" + idDevoirs[i];
	            }
	            entcore_1.http().getJson(_this.api.areEvaluatedDevoirs + URLBuilder).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    DevoirsCollection.prototype.getPercentDone = function (idDevoirs) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (idDevoirs) {
	                var structure = exports.evaluations.structures.findWhere({ id: _this.idEtablissement });
	                if (structure === undefined)
	                    reject();
	                if (idDevoirs.length > 0 && structure.synchronized.devoirs) {
	                    entcore_1.http().postJson('/viescolaire/evaluations/devoirs/done', { 'idDevoirs': idDevoirs })
	                        .done(function (res) {
	                        for (var _i = 0, idDevoirs_1 = idDevoirs; _i < idDevoirs_1.length; _i++) {
	                            var id = idDevoirs_1[_i];
	                            var calculatedPercent = _.findWhere(res, { id: id });
	                            _.find(_this.all, { id: id }).percent = calculatedPercent === undefined ? 0 : calculatedPercent.percent;
	                        }
	                        entcore_1.model.trigger('apply');
	                        resolve();
	                    })
	                        .error(function () {
	                        reject();
	                    });
	                }
	            }
	        });
	    };
	    return DevoirsCollection;
	}());
	exports.DevoirsCollection = DevoirsCollection;
	var Periode = (function (_super) {
	    __extends(Periode, _super);
	    function Periode() {
	        return _super.apply(this, arguments) || this;
	    }
	    return Periode;
	}(entcore_1.Model));
	exports.Periode = Periode;
	var Enseignement = (function (_super) {
	    __extends(Enseignement, _super);
	    function Enseignement() {
	        var _this = _super.call(this) || this;
	        _this.collection(Competence);
	        return _this;
	    }
	    return Enseignement;
	}(entcore_1.Model));
	exports.Enseignement = Enseignement;
	/**
	 * Méthode récursive de l'affichage des sous domaines d'un domaine
	 *
	 * @param poDomaines la liste des domaines
	 * @pbMesEvaluations booleen indiquant d'afficher ou non un domaine
	 *
	 */
	function setVisibleSousDomainesRec(poDomaines, pbVisible) {
	    if (poDomaines !== null && poDomaines !== undefined) {
	        for (var i = 0; i < poDomaines.all.length; i++) {
	            var oSousDomaine = poDomaines.all[i];
	            oSousDomaine.visible = pbVisible;
	            setVisibleSousDomainesRec(oSousDomaine.domaines, pbVisible);
	        }
	    }
	}
	var BilanFinDeCycle = (function (_super) {
	    __extends(BilanFinDeCycle, _super);
	    function BilanFinDeCycle(p) {
	        var _this = _super.call(this) || this;
	        if (p !== undefined) {
	            _this.id = p.id;
	            _this.id_eleve = p.id_eleve;
	            _this.id_domaine = p.id_domaine;
	            _this.id_etablissement = p.id_etablissement;
	            _this.owner = p.owner;
	            _this.valeur = p.valeur;
	        }
	        return _this;
	    }
	    Object.defineProperty(BilanFinDeCycle.prototype, "api", {
	        get: function () {
	            return {
	                createBFC: '/viescolaire/evaluations/bfc',
	                updateBFC: '/viescolaire/evaluations/bfc?id=' + this.id,
	                deleteBFC: '/viescolaire/evaluations/bfc?id=' + this.id
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BilanFinDeCycle.prototype.saveBilanFinDeCycle = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (!_this.id) {
	                _this.createBilanFinDeCycle().then(function (data) {
	                    resolve(data);
	                });
	            }
	            else {
	                _this.updateBilanFinDeCycle().then(function (data) {
	                    resolve(data);
	                });
	            }
	        });
	    };
	    BilanFinDeCycle.prototype.createBilanFinDeCycle = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var _bilanFinDeCycle = {
	                id_eleve: _this.id_eleve,
	                id_domaine: _this.id_domaine,
	                id_etablissement: _this.id_etablissement,
	                owner: _this.owner,
	                valeur: _this.valeur
	            };
	            entcore_1.http().postJson(_this.api.createBFC, _bilanFinDeCycle).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    BilanFinDeCycle.prototype.updateBilanFinDeCycle = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var _bilanFinDeCycle = {
	                id: _this.id,
	                id_eleve: _this.id_eleve,
	                id_domaine: _this.id_domaine,
	                id_etablissement: _this.id_etablissement,
	                owner: _this.owner,
	                valeur: _this.valeur
	            };
	            entcore_1.http().putJson(_this.api.updateBFC, _bilanFinDeCycle).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    BilanFinDeCycle.prototype.deleteBilanFinDeCycle = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().delete(_this.api.deleteBFC).done(function (data) {
	                if (resolve && typeof (resolve) === 'function') {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    return BilanFinDeCycle;
	}(entcore_1.Model));
	exports.BilanFinDeCycle = BilanFinDeCycle;
	var Domaine = (function (_super) {
	    __extends(Domaine, _super);
	    function Domaine(poDomaine) {
	        var _this = _super.call(this) || this;
	        var that = _this;
	        _this.collection(Competence);
	        _this.collection(Domaine);
	        if (poDomaine !== undefined) {
	            var sousDomaines = poDomaine.domaines;
	            var sousCompetences = poDomaine.competences;
	            _this.updateData(poDomaine);
	            if (sousDomaines !== undefined) {
	                _this.domaines.load(sousDomaines);
	            }
	            if (sousCompetences !== undefined) {
	                _this.competences.load(sousCompetences);
	            }
	        }
	        return _this;
	    }
	    /**
	     * Méthode activant l'affichage des sous domaines d'un domaine
	     *
	     * @pbMesEvaluations booleen indiquant d'afficher ou non un domaine
	     *
	     */
	    Domaine.prototype.setVisibleSousDomaines = function (pbVisible) {
	        setVisibleSousDomainesRec(this.domaines, pbVisible);
	    };
	    return Domaine;
	}(entcore_1.Model));
	exports.Domaine = Domaine;
	var Competence = (function (_super) {
	    __extends(Competence, _super);
	    function Competence() {
	        var _this = _super.call(this) || this;
	        _this.collection(Competence);
	        return _this;
	    }
	    Competence.prototype.selectChildren = function (bool) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (_this.competences.all.length !== 0) {
	                _.each(_this.competences.all, function (child) {
	                    child.selected = bool;
	                    child.selectChildren(bool).then(resolve);
	                });
	            }
	            else {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve();
	                }
	            }
	        });
	    };
	    Competence.prototype.findSelectedChildren = function () {
	        if (this.selected === true) {
	            exports.evaluations.competencesDevoir.push(this.id);
	        }
	        if (this.competences.all.length !== 0) {
	            _.each(this.competences.all, function (child) {
	                child.findSelectedChildren();
	            });
	        }
	    };
	    return Competence;
	}(entcore_1.Model));
	exports.Competence = Competence;
	var Type = (function (_super) {
	    __extends(Type, _super);
	    function Type() {
	        return _super.apply(this, arguments) || this;
	    }
	    return Type;
	}(entcore_1.Model));
	exports.Type = Type;
	var Matiere = (function (_super) {
	    __extends(Matiere, _super);
	    function Matiere() {
	        var _this = _super.call(this) || this;
	        _this.collection(SousMatiere);
	        return _this;
	    }
	    return Matiere;
	}(entcore_1.Model));
	exports.Matiere = Matiere;
	var SousMatiere = (function (_super) {
	    __extends(SousMatiere, _super);
	    function SousMatiere() {
	        return _super.apply(this, arguments) || this;
	    }
	    return SousMatiere;
	}(entcore_1.Model));
	exports.SousMatiere = SousMatiere;
	var CompetenceNote = (function (_super) {
	    __extends(CompetenceNote, _super);
	    function CompetenceNote(o) {
	        var _this = _super.call(this) || this;
	        if (o !== undefined)
	            _this.updateData(o);
	        return _this;
	    }
	    Object.defineProperty(CompetenceNote.prototype, "api", {
	        get: function () {
	            return {
	                create: '/viescolaire/evaluations/competence/note',
	                update: '/viescolaire/evaluations/competence/note?id=' + this.id,
	                delete: '/viescolaire/evaluations/competence/note?id=' + this.id
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CompetenceNote.prototype.toJSON = function () {
	        return {
	            id: this.id,
	            id_devoir: this.id_devoir,
	            id_competence: this.id_competence,
	            evaluation: this.evaluation,
	            id_eleve: this.id_eleve
	        };
	    };
	    CompetenceNote.prototype.create = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().postJson(_this.api.create, _this.toJSON()).done(function (data) {
	                _this.id = data.id;
	                if (resolve && (typeof (resolve) === 'undefined')) {
	                    resolve(data.id);
	                }
	            });
	        });
	    };
	    CompetenceNote.prototype.update = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().putJson(_this.api.update, _this.toJSON()).done(function (data) {
	                if (resolve && (typeof (resolve) === 'undefined')) {
	                    resolve();
	                }
	            });
	        });
	    };
	    CompetenceNote.prototype.delete = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().delete(_this.api.delete).done(function (data) {
	                if (resolve && (typeof (resolve) === 'undefined')) {
	                    resolve();
	                }
	            });
	        });
	    };
	    CompetenceNote.prototype.save = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (!_this.id) {
	                _this.create().then(function (data) {
	                    if (resolve && (typeof (resolve) === 'undefined')) {
	                        resolve(data);
	                    }
	                });
	            }
	            else {
	                _this.update();
	            }
	        });
	    };
	    return CompetenceNote;
	}(entcore_1.Model));
	exports.CompetenceNote = CompetenceNote;
	var Evaluations = (function (_super) {
	    __extends(Evaluations, _super);
	    function Evaluations() {
	        var _this = _super.call(this) || this;
	        _this.synchronized = {
	            devoirs: false,
	            classes: false,
	            matieres: false,
	            types: false
	        };
	        // On charge les établissements de l'utilisateur
	        var structuresTemp = [];
	        _this.collection(Devoir);
	        _this.collection(Enseignement);
	        _this.collection(Matiere);
	        _this.collection(ReleveNote);
	        _this.collection(Classe);
	        _this.collection(Periode);
	        _this.collection(Type);
	        _this.collection(Structure, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson('/viescolaire/evaluations/user/structures/actives').done(function (idsEtablissementActifs) {
	                        //On récupère tout d'abord la liste des établissements actifs
	                        if (idsEtablissementActifs.length > 0) {
	                            for (var i = 0; i < entcore_1.model.me.structures.length; i++) {
	                                var isEtablissementActif = (_.findWhere(idsEtablissementActifs, { id_etablissement: entcore_1.model.me.structures[i] }) !== undefined);
	                                if (isEtablissementActif) {
	                                    var structure = {
	                                        id: entcore_1.model.me.structures[i],
	                                        libelle: entcore_1.model.me.structureNames[i]
	                                    };
	                                    structuresTemp.push(structure);
	                                }
	                            }
	                            exports.evaluations.structures.load(structuresTemp);
	                            exports.evaluations.structure = exports.evaluations.structures.first();
	                            if (exports.evaluations.structure !== undefined) {
	                                resolve();
	                            }
	                        }
	                        else {
	                            reject();
	                        }
	                    }.bind(_this));
	                });
	            }
	        });
	        return _this;
	    }
	    Evaluations.prototype.sync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var e_1;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, this.structures.sync()];
	                    case 1:
	                        _a.sent();
	                        exports.evaluations.enseignements = exports.evaluations.structure.enseignements;
	                        exports.evaluations.releveNotes = exports.evaluations.structure.releveNotes;
	                        exports.evaluations.periodes = exports.evaluations.structure.periodes;
	                        exports.evaluations.matieres = exports.evaluations.structure.matieres;
	                        exports.evaluations.eleves = exports.evaluations.structure.eleves;
	                        exports.evaluations.classes = exports.evaluations.structure.classes;
	                        exports.evaluations.devoirs = exports.evaluations.structure.devoirs;
	                        exports.evaluations.types = exports.evaluations.structure.types;
	                        return [2 /*return*/];
	                    case 2:
	                        e_1 = _a.sent();
	                        throw e_1;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return Evaluations;
	}(entcore_1.Model));
	exports.Evaluations = Evaluations;
	var SuiviCompetenceClasse = (function (_super) {
	    __extends(SuiviCompetenceClasse, _super);
	    function SuiviCompetenceClasse(classe, periode) {
	        var _this = _super.call(this) || this;
	        _this.periode = periode;
	        var that = _this;
	        _this.collection(Domaine, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    var url = that.api.getArbreDomaines + classe.id;
	                    entcore_1.http().getJson(url).done(function (resDomaines) {
	                        var url = that.api.getCompetencesNotesClasse + classe.id + "/" + classe.type_groupe;
	                        if (periode !== null && periode !== undefined && periode !== '*') {
	                            if (periode.id !== undefined)
	                                url += "?idPeriode=" + periode.id;
	                        }
	                        entcore_1.http().getJson(url).done(function (resCompetencesNotes) {
	                            if (resDomaines) {
	                                for (var i = 0; i < resDomaines.length; i++) {
	                                    var domaine = new Domaine(resDomaines[i]);
	                                    that.domaines.all.push(domaine);
	                                    setCompetenceNotes(domaine, resCompetencesNotes, _this, classe);
	                                }
	                            }
	                        });
	                        if (resolve && typeof (resolve) === 'function') {
	                            resolve();
	                        }
	                    });
	                });
	            }
	        });
	        return _this;
	    }
	    Object.defineProperty(SuiviCompetenceClasse.prototype, "api", {
	        get: function () {
	            return {
	                getCompetencesNotesClasse: '/viescolaire/evaluations/competence/notes/classe/',
	                getArbreDomaines: '/viescolaire/evaluations/domaines/classe/'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SuiviCompetenceClasse.prototype.addEvalLibre = function (eleve) {
	    };
	    SuiviCompetenceClasse.prototype.findCompetence = function (idCompetence) {
	        for (var i = 0; i < this.domaines.all.length; i++) {
	            var comp = findCompetenceRec(idCompetence, this.domaines.all[i].competences);
	            if (comp !== undefined) {
	                return comp;
	            }
	        }
	        return false;
	    };
	    SuiviCompetenceClasse.prototype.sync = function () {
	        return new Promise(function (resolve, reject) {
	            resolve();
	        });
	    };
	    return SuiviCompetenceClasse;
	}(entcore_1.Model));
	exports.SuiviCompetenceClasse = SuiviCompetenceClasse;
	var TableConversion = (function (_super) {
	    __extends(TableConversion, _super);
	    function TableConversion(p) {
	        return _super.call(this) || this;
	    }
	    return TableConversion;
	}(entcore_1.Model));
	exports.TableConversion = TableConversion;
	var SuiviCompetence = (function (_super) {
	    __extends(SuiviCompetence, _super);
	    function SuiviCompetence(eleve, periode, classe, structure) {
	        var _this = _super.call(this) || this;
	        _this.that = _this;
	        _this.periode = periode;
	        _this.classe = classe;
	        var that = _this;
	        _this.collection(TableConversion);
	        _this.collection(Domaine, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    var url = that.api.getArbreDomaines + that.classe.id;
	                    entcore_1.http().getJson(url).done(function (resDomaines) {
	                        var url = that.api.getCompetencesNotes + eleve.id;
	                        if (periode !== null && periode !== undefined && periode !== '*') {
	                            if (periode.id !== undefined)
	                                url += "?idPeriode=" + periode.id;
	                        }
	                        entcore_1.http().getJson(url).done(function (resCompetencesNotes) {
	                            if (resDomaines) {
	                                for (var i = 0; i < resDomaines.length; i++) {
	                                    var domaine = new Domaine(resDomaines[i]);
	                                    if (that.bilanFinDeCycles !== undefined && that.bilanFinDeCycles.all.length > 0) {
	                                        var tempBFC = _.findWhere(that.bilanFinDeCycles.all, { id_domaine: domaine.id });
	                                        if (tempBFC !== undefined) {
	                                            domaine.bfc = tempBFC;
	                                        }
	                                    }
	                                    domaine.id_eleve = eleve.id;
	                                    domaine.id_chef_etablissement = entcore_1.model.me.userId;
	                                    domaine.id_etablissement = structure.id;
	                                    that.domaines.all.push(domaine);
	                                    setCompetenceNotes(domaine, resCompetencesNotes, _this, null);
	                                }
	                            }
	                            if (resolve && typeof (resolve) === 'function') {
	                                resolve();
	                            }
	                        });
	                    });
	                });
	            }
	        });
	        _this.collection(BilanFinDeCycle, {
	            sync: function () {
	                return new Promise(function (resolve, reject) {
	                    var url = that.api.getDomainesBFC + eleve.id + '?idEtablissement=' + structure.id;
	                    entcore_1.http().getJson(url).done(function (resBFC) {
	                        if (resBFC) {
	                            for (var i = 0; i < resBFC.length; i++) {
	                                var BFC = new BilanFinDeCycle(resBFC[i]);
	                                that.bilanFinDeCycles.all.push(BFC);
	                            }
	                        }
	                        if (resolve && typeof (resolve) === 'function') {
	                            resolve();
	                        }
	                    });
	                });
	            }
	        });
	        return _this;
	    }
	    Object.defineProperty(SuiviCompetence.prototype, "api", {
	        get: function () {
	            return {
	                getCompetencesNotes: '/viescolaire/evaluations/competence/notes/eleve/',
	                getArbreDomaines: '/viescolaire/evaluations/domaines/classe/',
	                getDomainesBFC: '/viescolaire/evaluations/bfc/eleve/',
	                getCompetenceNoteConverssion: '/viescolaire/evaluations/competence/notes/bilan/conversion'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Calcul la moyenne d'un domaine (moyenne des meilleurs évaluations de chaque compétence)
	     *
	     */
	    SuiviCompetence.prototype.setMoyenneCompetences = function () {
	        for (var i = 0; i < this.domaines.all.length; i++) {
	            var oEvaluationsArray = [];
	            var oDomaine = this.domaines.all[i];
	            // recherche de toutes les évaluations du domaine et ses sous domaines
	            // (uniquement les max de chaque compétence)
	            getMaxEvaluationsDomaines(oDomaine, oEvaluationsArray, this.tableConversions.all, false, this.bilanFinDeCycles);
	        }
	    };
	    SuiviCompetence.prototype.findCompetence = function (idCompetence) {
	        for (var i = 0; i < this.domaines.all.length; i++) {
	            var comp = findCompetenceRec(idCompetence, this.domaines.all[i]);
	            if (comp !== undefined) {
	                return comp;
	            }
	        }
	        return false;
	    };
	    SuiviCompetence.prototype.getConversionTable = function (idetab, idClasse) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            var that = _this;
	            entcore_1.http().getJson(_this.api.getCompetenceNoteConverssion + '?idEtab=' + idetab + '&idClasse=' + idClasse).done(function (data) {
	                that.tableConversions.load(data);
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    SuiviCompetence.prototype.sync = function () {
	        return new Promise(function (resolve, reject) {
	            resolve();
	        });
	    };
	    return SuiviCompetence;
	}(entcore_1.Model));
	exports.SuiviCompetence = SuiviCompetence;
	function setSliderOptions(poDomaine, tableConversions) {
	    poDomaine.myChangeSliderListener = function (sliderId) {
	        // Au changement du Slider on détermine si on est dans le cas d'un ajout d'un bfc ou d'une modification
	        // Si c'est un ajout on créee l'objet BFC()
	        var bfc = poDomaine.bfc;
	        if (bfc === undefined) {
	            bfc = new BilanFinDeCycle();
	            bfc.id_domaine = poDomaine.id;
	            bfc.id_etablissement = poDomaine.id_etablissement;
	            bfc.id_eleve = poDomaine.id_eleve;
	        }
	        bfc.owner = poDomaine.id_chef_etablissement;
	        // Si la valeur modifiée est égale à la moyenne calculée, on ne fait rien ou on supprime la valeur
	        if (poDomaine.slider.value === poDomaine.moyenne) {
	            if (bfc.id !== undefined) {
	                poDomaine.bfc.deleteBilanFinDeCycle().then(function (res) {
	                    if (res.rows === 1) {
	                        poDomaine.bfc = undefined;
	                        poDomaine.lastSliderUpdated = poDomaine.moyenne;
	                    }
	                    entcore_1.model.trigger('apply');
	                });
	            }
	        }
	        else {
	            // Sinon on ajoute ou on modifie la valeur du BFC
	            bfc.valeur = poDomaine.slider.value;
	            bfc.saveBilanFinDeCycle().then(function (res) {
	                if (res !== undefined && res.id !== undefined) {
	                    if (bfc.id === undefined) {
	                        bfc.id = res.id;
	                    }
	                    poDomaine.bfc = bfc;
	                    poDomaine.lastSliderUpdated = bfc.valeur;
	                    entcore_1.model.trigger('apply');
	                }
	            });
	        }
	    };
	    poDomaine.slider = {
	        options: {
	            ticksTooltip: function (value) {
	                return String(poDomaine.moyenne);
	            },
	            disabled: parseFloat(poDomaine.moyenne) === -1,
	            floor: _.min(tableConversions, function (Conversions) { return Conversions.ordre; }).ordre - 1,
	            ceil: _.max(tableConversions, function (Conversions) { return Conversions.ordre; }).ordre,
	            step: 1,
	            showTicksValues: false,
	            showTicks: true,
	            showSelectionBar: true,
	            hideLimitLabels: true,
	            id: poDomaine.id,
	            onEnd: poDomaine.myChangeSliderListener
	        }
	    };
	    var maConvertion = undefined;
	    var moyenneTemp = undefined;
	    // si Une valeur a été modifiée par le chef d'établissement alors on prend cette valeur
	    if (poDomaine.bfc !== undefined && poDomaine.bfc.valeur !== undefined) {
	        moyenneTemp = poDomaine.bfc.valeur;
	    }
	    else {
	        moyenneTemp = poDomaine.moyenne;
	    }
	    for (var i = 0; i < tableConversions.length; i++) {
	        if ((tableConversions[i].valmin <= moyenneTemp && tableConversions[i].valmax > moyenneTemp) && tableConversions[i].ordre !== tableConversions.length) {
	            maConvertion = tableConversions[i];
	        }
	        else if ((tableConversions[i].valmin <= moyenneTemp && tableConversions[i].valmax >= moyenneTemp) && tableConversions[i].ordre === tableConversions.length) {
	            maConvertion = tableConversions[i];
	        }
	    }
	    // si ça ne rentre dans aucune case
	    if (maConvertion === undefined) {
	        poDomaine.slider.value = -1;
	        poDomaine.slider.options.getSelectionBarClass = function () { return '#d8e0f3'; };
	        poDomaine.slider.options.translate = function (value, sliderId, label) {
	            var l = '#label#';
	            if (label === 'model') {
	                l = '<b>#label#</b>';
	            }
	            return l.replace('#label#', entcore_1.idiom.translate('evaluations.competence.unevaluated'));
	        };
	    }
	    else {
	        poDomaine.slider.value = maConvertion.ordre;
	        poDomaine.slider.options.getSelectionBarClass = function (value) {
	            var ConvertionOfValue = _.find(tableConversions, { ordre: value });
	            if (ConvertionOfValue !== undefined)
	                return ConvertionOfValue.couleur;
	        };
	        poDomaine.slider.options.translate = function (value, sliderId, label) {
	            var l = '#label#';
	            if (label === 'model') {
	                l = '<b>#label#</b>';
	            }
	            var libelle = _.find(tableConversions, { ordre: value });
	            if (libelle !== undefined)
	                return l.replace('#label#', entcore_1.idiom.translate(libelle.libelle));
	        };
	    }
	}
	;
	function getMaxEvaluationsDomaines(poDomaine, poMaxEvaluationsDomaines, tableConversions, pbMesEvaluations, bfcsParDomaine) {
	    // si le domaine est évalué, on ajoute les max de chacunes de ses competences
	    if (poDomaine.evaluated) {
	        for (var i_1 = 0; i_1 < poDomaine.competences.all.length; i_1++) {
	            var competencesEvaluations = poDomaine.competences.all[i_1].competencesEvaluations;
	            var _t = competencesEvaluations;
	            // filtre sur les compétences évaluées par l'enseignant
	            if (pbMesEvaluations) {
	                _t = _.filter(competencesEvaluations, function (competence) {
	                    return competence.owner !== undefined && competence.owner === entcore_1.model.me.userId;
	                });
	            }
	            if (_t && _t.length > 0) {
	                // TODO récupérer la vrai valeur numérique :
	                // par exemple 0 correspond à rouge ce qui mais ça correspond à une note de 1 ou 0.5 ou 0 ?
	                poMaxEvaluationsDomaines.push(_.max(_t, function (_t) {
	                    return _t.evaluation;
	                }).evaluation + 1);
	            }
	        }
	    }
	    // calcul de la moyenne pour les sous-domaines
	    if (poDomaine.domaines) {
	        for (var i = 0; i < poDomaine.domaines.all.length; i++) {
	            // si le domaine parent n'est pas évalué, il faut vider pour chaque sous-domaine les poMaxEvaluationsDomaines sauvegardés
	            if (!poDomaine.evaluated) {
	                poMaxEvaluationsDomaines = [];
	            }
	            // On ajoute les informations utiles au sous-domaine
	            poDomaine.domaines.all[i].id_eleve = poDomaine.id_eleve;
	            poDomaine.domaines.all[i].id_etablissement = poDomaine.id_etablissement;
	            poDomaine.domaines.all[i].id_chef_etablissement = poDomaine.id_chef_etablissement;
	            if (bfcsParDomaine !== undefined && bfcsParDomaine.all.length > 0) {
	                var tempBFC = _.findWhere(bfcsParDomaine.all, { id_domaine: poDomaine.domaines.all[i].id });
	                if (tempBFC !== undefined) {
	                    poDomaine.domaines.all[i].bfc = tempBFC;
	                }
	            }
	            getMaxEvaluationsDomaines(poDomaine.domaines.all[i], poMaxEvaluationsDomaines, tableConversions, pbMesEvaluations, bfcsParDomaine);
	        }
	    }
	    // mise à jour de la moyenne
	    if (poMaxEvaluationsDomaines.length > 0) {
	        poDomaine.moyenne = utils.average(_.without(poMaxEvaluationsDomaines, 0));
	    }
	    else {
	        poDomaine.moyenne = -1;
	    }
	    setSliderOptions(poDomaine, tableConversions);
	    // Chefs d'établissement
	    //Si l'utilisateur n'est pas un chef d'établissement il ne peut pas modifier le slider
	    if (!isChefEtab()) {
	        poDomaine.slider.options.readOnly = true;
	    }
	}
	function findCompetenceRec(piIdCompetence, poDomaine) {
	    for (var i = 0; i < poDomaine.competences.all.length; i++) {
	        // si compétences trouvée on arrete le traitement
	        if (poDomaine.competences.all[i].id === piIdCompetence) {
	            return poDomaine.competences.all[i];
	        }
	    }
	    // recherche dans les sous-domaines
	    if (poDomaine.domaines) {
	        for (var i = 0; i < poDomaine.domaines.all.length; i++) {
	            var comp = findCompetenceRec(piIdCompetence, poDomaine.domaines.all[i]);
	            if (comp !== undefined) {
	                return comp;
	            }
	        }
	    }
	}
	function setCompetenceNotes(poDomaine, poCompetencesNotes, object, classe) {
	    if (poDomaine.competences) {
	        _.map(poDomaine.competences.all, function (competence) {
	            competence.competencesEvaluations = _.where(poCompetencesNotes, {
	                id_competence: competence.id,
	                id_domaine: competence.id_domaine
	            });
	            if (object.composer.constructor.name === 'SuiviCompetenceClasse') {
	                for (var i = 0; i < classe.eleves.all.length; i++) {
	                    var mine = _.findWhere(competence.competencesEvaluations, { id_eleve: classe.eleves.all[i].id, owner: entcore_1.model.me.userId });
	                    var others = _.filter(competence.competencesEvaluations, function (evaluation) { return evaluation.owner !== entcore_1.model.me.userId; });
	                    if (mine === undefined)
	                        competence.competencesEvaluations.push(new CompetenceNote({ evaluation: -1, id_competence: competence.id, id_eleve: classe.eleves.all[i].id, owner: entcore_1.model.me.userId }));
	                    if (others.length === 0)
	                        competence.competencesEvaluations.push(new CompetenceNote({ evaluation: -1, id_competence: competence.id, id_eleve: classe.eleves.all[i].id }));
	                }
	            }
	        });
	    }
	    if (poDomaine.domaines) {
	        for (var i = 0; i < poDomaine.domaines.all.length; i++) {
	            setCompetenceNotes(poDomaine.domaines.all[i], poCompetencesNotes, object, classe);
	        }
	    }
	}
	var Enseignant = (function (_super) {
	    __extends(Enseignant, _super);
	    function Enseignant(p) {
	        return _super.call(this) || this;
	    }
	    return Enseignant;
	}(entcore_1.Model));
	exports.Enseignant = Enseignant;
	var Remplacement = (function (_super) {
	    __extends(Remplacement, _super);
	    function Remplacement(p) {
	        var _this = _super.call(this) || this;
	        _this.selected = false;
	        return _this;
	    }
	    Object.defineProperty(Remplacement.prototype, "api", {
	        get: function () {
	            return {
	                create: '/viescolaire/evaluations/remplacement/create',
	                update: '/viescolaire/evaluations/remplacement/update',
	                delete: '/viescolaire/evaluations/remplacement/delete'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Remplacement.prototype.create = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().postJson(_this.api.create, _this.toJSON()).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Remplacement.prototype.update = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().postJson(_this.api.update, _this.toJSON()).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(data);
	                }
	            });
	        });
	    };
	    Remplacement.prototype.remove = function () {
	        var _this = this;
	        var that = this;
	        return new Promise(function (resolve, reject) {
	            entcore_1.http().delete(_this.api.delete, _this.toJSON()).done(function (data) {
	                if (resolve && (typeof (resolve) === 'function')) {
	                    resolve(that);
	                }
	            })
	                .error(function () {
	                reject(that);
	            });
	        });
	    };
	    Remplacement.prototype.toJSON = function () {
	        return {
	            id_titulaire: this.titulaire.id,
	            libelle_titulaire: this.titulaire.displayName,
	            id_remplacant: this.remplacant.id,
	            libelle_remplacant: this.remplacant.displayName,
	            date_debut: utils.getFormatedDate(this.date_debut, "YYYY-MM-DD"),
	            date_fin: utils.getFormatedDate(this.date_fin, "YYYY-MM-DD"),
	            id_etablissement: this.id_etablissement
	        };
	    };
	    return Remplacement;
	}(entcore_1.Model));
	exports.Remplacement = Remplacement;
	var GestionRemplacement = (function (_super) {
	    __extends(GestionRemplacement, _super);
	    function GestionRemplacement(p) {
	        var _this = _super.call(this) || this;
	        var that = _this;
	        _this.showError = false;
	        _this.selectAll = false;
	        _this.confirmation = false;
	        _this.remplacement = new Remplacement();
	        _this.remplacement.date_debut = new Date();
	        var today = new Date();
	        today.setFullYear(today.getFullYear() + 1);
	        _this.remplacement.date_fin = today;
	        _this.collection(Enseignant, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson(that.api.enseignants).done(function (res) {
	                        this.load(res);
	                        if (resolve && (typeof (resolve) === 'function')) {
	                            resolve();
	                        }
	                    }.bind(_this));
	                });
	            }
	        });
	        _this.collection(Remplacement, {
	            sync: function () {
	                var _this = this;
	                return new Promise(function (resolve, reject) {
	                    entcore_1.http().getJson(that.api.remplacements).done(function (resRemplacements) {
	                        this.removeAll();
	                        for (var i = 0; i < resRemplacements.length; i++) {
	                            var remplacementJson = resRemplacements[i];
	                            var remplacement = new Remplacement();
	                            remplacement.titulaire = new Enseignant();
	                            remplacement.titulaire.id = remplacementJson.id_titulaire;
	                            remplacement.titulaire.displayName = remplacementJson.libelle_titulaire;
	                            remplacement.remplacant = new Enseignant();
	                            remplacement.remplacant.id = remplacementJson.id_remplacant;
	                            remplacement.remplacant.displayName = remplacementJson.libelle_remplacant;
	                            remplacement.date_debut = remplacementJson.date_debut;
	                            remplacement.date_fin = remplacementJson.date_fin;
	                            remplacement.id_etablissement = remplacementJson.id_etablissement;
	                            this.all.push(remplacement);
	                        }
	                        if (resolve && (typeof (resolve) === 'function')) {
	                            resolve();
	                        }
	                    }.bind(_this));
	                });
	            }
	        });
	        _this.selectedRemplacements = [];
	        return _this;
	    }
	    Object.defineProperty(GestionRemplacement.prototype, "api", {
	        get: function () {
	            return {
	                deleteMultiple: '/viescolaire/evaluations/remplacements/delete',
	                //enseignants : '/directory/user/admin/list?structureId='+TBD+'&profile=Teacher',
	                enseignants: '/viescolaire/evaluations/user/list?structureId=' + entcore_1.model.me.structures[0] + '&profile=Teacher',
	                remplacements: '/viescolaire/evaluations/remplacements/list'
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return GestionRemplacement;
	}(entcore_1.Model));
	exports.GestionRemplacement = GestionRemplacement;
	exports.evaluations = new Evaluations();
	entcore_1.model.build = function () {
	    __webpack_require__(20);
	    this.evaluations = exports.evaluations;
	};
	


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * Created by ledunoiss on 20/09/2016.
	 */
	__export(__webpack_require__(11));
	__export(__webpack_require__(12));
	__export(__webpack_require__(13));
	__export(__webpack_require__(14));
	__export(__webpack_require__(15));
	__export(__webpack_require__(16));
	__export(__webpack_require__(17));
	


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var moment = __webpack_require__(5);
	/**
	 * Formatte la date en fonction du format passé en paramètre
	 * @param date Date à formatter
	 * @param format Format de retour de la date
	 * @returns {any|string} Date formattée
	 */
	function getFormatedDate(date, format) {
	    return moment(date).format(format);
	}
	exports.getFormatedDate = getFormatedDate;
	;
	


/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Lance un $scope.$apply() si un $apply ou un $diggest n'est pas déjà en cours. Permet de
	 * supprimer l'erreur de < $scope.$diggest already in progress >
	 * @param that $scope
	 * @returns {Promise<T>} Promesse
	 */
	function safeApply(that) {
	    return new Promise(function (resolve, reject) {
	        var phase = that.$root.$$phase;
	        if (phase === '$apply' || phase === '$digest') {
	            if (resolve && (typeof (resolve) === 'function'))
	                resolve();
	        }
	        else {
	            if (resolve && (typeof (resolve) === 'function'))
	                that.$apply(resolve);
	            else
	                that.$apply();
	        }
	    });
	}
	exports.safeApply = safeApply;
	


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var entcore_1 = __webpack_require__(2);
	/**
	 * Retourne la valeur de la clé i18n
	 * @param key clé i18n
	 * @returns {SVGMatrix|MSCSSMatrix|any|WebKitCSSMatrix|void} Valeur de la clé i18n
	 */
	function translate(key) {
	    return entcore_1.idiom.translate(key);
	}
	exports.translate = translate;
	;
	


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Recherche true si une chaine de caractère contient un mot clef.
	 * La casse est ignorée et la recherche d'un mot clef vide ou contenant que des espaces
	 * retourne false
	 * @param psString la chaine de caractère
	 * @param psKeyword le mot clef recherché
	 * @returns {boolean} true si ça match false sinon
	 */
	function containsIgnoreCase(psString, psKeyword) {
	    if (psKeyword !== undefined) {
	        return psString.toLowerCase().indexOf(psKeyword.toLowerCase()) >= 0 && psKeyword.trim() !== "";
	    }
	    else {
	        return false;
	    }
	}
	exports.containsIgnoreCase = containsIgnoreCase;
	;
	


/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @param arr liste de nombres
	 * @returns la moyenne si la liste n'est pas vide
	 */
	function average(arr) {
	    return _.reduce(arr, function (memo, num) {
	        return memo + num;
	    }, 0) / (arr.length === 0 ? 1 : arr.length);
	}
	exports.average = average;
	


/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Created by ledunoiss on 12/01/2017.
	 */
	/**
	 * Scroll la fenêtre vers une position donnée
	 * @param pos position vers laquelle scroller. La position peut être de type string ('top') ou
	 * de type array ([0,0], [0,500])
	 */
	function scrollTo(pos) {
	    var posToScoll = (typeof pos === 'string' && pos === 'top') ? [0, 0] : pos;
	    window.scrollTo(posToScoll[0], posToScoll[1]);
	}
	exports.scrollTo = scrollTo;
	


/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	function getDefaultPeriode(periodes) {
	    var PeriodeParD = new Date().toISOString();
	    for (var i = 0; i < periodes.length; i++) {
	        if (PeriodeParD >= periodes[i].timestamp_dt && PeriodeParD <= periodes[i].timestamp_fn) {
	            return periodes[i];
	        }
	    }
	    return '';
	}
	exports.getDefaultPeriode = getDefaultPeriode;
	


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v2.2.4 | (c) jQuery Foundation | jquery.org/license */
	!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if("object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype||{},"isPrototypeOf"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c;
	}catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ca(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Fa(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ba.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Oa(a,b,c||(g?"border":"content"),d,f)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),
	void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g,hb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(hb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b)}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \t]*([^\r\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\/\//,sb={},tb={},ub="*/".concat("*"),vb=d.createElement("a");vb.href=jb.href;function wb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:"GET",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ub,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+"").replace(mb,"").replace(rb,jb.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+"//"+vb.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,"$1_="+kb++):f+(lb.test(f)?"&":"?")+"_="+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+ub+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\[\]$/,Db=/\r?\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Gb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join("&").replace(Bb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,"\r\n")}}):{name:b.name,value:c.replace(Db,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&"withCredentials"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Jb.pop()||n.expando+"_"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,"$1"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"=="function"&&__webpack_require__(19)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});


/***/ },
/* 19 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * angular-chart.js - An angular.js wrapper for Chart.js
	 * http://jtblin.github.io/angular-chart.js/
	 * Version: 1.1.1
	 *
	 * Copyright 2016 Jerome Touffe-Blin
	 * Released under the BSD-2-Clause license
	 * https://github.com/jtblin/angular-chart.js/blob/master/LICENSE
	 */
	(function (factory) {
	  'use strict';
	  if (true) {
	    // Node/CommonJS
	    module.exports = factory(
	      typeof angular !== 'undefined' ? angular : __webpack_require__(21),
	      typeof Chart !== 'undefined' ? Chart : __webpack_require__(22));
	  }  else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(['angular', 'chart'], factory);
	  } else {
	    // Browser globals
	    if (typeof angular === 'undefined') {
	        throw new Error('AngularJS framework needs to be included, see https://angularjs.org/');
	    } else if (typeof Chart === 'undefined') {
	      throw new Error('Chart.js library needs to be included, see http://jtblin.github.io/angular-chart.js/');
	    }
	    factory(angular, Chart);
	  }
	}(function (angular, Chart) {
	  'use strict';
	
	  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';
	  Chart.defaults.global.tooltips.mode = 'label';
	  Chart.defaults.global.elements.line.borderWidth = 2;
	  Chart.defaults.global.elements.rectangle.borderWidth = 2;
	  Chart.defaults.global.legend.display = false;
	  Chart.defaults.global.colors = [
	    '#97BBCD', // blue
	    '#DCDCDC', // light grey
	    '#F7464A', // red
	    '#46BFBD', // green
	    '#FDB45C', // yellow
	    '#949FB1', // grey
	    '#4D5360'  // dark grey
	  ];
	
	  var useExcanvas = typeof window.G_vmlCanvasManager === 'object' &&
	    window.G_vmlCanvasManager !== null &&
	    typeof window.G_vmlCanvasManager.initElement === 'function';
	
	  if (useExcanvas) Chart.defaults.global.animation = false;
	
	  return angular.module('chart.js', [])
	    .provider('ChartJs', ChartJsProvider)
	    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])
	    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])
	    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('line'); }])
	    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bar'); }])
	    .directive('chartHorizontalBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('horizontalBar'); }])
	    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('radar'); }])
	    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('doughnut'); }])
	    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('pie'); }])
	    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('polarArea'); }])
	    .directive('chartBubble', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bubble'); }])
	    .name;
	
	  /**
	   * Wrapper for chart.js
	   * Allows configuring chart js using the provider
	   *
	   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {
	   *   ChartJsProvider.setOptions({ responsive: false });
	   *   ChartJsProvider.setOptions('Line', { responsive: true });
	   * })))
	   */
	  function ChartJsProvider () {
	    var options = { responsive: true };
	    var ChartJs = {
	      Chart: Chart,
	      getOptions: function (type) {
	        var typeOptions = type && options[type] || {};
	        return angular.extend({}, options, typeOptions);
	      }
	    };
	
	    /**
	     * Allow to set global options during configuration
	     */
	    this.setOptions = function (type, customOptions) {
	      // If no type was specified set option for the global object
	      if (! customOptions) {
	        customOptions = type;
	        options = angular.merge(options, customOptions);
	      } else {
	        // Set options for the specific chart
	        options[type] = angular.merge(options[type] || {}, customOptions);
	      }
	
	      angular.merge(ChartJs.Chart.defaults, options);
	    };
	
	    this.$get = function () {
	      return ChartJs;
	    };
	  }
	
	  function ChartJsFactory (ChartJs, $timeout) {
	    return function chart (type) {
	      return {
	        restrict: 'CA',
	        scope: {
	          chartGetColor: '=?',
	          chartType: '=',
	          chartData: '=?',
	          chartLabels: '=?',
	          chartOptions: '=?',
	          chartSeries: '=?',
	          chartColors: '=?',
	          chartClick: '=?',
	          chartHover: '=?',
	          chartDatasetOverride: '=?'
	        },
	        link: function (scope, elem/*, attrs */) {
	          if (useExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);
	
	          // Order of setting "watch" matter
	          scope.$watch('chartData', watchData, true);
	          scope.$watch('chartSeries', watchOther, true);
	          scope.$watch('chartLabels', watchOther, true);
	          scope.$watch('chartOptions', watchOther, true);
	          scope.$watch('chartColors', watchOther, true);
	          scope.$watch('chartDatasetOverride', watchOther, true);
	          scope.$watch('chartType', watchType, false);
	
	          scope.$on('$destroy', function () {
	            destroyChart(scope);
	          });
	
	          scope.$on('$resize', function () {
	            if (scope.chart) scope.chart.resize();
	          });
	
	          function watchData (newVal, oldVal) {
	            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) {
	              destroyChart(scope);
	              return;
	            }
	            var chartType = type || scope.chartType;
	            if (! chartType) return;
	
	            if (scope.chart && canUpdateChart(newVal, oldVal))
	              return updateChart(newVal, scope);
	
	            createChart(chartType, scope, elem);
	          }
	
	          function watchOther (newVal, oldVal) {
	            if (isEmpty(newVal)) return;
	            if (angular.equals(newVal, oldVal)) return;
	            var chartType = type || scope.chartType;
	            if (! chartType) return;
	
	            // chart.update() doesn't work for series and labels
	            // so we have to re-create the chart entirely
	            createChart(chartType, scope, elem);
	          }
	
	          function watchType (newVal, oldVal) {
	            if (isEmpty(newVal)) return;
	            if (angular.equals(newVal, oldVal)) return;
	            createChart(newVal, scope, elem);
	          }
	        }
	      };
	    };
	
	    function createChart (type, scope, elem) {
	      var options = getChartOptions(type, scope);
	      if (! hasData(scope) || ! canDisplay(type, scope, elem, options)) return;
	
	      var cvs = elem[0];
	      var ctx = cvs.getContext('2d');
	
	      scope.chartGetColor = getChartColorFn(scope);
	      var data = getChartData(type, scope);
	      // Destroy old chart if it exists to avoid ghost charts issue
	      // https://github.com/jtblin/angular-chart.js/issues/187
	      destroyChart(scope);
	
	      scope.chart = new ChartJs.Chart(ctx, {
	        type: type,
	        data: data,
	        options: options
	      });
	      scope.$emit('chart-create', scope.chart);
	      bindEvents(cvs, scope);
	    }
	
	    function canUpdateChart (newVal, oldVal) {
	      if (newVal && oldVal && newVal.length && oldVal.length) {
	        return Array.isArray(newVal[0]) ?
	        newVal.length === oldVal.length && newVal.every(function (element, index) {
	          return element.length === oldVal[index].length; }) :
	          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;
	      }
	      return false;
	    }
	
	    function sum (carry, val) {
	      return carry + val;
	    }
	
	    function getEventHandler (scope, action, triggerOnlyOnChange) {
	      var lastState = {
	        point: void 0,
	        points: void 0
	      };
	      return function (evt) {
	        var atEvent = scope.chart.getElementAtEvent || scope.chart.getPointAtEvent;
	        var atEvents = scope.chart.getElementsAtEvent || scope.chart.getPointsAtEvent;
	        if (atEvents) {
	          var points = atEvents.call(scope.chart, evt);
	          var point = atEvent ? atEvent.call(scope.chart, evt)[0] : void 0;
	
	          if (triggerOnlyOnChange === false ||
	            (! angular.equals(lastState.points, points) && ! angular.equals(lastState.point, point))
	          ) {
	            lastState.point = point;
	            lastState.points = points;
	            scope[action](points, evt, point);
	          }
	        }
	      };
	    }
	
	    function getColors (type, scope) {
	      var colors = angular.copy(scope.chartColors ||
	        ChartJs.getOptions(type).chartColors ||
	        Chart.defaults.global.colors
	      );
	      var notEnoughColors = colors.length < scope.chartData.length;
	      while (colors.length < scope.chartData.length) {
	        colors.push(scope.chartGetColor());
	      }
	      // mutate colors in this case as we don't want
	      // the colors to change on each refresh
	      if (notEnoughColors) scope.chartColors = colors;
	      return colors.map(convertColor);
	    }
	
	    function convertColor (color) {
	      // Allows RGB and RGBA colors to be input as a string: e.g.: "rgb(159,204,0)", "rgba(159,204,0, 0.5)"
	      if (typeof color === 'string' && color[0] === 'r') return getColor(rgbStringToRgb(color));
	      // Allows hex colors to be input as a string.
	      if (typeof color === 'string' && color[0] === '#') return getColor(hexToRgb(color.substr(1)));
	      // Allows colors to be input as an object, bypassing getColor() entirely
	      if (typeof color === 'object' && color !== null) return color;
	      return getRandomColor();
	    }
	
	    function getRandomColor () {
	      var color = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
	      return getColor(color);
	    }
	
	    function getColor (color) {
	      var alpha = color[3] || 1;
	      color = color.slice(0, 3);
	      return {
	        backgroundColor: rgba(color, 0.2),
	        pointBackgroundColor: rgba(color, alpha),
	        pointHoverBackgroundColor: rgba(color, 0.8),
	        borderColor: rgba(color, alpha),
	        pointBorderColor: '#fff',
	        pointHoverBorderColor: rgba(color, alpha)
	      };
	    }
	
	    function getRandomInt (min, max) {
	      return Math.floor(Math.random() * (max - min + 1)) + min;
	    }
	
	    function rgba (color, alpha) {
	      // rgba not supported by IE8
	      return useExcanvas ? 'rgb(' + color.join(',') + ')' : 'rgba(' + color.concat(alpha).join(',') + ')';
	    }
	
	    // Credit: http://stackoverflow.com/a/11508164/1190235
	    function hexToRgb (hex) {
	      var bigint = parseInt(hex, 16),
	        r = (bigint >> 16) & 255,
	        g = (bigint >> 8) & 255,
	        b = bigint & 255;
	
	      return [r, g, b];
	    }
	
	    function rgbStringToRgb (color) {
	      var match = color.match(/^rgba?\(([\d,.]+)\)$/);
	      if (! match) throw new Error('Cannot parse rgb value');
	      color = match[1].split(',');
	      return color.map(Number);
	    }
	
	    function hasData (scope) {
	      return scope.chartData && scope.chartData.length;
	    }
	
	    function getChartColorFn (scope) {
	      return typeof scope.chartGetColor === 'function' ? scope.chartGetColor : getRandomColor;
	    }
	
	    function getChartData (type, scope) {
	      var colors = getColors(type, scope);
	      return Array.isArray(scope.chartData[0]) ?
	        getDataSets(scope.chartLabels, scope.chartData, scope.chartSeries || [], colors, scope.chartDatasetOverride) :
	        getData(scope.chartLabels, scope.chartData, colors, scope.chartDatasetOverride);
	    }
	
	    function getDataSets (labels, data, series, colors, datasetOverride) {
	      return {
	        labels: labels,
	        datasets: data.map(function (item, i) {
	          var dataset = angular.extend({}, colors[i], {
	            label: series[i],
	            data: item
	          });
	          if (datasetOverride && datasetOverride.length >= i) {
	            angular.merge(dataset, datasetOverride[i]);
	          }
	          return dataset;
	        })
	      };
	    }
	
	    function getData (labels, data, colors, datasetOverride) {
	      var dataset = {
	        labels: labels,
	        datasets: [{
	          data: data,
	          backgroundColor: colors.map(function (color) {
	            return color.pointBackgroundColor;
	          }),
	          hoverBackgroundColor: colors.map(function (color) {
	            return color.backgroundColor;
	          })
	        }]
	      };
	      if (datasetOverride) {
	        angular.merge(dataset.datasets[0], datasetOverride);
	      }
	      return dataset;
	    }
	
	    function getChartOptions (type, scope) {
	      return angular.extend({}, ChartJs.getOptions(type), scope.chartOptions);
	    }
	
	    function bindEvents (cvs, scope) {
	      cvs.onclick = scope.chartClick ? getEventHandler(scope, 'chartClick', false) : angular.noop;
	      cvs.onmousemove = scope.chartHover ? getEventHandler(scope, 'chartHover', true) : angular.noop;
	    }
	
	    function updateChart (values, scope) {
	      if (Array.isArray(scope.chartData[0])) {
	        scope.chart.data.datasets.forEach(function (dataset, i) {
	          dataset.data = values[i];
	        });
	      } else {
	        scope.chart.data.datasets[0].data = values;
	      }
	
	      scope.chart.update();
	      scope.$emit('chart-update', scope.chart);
	    }
	
	    function isEmpty (value) {
	      return ! value ||
	        (Array.isArray(value) && ! value.length) ||
	        (typeof value === 'object' && ! Object.keys(value).length);
	    }
	
	    function canDisplay (type, scope, elem, options) {
	      // TODO: check parent?
	      if (options.responsive && elem[0].clientHeight === 0) {
	        $timeout(function () {
	          createChart(type, scope, elem);
	        }, 50, false);
	        return false;
	      }
	      return true;
	    }
	
	    function destroyChart(scope) {
	      if(! scope.chart) return;
	      scope.chart.destroy();
	      scope.$emit('chart-destroy', scope.chart);
	    }
	  }
	}));


/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = angular;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/*!
	 * Chart.js
	 * http://chartjs.org/
	 * Version: 2.5.0
	 *
	 * Copyright 2017 Nick Downie
	 * Released under the MIT license
	 * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md
	 */
	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Chart = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	/* MIT license */
	var colorNames = require(5);
	
	module.exports = {
	   getRgba: getRgba,
	   getHsla: getHsla,
	   getRgb: getRgb,
	   getHsl: getHsl,
	   getHwb: getHwb,
	   getAlpha: getAlpha,
	
	   hexString: hexString,
	   rgbString: rgbString,
	   rgbaString: rgbaString,
	   percentString: percentString,
	   percentaString: percentaString,
	   hslString: hslString,
	   hslaString: hslaString,
	   hwbString: hwbString,
	   keyword: keyword
	}
	
	function getRgba(string) {
	   if (!string) {
	      return;
	   }
	   var abbr =  /^#([a-fA-F0-9]{3})$/,
	       hex =  /^#([a-fA-F0-9]{6})$/,
	       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
	       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
	       keyword = /(\w+)/;
	
	   var rgb = [0, 0, 0],
	       a = 1,
	       match = string.match(abbr);
	   if (match) {
	      match = match[1];
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match[i] + match[i], 16);
	      }
	   }
	   else if (match = string.match(hex)) {
	      match = match[1];
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
	      }
	   }
	   else if (match = string.match(rgba)) {
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match[i + 1]);
	      }
	      a = parseFloat(match[4]);
	   }
	   else if (match = string.match(per)) {
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
	      }
	      a = parseFloat(match[4]);
	   }
	   else if (match = string.match(keyword)) {
	      if (match[1] == "transparent") {
	         return [0, 0, 0, 0];
	      }
	      rgb = colorNames[match[1]];
	      if (!rgb) {
	         return;
	      }
	   }
	
	   for (var i = 0; i < rgb.length; i++) {
	      rgb[i] = scale(rgb[i], 0, 255);
	   }
	   if (!a && a != 0) {
	      a = 1;
	   }
	   else {
	      a = scale(a, 0, 1);
	   }
	   rgb[3] = a;
	   return rgb;
	}
	
	function getHsla(string) {
	   if (!string) {
	      return;
	   }
	   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hsl);
	   if (match) {
	      var alpha = parseFloat(match[4]);
	      var h = scale(parseInt(match[1]), 0, 360),
	          s = scale(parseFloat(match[2]), 0, 100),
	          l = scale(parseFloat(match[3]), 0, 100),
	          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
	      return [h, s, l, a];
	   }
	}
	
	function getHwb(string) {
	   if (!string) {
	      return;
	   }
	   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hwb);
	   if (match) {
	    var alpha = parseFloat(match[4]);
	      var h = scale(parseInt(match[1]), 0, 360),
	          w = scale(parseFloat(match[2]), 0, 100),
	          b = scale(parseFloat(match[3]), 0, 100),
	          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
	      return [h, w, b, a];
	   }
	}
	
	function getRgb(string) {
	   var rgba = getRgba(string);
	   return rgba && rgba.slice(0, 3);
	}
	
	function getHsl(string) {
	  var hsla = getHsla(string);
	  return hsla && hsla.slice(0, 3);
	}
	
	function getAlpha(string) {
	   var vals = getRgba(string);
	   if (vals) {
	      return vals[3];
	   }
	   else if (vals = getHsla(string)) {
	      return vals[3];
	   }
	   else if (vals = getHwb(string)) {
	      return vals[3];
	   }
	}
	
	// generators
	function hexString(rgb) {
	   return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
	              + hexDouble(rgb[2]);
	}
	
	function rgbString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
	      return rgbaString(rgba, alpha);
	   }
	   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
	}
	
	function rgbaString(rgba, alpha) {
	   if (alpha === undefined) {
	      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
	   }
	   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
	           + ", " + alpha + ")";
	}
	
	function percentString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
	      return percentaString(rgba, alpha);
	   }
	   var r = Math.round(rgba[0]/255 * 100),
	       g = Math.round(rgba[1]/255 * 100),
	       b = Math.round(rgba[2]/255 * 100);
	
	   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
	}
	
	function percentaString(rgba, alpha) {
	   var r = Math.round(rgba[0]/255 * 100),
	       g = Math.round(rgba[1]/255 * 100),
	       b = Math.round(rgba[2]/255 * 100);
	   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
	}
	
	function hslString(hsla, alpha) {
	   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
	      return hslaString(hsla, alpha);
	   }
	   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
	}
	
	function hslaString(hsla, alpha) {
	   if (alpha === undefined) {
	      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
	   }
	   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
	           + alpha + ")";
	}
	
	// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
	// (hwb have alpha optional & 1 is default value)
	function hwbString(hwb, alpha) {
	   if (alpha === undefined) {
	      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
	   }
	   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
	           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
	}
	
	function keyword(rgb) {
	  return reverseNames[rgb.slice(0, 3)];
	}
	
	// helpers
	function scale(num, min, max) {
	   return Math.min(Math.max(min, num), max);
	}
	
	function hexDouble(num) {
	  var str = num.toString(16).toUpperCase();
	  return (str.length < 2) ? "0" + str : str;
	}
	
	
	//create a list of reverse color names
	var reverseNames = {};
	for (var name in colorNames) {
	   reverseNames[colorNames[name]] = name;
	}
	
	},{"5":5}],2:[function(require,module,exports){
	/* MIT license */
	var convert = require(4);
	var string = require(1);
	
	var Color = function (obj) {
		if (obj instanceof Color) {
			return obj;
		}
		if (!(this instanceof Color)) {
			return new Color(obj);
		}
	
		this.values = {
			rgb: [0, 0, 0],
			hsl: [0, 0, 0],
			hsv: [0, 0, 0],
			hwb: [0, 0, 0],
			cmyk: [0, 0, 0, 0],
			alpha: 1
		};
	
		// parse Color() argument
		var vals;
		if (typeof obj === 'string') {
			vals = string.getRgba(obj);
			if (vals) {
				this.setValues('rgb', vals);
			} else if (vals = string.getHsla(obj)) {
				this.setValues('hsl', vals);
			} else if (vals = string.getHwb(obj)) {
				this.setValues('hwb', vals);
			} else {
				throw new Error('Unable to parse color from string "' + obj + '"');
			}
		} else if (typeof obj === 'object') {
			vals = obj;
			if (vals.r !== undefined || vals.red !== undefined) {
				this.setValues('rgb', vals);
			} else if (vals.l !== undefined || vals.lightness !== undefined) {
				this.setValues('hsl', vals);
			} else if (vals.v !== undefined || vals.value !== undefined) {
				this.setValues('hsv', vals);
			} else if (vals.w !== undefined || vals.whiteness !== undefined) {
				this.setValues('hwb', vals);
			} else if (vals.c !== undefined || vals.cyan !== undefined) {
				this.setValues('cmyk', vals);
			} else {
				throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
			}
		}
	};
	
	Color.prototype = {
		rgb: function () {
			return this.setSpace('rgb', arguments);
		},
		hsl: function () {
			return this.setSpace('hsl', arguments);
		},
		hsv: function () {
			return this.setSpace('hsv', arguments);
		},
		hwb: function () {
			return this.setSpace('hwb', arguments);
		},
		cmyk: function () {
			return this.setSpace('cmyk', arguments);
		},
	
		rgbArray: function () {
			return this.values.rgb;
		},
		hslArray: function () {
			return this.values.hsl;
		},
		hsvArray: function () {
			return this.values.hsv;
		},
		hwbArray: function () {
			var values = this.values;
			if (values.alpha !== 1) {
				return values.hwb.concat([values.alpha]);
			}
			return values.hwb;
		},
		cmykArray: function () {
			return this.values.cmyk;
		},
		rgbaArray: function () {
			var values = this.values;
			return values.rgb.concat([values.alpha]);
		},
		hslaArray: function () {
			var values = this.values;
			return values.hsl.concat([values.alpha]);
		},
		alpha: function (val) {
			if (val === undefined) {
				return this.values.alpha;
			}
			this.setValues('alpha', val);
			return this;
		},
	
		red: function (val) {
			return this.setChannel('rgb', 0, val);
		},
		green: function (val) {
			return this.setChannel('rgb', 1, val);
		},
		blue: function (val) {
			return this.setChannel('rgb', 2, val);
		},
		hue: function (val) {
			if (val) {
				val %= 360;
				val = val < 0 ? 360 + val : val;
			}
			return this.setChannel('hsl', 0, val);
		},
		saturation: function (val) {
			return this.setChannel('hsl', 1, val);
		},
		lightness: function (val) {
			return this.setChannel('hsl', 2, val);
		},
		saturationv: function (val) {
			return this.setChannel('hsv', 1, val);
		},
		whiteness: function (val) {
			return this.setChannel('hwb', 1, val);
		},
		blackness: function (val) {
			return this.setChannel('hwb', 2, val);
		},
		value: function (val) {
			return this.setChannel('hsv', 2, val);
		},
		cyan: function (val) {
			return this.setChannel('cmyk', 0, val);
		},
		magenta: function (val) {
			return this.setChannel('cmyk', 1, val);
		},
		yellow: function (val) {
			return this.setChannel('cmyk', 2, val);
		},
		black: function (val) {
			return this.setChannel('cmyk', 3, val);
		},
	
		hexString: function () {
			return string.hexString(this.values.rgb);
		},
		rgbString: function () {
			return string.rgbString(this.values.rgb, this.values.alpha);
		},
		rgbaString: function () {
			return string.rgbaString(this.values.rgb, this.values.alpha);
		},
		percentString: function () {
			return string.percentString(this.values.rgb, this.values.alpha);
		},
		hslString: function () {
			return string.hslString(this.values.hsl, this.values.alpha);
		},
		hslaString: function () {
			return string.hslaString(this.values.hsl, this.values.alpha);
		},
		hwbString: function () {
			return string.hwbString(this.values.hwb, this.values.alpha);
		},
		keyword: function () {
			return string.keyword(this.values.rgb, this.values.alpha);
		},
	
		rgbNumber: function () {
			var rgb = this.values.rgb;
			return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
		},
	
		luminosity: function () {
			// http://www.w3.org/TR/WCAG20/#relativeluminancedef
			var rgb = this.values.rgb;
			var lum = [];
			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
			}
			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},
	
		contrast: function (color2) {
			// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();
			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}
			return (lum2 + 0.05) / (lum1 + 0.05);
		},
	
		level: function (color2) {
			var contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7.1) {
				return 'AAA';
			}
	
			return (contrastRatio >= 4.5) ? 'AA' : '';
		},
	
		dark: function () {
			// YIQ equation from http://24ways.org/2010/calculating-color-contrast
			var rgb = this.values.rgb;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},
	
		light: function () {
			return !this.dark();
		},
	
		negate: function () {
			var rgb = [];
			for (var i = 0; i < 3; i++) {
				rgb[i] = 255 - this.values.rgb[i];
			}
			this.setValues('rgb', rgb);
			return this;
		},
	
		lighten: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] += hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		darken: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] -= hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		saturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] += hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		desaturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] -= hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		whiten: function (ratio) {
			var hwb = this.values.hwb;
			hwb[1] += hwb[1] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},
	
		blacken: function (ratio) {
			var hwb = this.values.hwb;
			hwb[2] += hwb[2] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},
	
		greyscale: function () {
			var rgb = this.values.rgb;
			// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			this.setValues('rgb', [val, val, val]);
			return this;
		},
	
		clearer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha - (alpha * ratio));
			return this;
		},
	
		opaquer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha + (alpha * ratio));
			return this;
		},
	
		rotate: function (degrees) {
			var hsl = this.values.hsl;
			var hue = (hsl[0] + degrees) % 360;
			hsl[0] = hue < 0 ? 360 + hue : hue;
			this.setValues('hsl', hsl);
			return this;
		},
	
		/**
		 * Ported from sass implementation in C
		 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		 */
		mix: function (mixinColor, weight) {
			var color1 = this;
			var color2 = mixinColor;
			var p = weight === undefined ? 0.5 : weight;
	
			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();
	
			var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;
	
			return this
				.rgb(
					w1 * color1.red() + w2 * color2.red(),
					w1 * color1.green() + w2 * color2.green(),
					w1 * color1.blue() + w2 * color2.blue()
				)
				.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
		},
	
		toJSON: function () {
			return this.rgb();
		},
	
		clone: function () {
			// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
			// making the final build way to big to embed in Chart.js. So let's do it manually,
			// assuming that values to clone are 1 dimension arrays containing only numbers,
			// except 'alpha' which is a number.
			var result = new Color();
			var source = this.values;
			var target = result.values;
			var value, type;
	
			for (var prop in source) {
				if (source.hasOwnProperty(prop)) {
					value = source[prop];
					type = ({}).toString.call(value);
					if (type === '[object Array]') {
						target[prop] = value.slice(0);
					} else if (type === '[object Number]') {
						target[prop] = value;
					} else {
						console.error('unexpected color value:', value);
					}
				}
			}
	
			return result;
		}
	};
	
	Color.prototype.spaces = {
		rgb: ['red', 'green', 'blue'],
		hsl: ['hue', 'saturation', 'lightness'],
		hsv: ['hue', 'saturation', 'value'],
		hwb: ['hue', 'whiteness', 'blackness'],
		cmyk: ['cyan', 'magenta', 'yellow', 'black']
	};
	
	Color.prototype.maxes = {
		rgb: [255, 255, 255],
		hsl: [360, 100, 100],
		hsv: [360, 100, 100],
		hwb: [360, 100, 100],
		cmyk: [100, 100, 100, 100]
	};
	
	Color.prototype.getValues = function (space) {
		var values = this.values;
		var vals = {};
	
		for (var i = 0; i < space.length; i++) {
			vals[space.charAt(i)] = values[space][i];
		}
	
		if (values.alpha !== 1) {
			vals.a = values.alpha;
		}
	
		// {r: 255, g: 255, b: 255, a: 0.4}
		return vals;
	};
	
	Color.prototype.setValues = function (space, vals) {
		var values = this.values;
		var spaces = this.spaces;
		var maxes = this.maxes;
		var alpha = 1;
		var i;
	
		if (space === 'alpha') {
			alpha = vals;
		} else if (vals.length) {
			// [10, 10, 10]
			values[space] = vals.slice(0, space.length);
			alpha = vals[space.length];
		} else if (vals[space.charAt(0)] !== undefined) {
			// {r: 10, g: 10, b: 10}
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[space.charAt(i)];
			}
	
			alpha = vals.a;
		} else if (vals[spaces[space][0]] !== undefined) {
			// {red: 10, green: 10, blue: 10}
			var chans = spaces[space];
	
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[chans[i]];
			}
	
			alpha = vals.alpha;
		}
	
		values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));
	
		if (space === 'alpha') {
			return false;
		}
	
		var capped;
	
		// cap values of the space prior converting all values
		for (i = 0; i < space.length; i++) {
			capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
			values[space][i] = Math.round(capped);
		}
	
		// convert to all the other color spaces
		for (var sname in spaces) {
			if (sname !== space) {
				values[sname] = convert[space][sname](values[space]);
			}
		}
	
		return true;
	};
	
	Color.prototype.setSpace = function (space, args) {
		var vals = args[0];
	
		if (vals === undefined) {
			// color.rgb()
			return this.getValues(space);
		}
	
		// color.rgb(10, 10, 10)
		if (typeof vals === 'number') {
			vals = Array.prototype.slice.call(args);
		}
	
		this.setValues(space, vals);
		return this;
	};
	
	Color.prototype.setChannel = function (space, index, val) {
		var svalues = this.values[space];
		if (val === undefined) {
			// color.red()
			return svalues[index];
		} else if (val === svalues[index]) {
			// color.red(color.red())
			return this;
		}
	
		// color.red(100)
		svalues[index] = val;
		this.setValues(space, svalues);
	
		return this;
	};
	
	if (typeof window !== 'undefined') {
		window.Color = Color;
	}
	
	module.exports = Color;
	
	},{"1":1,"4":4}],3:[function(require,module,exports){
	/* MIT license */
	
	module.exports = {
	  rgb2hsl: rgb2hsl,
	  rgb2hsv: rgb2hsv,
	  rgb2hwb: rgb2hwb,
	  rgb2cmyk: rgb2cmyk,
	  rgb2keyword: rgb2keyword,
	  rgb2xyz: rgb2xyz,
	  rgb2lab: rgb2lab,
	  rgb2lch: rgb2lch,
	
	  hsl2rgb: hsl2rgb,
	  hsl2hsv: hsl2hsv,
	  hsl2hwb: hsl2hwb,
	  hsl2cmyk: hsl2cmyk,
	  hsl2keyword: hsl2keyword,
	
	  hsv2rgb: hsv2rgb,
	  hsv2hsl: hsv2hsl,
	  hsv2hwb: hsv2hwb,
	  hsv2cmyk: hsv2cmyk,
	  hsv2keyword: hsv2keyword,
	
	  hwb2rgb: hwb2rgb,
	  hwb2hsl: hwb2hsl,
	  hwb2hsv: hwb2hsv,
	  hwb2cmyk: hwb2cmyk,
	  hwb2keyword: hwb2keyword,
	
	  cmyk2rgb: cmyk2rgb,
	  cmyk2hsl: cmyk2hsl,
	  cmyk2hsv: cmyk2hsv,
	  cmyk2hwb: cmyk2hwb,
	  cmyk2keyword: cmyk2keyword,
	
	  keyword2rgb: keyword2rgb,
	  keyword2hsl: keyword2hsl,
	  keyword2hsv: keyword2hsv,
	  keyword2hwb: keyword2hwb,
	  keyword2cmyk: keyword2cmyk,
	  keyword2lab: keyword2lab,
	  keyword2xyz: keyword2xyz,
	
	  xyz2rgb: xyz2rgb,
	  xyz2lab: xyz2lab,
	  xyz2lch: xyz2lch,
	
	  lab2xyz: lab2xyz,
	  lab2rgb: lab2rgb,
	  lab2lch: lab2lch,
	
	  lch2lab: lch2lab,
	  lch2xyz: lch2xyz,
	  lch2rgb: lch2rgb
	}
	
	
	function rgb2hsl(rgb) {
	  var r = rgb[0]/255,
	      g = rgb[1]/255,
	      b = rgb[2]/255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, l;
	
	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g)/ delta;
	
	  h = Math.min(h * 60, 360);
	
	  if (h < 0)
	    h += 360;
	
	  l = (min + max) / 2;
	
	  if (max == min)
	    s = 0;
	  else if (l <= 0.5)
	    s = delta / (max + min);
	  else
	    s = delta / (2 - max - min);
	
	  return [h, s * 100, l * 100];
	}
	
	function rgb2hsv(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, v;
	
	  if (max == 0)
	    s = 0;
	  else
	    s = (delta/max * 1000)/10;
	
	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g) / delta;
	
	  h = Math.min(h * 60, 360);
	
	  if (h < 0)
	    h += 360;
	
	  v = ((max / 255) * 1000) / 10;
	
	  return [h, s, v];
	}
	
	function rgb2hwb(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      h = rgb2hsl(rgb)[0],
	      w = 1/255 * Math.min(r, Math.min(g, b)),
	      b = 1 - 1/255 * Math.max(r, Math.max(g, b));
	
	  return [h, w * 100, b * 100];
	}
	
	function rgb2cmyk(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255,
	      c, m, y, k;
	
	  k = Math.min(1 - r, 1 - g, 1 - b);
	  c = (1 - r - k) / (1 - k) || 0;
	  m = (1 - g - k) / (1 - k) || 0;
	  y = (1 - b - k) / (1 - k) || 0;
	  return [c * 100, m * 100, y * 100, k * 100];
	}
	
	function rgb2keyword(rgb) {
	  return reverseKeywords[JSON.stringify(rgb)];
	}
	
	function rgb2xyz(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255;
	
	  // assume sRGB
	  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
	
	  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
	
	  return [x * 100, y *100, z * 100];
	}
	
	function rgb2lab(rgb) {
	  var xyz = rgb2xyz(rgb),
	        x = xyz[0],
	        y = xyz[1],
	        z = xyz[2],
	        l, a, b;
	
	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;
	
	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
	
	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);
	
	  return [l, a, b];
	}
	
	function rgb2lch(args) {
	  return lab2lch(rgb2lab(args));
	}
	
	function hsl2rgb(hsl) {
	  var h = hsl[0] / 360,
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      t1, t2, t3, rgb, val;
	
	  if (s == 0) {
	    val = l * 255;
	    return [val, val, val];
	  }
	
	  if (l < 0.5)
	    t2 = l * (1 + s);
	  else
	    t2 = l + s - l * s;
	  t1 = 2 * l - t2;
	
	  rgb = [0, 0, 0];
	  for (var i = 0; i < 3; i++) {
	    t3 = h + 1 / 3 * - (i - 1);
	    t3 < 0 && t3++;
	    t3 > 1 && t3--;
	
	    if (6 * t3 < 1)
	      val = t1 + (t2 - t1) * 6 * t3;
	    else if (2 * t3 < 1)
	      val = t2;
	    else if (3 * t3 < 2)
	      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
	    else
	      val = t1;
	
	    rgb[i] = val * 255;
	  }
	
	  return rgb;
	}
	
	function hsl2hsv(hsl) {
	  var h = hsl[0],
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      sv, v;
	
	  if(l === 0) {
	      // no need to do calc on black
	      // also avoids divide by 0 error
	      return [0, 0, 0];
	  }
	
	  l *= 2;
	  s *= (l <= 1) ? l : 2 - l;
	  v = (l + s) / 2;
	  sv = (2 * s) / (l + s);
	  return [h, sv * 100, v * 100];
	}
	
	function hsl2hwb(args) {
	  return rgb2hwb(hsl2rgb(args));
	}
	
	function hsl2cmyk(args) {
	  return rgb2cmyk(hsl2rgb(args));
	}
	
	function hsl2keyword(args) {
	  return rgb2keyword(hsl2rgb(args));
	}
	
	
	function hsv2rgb(hsv) {
	  var h = hsv[0] / 60,
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      hi = Math.floor(h) % 6;
	
	  var f = h - Math.floor(h),
	      p = 255 * v * (1 - s),
	      q = 255 * v * (1 - (s * f)),
	      t = 255 * v * (1 - (s * (1 - f))),
	      v = 255 * v;
	
	  switch(hi) {
	    case 0:
	      return [v, t, p];
	    case 1:
	      return [q, v, p];
	    case 2:
	      return [p, v, t];
	    case 3:
	      return [p, q, v];
	    case 4:
	      return [t, p, v];
	    case 5:
	      return [v, p, q];
	  }
	}
	
	function hsv2hsl(hsv) {
	  var h = hsv[0],
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      sl, l;
	
	  l = (2 - s) * v;
	  sl = s * v;
	  sl /= (l <= 1) ? l : 2 - l;
	  sl = sl || 0;
	  l /= 2;
	  return [h, sl * 100, l * 100];
	}
	
	function hsv2hwb(args) {
	  return rgb2hwb(hsv2rgb(args))
	}
	
	function hsv2cmyk(args) {
	  return rgb2cmyk(hsv2rgb(args));
	}
	
	function hsv2keyword(args) {
	  return rgb2keyword(hsv2rgb(args));
	}
	
	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	function hwb2rgb(hwb) {
	  var h = hwb[0] / 360,
	      wh = hwb[1] / 100,
	      bl = hwb[2] / 100,
	      ratio = wh + bl,
	      i, v, f, n;
	
	  // wh + bl cant be > 1
	  if (ratio > 1) {
	    wh /= ratio;
	    bl /= ratio;
	  }
	
	  i = Math.floor(6 * h);
	  v = 1 - bl;
	  f = 6 * h - i;
	  if ((i & 0x01) != 0) {
	    f = 1 - f;
	  }
	  n = wh + f * (v - wh);  // linear interpolation
	
	  switch (i) {
	    default:
	    case 6:
	    case 0: r = v; g = n; b = wh; break;
	    case 1: r = n; g = v; b = wh; break;
	    case 2: r = wh; g = v; b = n; break;
	    case 3: r = wh; g = n; b = v; break;
	    case 4: r = n; g = wh; b = v; break;
	    case 5: r = v; g = wh; b = n; break;
	  }
	
	  return [r * 255, g * 255, b * 255];
	}
	
	function hwb2hsl(args) {
	  return rgb2hsl(hwb2rgb(args));
	}
	
	function hwb2hsv(args) {
	  return rgb2hsv(hwb2rgb(args));
	}
	
	function hwb2cmyk(args) {
	  return rgb2cmyk(hwb2rgb(args));
	}
	
	function hwb2keyword(args) {
	  return rgb2keyword(hwb2rgb(args));
	}
	
	function cmyk2rgb(cmyk) {
	  var c = cmyk[0] / 100,
	      m = cmyk[1] / 100,
	      y = cmyk[2] / 100,
	      k = cmyk[3] / 100,
	      r, g, b;
	
	  r = 1 - Math.min(1, c * (1 - k) + k);
	  g = 1 - Math.min(1, m * (1 - k) + k);
	  b = 1 - Math.min(1, y * (1 - k) + k);
	  return [r * 255, g * 255, b * 255];
	}
	
	function cmyk2hsl(args) {
	  return rgb2hsl(cmyk2rgb(args));
	}
	
	function cmyk2hsv(args) {
	  return rgb2hsv(cmyk2rgb(args));
	}
	
	function cmyk2hwb(args) {
	  return rgb2hwb(cmyk2rgb(args));
	}
	
	function cmyk2keyword(args) {
	  return rgb2keyword(cmyk2rgb(args));
	}
	
	
	function xyz2rgb(xyz) {
	  var x = xyz[0] / 100,
	      y = xyz[1] / 100,
	      z = xyz[2] / 100,
	      r, g, b;
	
	  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
	
	  // assume sRGB
	  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
	    : r = (r * 12.92);
	
	  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
	    : g = (g * 12.92);
	
	  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
	    : b = (b * 12.92);
	
	  r = Math.min(Math.max(0, r), 1);
	  g = Math.min(Math.max(0, g), 1);
	  b = Math.min(Math.max(0, b), 1);
	
	  return [r * 255, g * 255, b * 255];
	}
	
	function xyz2lab(xyz) {
	  var x = xyz[0],
	      y = xyz[1],
	      z = xyz[2],
	      l, a, b;
	
	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;
	
	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
	
	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);
	
	  return [l, a, b];
	}
	
	function xyz2lch(args) {
	  return lab2lch(xyz2lab(args));
	}
	
	function lab2xyz(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      x, y, z, y2;
	
	  if (l <= 8) {
	    y = (l * 100) / 903.3;
	    y2 = (7.787 * (y / 100)) + (16 / 116);
	  } else {
	    y = 100 * Math.pow((l + 16) / 116, 3);
	    y2 = Math.pow(y / 100, 1/3);
	  }
	
	  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);
	
	  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);
	
	  return [x, y, z];
	}
	
	function lab2lch(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      hr, h, c;
	
	  hr = Math.atan2(b, a);
	  h = hr * 360 / 2 / Math.PI;
	  if (h < 0) {
	    h += 360;
	  }
	  c = Math.sqrt(a * a + b * b);
	  return [l, c, h];
	}
	
	function lab2rgb(args) {
	  return xyz2rgb(lab2xyz(args));
	}
	
	function lch2lab(lch) {
	  var l = lch[0],
	      c = lch[1],
	      h = lch[2],
	      a, b, hr;
	
	  hr = h / 360 * 2 * Math.PI;
	  a = c * Math.cos(hr);
	  b = c * Math.sin(hr);
	  return [l, a, b];
	}
	
	function lch2xyz(args) {
	  return lab2xyz(lch2lab(args));
	}
	
	function lch2rgb(args) {
	  return lab2rgb(lch2lab(args));
	}
	
	function keyword2rgb(keyword) {
	  return cssKeywords[keyword];
	}
	
	function keyword2hsl(args) {
	  return rgb2hsl(keyword2rgb(args));
	}
	
	function keyword2hsv(args) {
	  return rgb2hsv(keyword2rgb(args));
	}
	
	function keyword2hwb(args) {
	  return rgb2hwb(keyword2rgb(args));
	}
	
	function keyword2cmyk(args) {
	  return rgb2cmyk(keyword2rgb(args));
	}
	
	function keyword2lab(args) {
	  return rgb2lab(keyword2rgb(args));
	}
	
	function keyword2xyz(args) {
	  return rgb2xyz(keyword2rgb(args));
	}
	
	var cssKeywords = {
	  aliceblue:  [240,248,255],
	  antiquewhite: [250,235,215],
	  aqua: [0,255,255],
	  aquamarine: [127,255,212],
	  azure:  [240,255,255],
	  beige:  [245,245,220],
	  bisque: [255,228,196],
	  black:  [0,0,0],
	  blanchedalmond: [255,235,205],
	  blue: [0,0,255],
	  blueviolet: [138,43,226],
	  brown:  [165,42,42],
	  burlywood:  [222,184,135],
	  cadetblue:  [95,158,160],
	  chartreuse: [127,255,0],
	  chocolate:  [210,105,30],
	  coral:  [255,127,80],
	  cornflowerblue: [100,149,237],
	  cornsilk: [255,248,220],
	  crimson:  [220,20,60],
	  cyan: [0,255,255],
	  darkblue: [0,0,139],
	  darkcyan: [0,139,139],
	  darkgoldenrod:  [184,134,11],
	  darkgray: [169,169,169],
	  darkgreen:  [0,100,0],
	  darkgrey: [169,169,169],
	  darkkhaki:  [189,183,107],
	  darkmagenta:  [139,0,139],
	  darkolivegreen: [85,107,47],
	  darkorange: [255,140,0],
	  darkorchid: [153,50,204],
	  darkred:  [139,0,0],
	  darksalmon: [233,150,122],
	  darkseagreen: [143,188,143],
	  darkslateblue:  [72,61,139],
	  darkslategray:  [47,79,79],
	  darkslategrey:  [47,79,79],
	  darkturquoise:  [0,206,209],
	  darkviolet: [148,0,211],
	  deeppink: [255,20,147],
	  deepskyblue:  [0,191,255],
	  dimgray:  [105,105,105],
	  dimgrey:  [105,105,105],
	  dodgerblue: [30,144,255],
	  firebrick:  [178,34,34],
	  floralwhite:  [255,250,240],
	  forestgreen:  [34,139,34],
	  fuchsia:  [255,0,255],
	  gainsboro:  [220,220,220],
	  ghostwhite: [248,248,255],
	  gold: [255,215,0],
	  goldenrod:  [218,165,32],
	  gray: [128,128,128],
	  green:  [0,128,0],
	  greenyellow:  [173,255,47],
	  grey: [128,128,128],
	  honeydew: [240,255,240],
	  hotpink:  [255,105,180],
	  indianred:  [205,92,92],
	  indigo: [75,0,130],
	  ivory:  [255,255,240],
	  khaki:  [240,230,140],
	  lavender: [230,230,250],
	  lavenderblush:  [255,240,245],
	  lawngreen:  [124,252,0],
	  lemonchiffon: [255,250,205],
	  lightblue:  [173,216,230],
	  lightcoral: [240,128,128],
	  lightcyan:  [224,255,255],
	  lightgoldenrodyellow: [250,250,210],
	  lightgray:  [211,211,211],
	  lightgreen: [144,238,144],
	  lightgrey:  [211,211,211],
	  lightpink:  [255,182,193],
	  lightsalmon:  [255,160,122],
	  lightseagreen:  [32,178,170],
	  lightskyblue: [135,206,250],
	  lightslategray: [119,136,153],
	  lightslategrey: [119,136,153],
	  lightsteelblue: [176,196,222],
	  lightyellow:  [255,255,224],
	  lime: [0,255,0],
	  limegreen:  [50,205,50],
	  linen:  [250,240,230],
	  magenta:  [255,0,255],
	  maroon: [128,0,0],
	  mediumaquamarine: [102,205,170],
	  mediumblue: [0,0,205],
	  mediumorchid: [186,85,211],
	  mediumpurple: [147,112,219],
	  mediumseagreen: [60,179,113],
	  mediumslateblue:  [123,104,238],
	  mediumspringgreen:  [0,250,154],
	  mediumturquoise:  [72,209,204],
	  mediumvioletred:  [199,21,133],
	  midnightblue: [25,25,112],
	  mintcream:  [245,255,250],
	  mistyrose:  [255,228,225],
	  moccasin: [255,228,181],
	  navajowhite:  [255,222,173],
	  navy: [0,0,128],
	  oldlace:  [253,245,230],
	  olive:  [128,128,0],
	  olivedrab:  [107,142,35],
	  orange: [255,165,0],
	  orangered:  [255,69,0],
	  orchid: [218,112,214],
	  palegoldenrod:  [238,232,170],
	  palegreen:  [152,251,152],
	  paleturquoise:  [175,238,238],
	  palevioletred:  [219,112,147],
	  papayawhip: [255,239,213],
	  peachpuff:  [255,218,185],
	  peru: [205,133,63],
	  pink: [255,192,203],
	  plum: [221,160,221],
	  powderblue: [176,224,230],
	  purple: [128,0,128],
	  rebeccapurple: [102, 51, 153],
	  red:  [255,0,0],
	  rosybrown:  [188,143,143],
	  royalblue:  [65,105,225],
	  saddlebrown:  [139,69,19],
	  salmon: [250,128,114],
	  sandybrown: [244,164,96],
	  seagreen: [46,139,87],
	  seashell: [255,245,238],
	  sienna: [160,82,45],
	  silver: [192,192,192],
	  skyblue:  [135,206,235],
	  slateblue:  [106,90,205],
	  slategray:  [112,128,144],
	  slategrey:  [112,128,144],
	  snow: [255,250,250],
	  springgreen:  [0,255,127],
	  steelblue:  [70,130,180],
	  tan:  [210,180,140],
	  teal: [0,128,128],
	  thistle:  [216,191,216],
	  tomato: [255,99,71],
	  turquoise:  [64,224,208],
	  violet: [238,130,238],
	  wheat:  [245,222,179],
	  white:  [255,255,255],
	  whitesmoke: [245,245,245],
	  yellow: [255,255,0],
	  yellowgreen:  [154,205,50]
	};
	
	var reverseKeywords = {};
	for (var key in cssKeywords) {
	  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
	}
	
	},{}],4:[function(require,module,exports){
	var conversions = require(3);
	
	var convert = function() {
	   return new Converter();
	}
	
	for (var func in conversions) {
	  // export Raw versions
	  convert[func + "Raw"] =  (function(func) {
	    // accept array or plain args
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      return conversions[func](arg);
	    }
	  })(func);
	
	  var pair = /(\w+)2(\w+)/.exec(func),
	      from = pair[1],
	      to = pair[2];
	
	  // export rgb2hsl and ["rgb"]["hsl"]
	  convert[from] = convert[from] || {};
	
	  convert[from][to] = convert[func] = (function(func) { 
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      
	      var val = conversions[func](arg);
	      if (typeof val == "string" || val === undefined)
	        return val; // keyword
	
	      for (var i = 0; i < val.length; i++)
	        val[i] = Math.round(val[i]);
	      return val;
	    }
	  })(func);
	}
	
	
	/* Converter does lazy conversion and caching */
	var Converter = function() {
	   this.convs = {};
	};
	
	/* Either get the values for a space or
	  set the values for a space, depending on args */
	Converter.prototype.routeSpace = function(space, args) {
	   var values = args[0];
	   if (values === undefined) {
	      // color.rgb()
	      return this.getValues(space);
	   }
	   // color.rgb(10, 10, 10)
	   if (typeof values == "number") {
	      values = Array.prototype.slice.call(args);        
	   }
	
	   return this.setValues(space, values);
	};
	  
	/* Set the values for a space, invalidating cache */
	Converter.prototype.setValues = function(space, values) {
	   this.space = space;
	   this.convs = {};
	   this.convs[space] = values;
	   return this;
	};
	
	/* Get the values for a space. If there's already
	  a conversion for the space, fetch it, otherwise
	  compute it */
	Converter.prototype.getValues = function(space) {
	   var vals = this.convs[space];
	   if (!vals) {
	      var fspace = this.space,
	          from = this.convs[fspace];
	      vals = convert[fspace][space](from);
	
	      this.convs[space] = vals;
	   }
	  return vals;
	};
	
	["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
	   Converter.prototype[space] = function(vals) {
	      return this.routeSpace(space, arguments);
	   }
	});
	
	module.exports = convert;
	},{"3":3}],5:[function(require,module,exports){
	module.exports = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
	},{}],6:[function(require,module,exports){
	//! moment.js
	//! version : 2.17.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	var hookCallback;
	
	function hooks () {
	    return hookCallback.apply(null, arguments);
	}
	
	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}
	
	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}
	
	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}
	
	function isObjectEmpty(obj) {
	    var k;
	    for (k in obj) {
	        // even if its not own property I'd still call it non-empty
	        return false;
	    }
	    return true;
	}
	
	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}
	
	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}
	
	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}
	
	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}
	
	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }
	
	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }
	
	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }
	
	    return a;
	}
	
	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}
	
	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null
	    };
	}
	
	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}
	
	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;
	
	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	}
	
	var some$1 = some;
	
	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));
	
	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }
	
	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}
	
	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }
	
	    return m;
	}
	
	function isUndefined(input) {
	    return input === void 0;
	}
	
	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];
	
	function copyConfig(to, from) {
	    var i, prop, val;
	
	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }
	
	    if (momentProperties.length > 0) {
	        for (i in momentProperties) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }
	
	    return to;
	}
	
	var updateInProgress = false;
	
	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}
	
	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}
	
	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}
	
	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;
	
	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }
	
	    return value;
	}
	
	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}
	
	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}
	
	function deprecate(msg, fn) {
	    var firstTime = true;
	
	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}
	
	var deprecations = {};
	
	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}
	
	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _ordinalParseLenient.
	    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	}
	
	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}
	
	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}
	
	var keys;
	
	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}
	
	var keys$1 = keys;
	
	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};
	
	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}
	
	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};
	
	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];
	
	    if (format || !formatUpper) {
	        return format;
	    }
	
	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });
	
	    return this._longDateFormat[key];
	}
	
	var defaultInvalidDate = 'Invalid date';
	
	function invalidDate () {
	    return this._invalidDate;
	}
	
	var defaultOrdinal = '%d';
	var defaultOrdinalParse = /\d{1,2}/;
	
	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}
	
	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};
	
	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}
	
	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}
	
	var aliases = {};
	
	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}
	
	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}
	
	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;
	
	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }
	
	    return normalizedInput;
	}
	
	var priorities = {};
	
	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}
	
	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}
	
	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}
	
	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}
	
	function set$1 (mom, unit, value) {
	    if (mom.isValid()) {
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	}
	
	// MOMENTS
	
	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}
	
	
	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}
	
	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}
	
	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	var formatFunctions = {};
	
	var formatTokenFunctions = {};
	
	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}
	
	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}
	
	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;
	
	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }
	
	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}
	
	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }
	
	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	    return formatFunctions[format](m);
	}
	
	function expandFormat(format, locale) {
	    var i = 5;
	
	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }
	
	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }
	
	    return format;
	}
	
	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	
	
	var regexes = {};
	
	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}
	
	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }
	
	    return regexes[token](config._strict, config._locale);
	}
	
	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}
	
	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}
	
	var tokens = {};
	
	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}
	
	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}
	
	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}
	
	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;
	
	var indexOf;
	
	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}
	
	var indexOf$1 = indexOf;
	
	function daysInMonth(year, month) {
	    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	}
	
	// FORMATTING
	
	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});
	
	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});
	
	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});
	
	// ALIASES
	
	addUnitAlias('month', 'M');
	
	// PRIORITY
	
	addUnitPriority('month', 8);
	
	// PARSING
	
	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});
	
	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});
	
	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});
	
	// LOCALES
	
	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return this._months;
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return this._monthsShort;
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;
	
	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }
	
	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }
	
	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function setMonth (mom, value) {
	    var dayOfMonth;
	
	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }
	
	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }
	
	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}
	
	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}
	
	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}
	
	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}
	
	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}
	
	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});
	
	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});
	
	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	// ALIASES
	
	addUnitAlias('year', 'y');
	
	// PRIORITIES
	
	addUnitPriority('year', 1);
	
	// PARSING
	
	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);
	
	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});
	
	// HELPERS
	
	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}
	
	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}
	
	// HOOKS
	
	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};
	
	// MOMENTS
	
	var getSetYear = makeGetSet('FullYear', true);
	
	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}
	
	function createDate (y, m, d, h, M, s, ms) {
	    //can't just apply() to create a date:
	    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	    var date = new Date(y, m, d, h, M, s, ms);
	
	    //the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}
	
	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));
	
	    //the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}
	
	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	    return -fwdlw + fwd - 1;
	}
	
	//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;
	
	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }
	
	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}
	
	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;
	
	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }
	
	    return {
	        week: resWeek,
	        year: resYear
	    };
	}
	
	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}
	
	// FORMATTING
	
	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	// ALIASES
	
	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');
	
	// PRIORITIES
	
	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);
	
	// PARSING
	
	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);
	
	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});
	
	// HELPERS
	
	// LOCALES
	
	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}
	
	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};
	
	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}
	
	function localeFirstDayOfYear () {
	    return this._week.doy;
	}
	
	// MOMENTS
	
	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	// FORMATTING
	
	addFormatToken('d', 0, 'do', 'day');
	
	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});
	
	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});
	
	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});
	
	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');
	
	// ALIASES
	
	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');
	
	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);
	
	// PARSING
	
	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});
	
	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});
	
	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});
	
	// HELPERS
	
	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }
	
	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }
	
	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }
	
	    return null;
	}
	
	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}
	
	// LOCALES
	
	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return this._weekdays;
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}
	
	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}
	
	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}
	
	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];
	
	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;
	
	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }
	
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }
	
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	
	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}
	
	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}
	
	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	
	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.
	
	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}
	
	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}
	
	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}
	
	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}
	
	
	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;
	
	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	function hFormat() {
	    return this.hours() % 12 || 12;
	}
	
	function kFormat() {
	    return this.hours() || 24;
	}
	
	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);
	
	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}
	
	meridiem('a', true);
	meridiem('A', false);
	
	// ALIASES
	
	addUnitAlias('hour', 'h');
	
	// PRIORITY
	addUnitPriority('hour', 13);
	
	// PARSING
	
	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}
	
	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	
	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);
	
	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});
	
	// LOCALES
	
	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}
	
	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}
	
	
	// MOMENTS
	
	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);
	
	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    ordinalParse: defaultOrdinalParse,
	    relativeTime: defaultRelativeTime,
	
	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,
	
	    week: defaultLocaleWeek,
	
	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,
	
	    meridiemParse: defaultLocaleMeridiemParse
	};
	
	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;
	
	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}
	
	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;
	
	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}
	
	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            require('./locale/' + name);
	            // because defineLocale currently also sets the global locale, we
	            // want to undo that for lazy loaded locales
	            getSetGlobalLocale(oldLocale);
	        } catch (e) { }
	    }
	    return locales[name];
	}
	
	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }
	
	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }
	
	    return globalLocale._abbr;
	}
	
	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }
	
	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);
	
	
	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}
	
	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;
	
	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}
	
	// returns locale data
	function getLocale (key) {
	    var locale;
	
	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }
	
	    if (!key) {
	        return globalLocale;
	    }
	
	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }
	
	    return chooseLocale(key);
	}
	
	function listLocales() {
	    return keys$1(locales);
	}
	
	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;
	
	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;
	
	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }
	
	        getParsingFlags(m).overflow = overflow;
	    }
	
	    return m;
	}
	
	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	
	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];
	
	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];
	
	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;
	
	    if (match) {
	        getParsingFlags(config).iso = true;
	
	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}
	
	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);
	
	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }
	
	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	        hooks.createFromInputFallback(config);
	    }
	}
	
	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);
	
	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}
	
	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}
	
	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;
	
	    if (config._d) {
	        return;
	    }
	
	    currentDate = currentDateArray(config);
	
	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }
	
	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	        if (config._dayOfYear > daysInYear(yearToUse)) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }
	
	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }
	
	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }
	
	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }
	
	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }
	
	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }
	
	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	}
	
	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;
	
	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;
	
	        var curWeek = weekOfYear(createLocal(), dow, doy);
	
	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	        // Default to current week.
	        week = defaults(w.w, curWeek.week);
	
	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}
	
	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};
	
	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	
	    config._a = [];
	    getParsingFlags(config).empty = true;
	
	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;
	
	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }
	
	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }
	
	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }
	
	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	    configFromArray(config);
	    checkOverflow(config);
	}
	
	
	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;
	
	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}
	
	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,
	
	        scoreToBeat,
	        i,
	        currentScore;
	
	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }
	
	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);
	
	        if (!isValid(tempConfig)) {
	            continue;
	        }
	
	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	        getParsingFlags(tempConfig).score = currentScore;
	
	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }
	
	    extend(config, bestMoment || tempConfig);
	}
	
	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }
	
	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });
	
	    configFromArray(config);
	}
	
	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }
	
	    return res;
	}
	
	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;
	
	    config._locale = config._locale || getLocale(config._l);
	
	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }
	
	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }
	
	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }
	
	    if (!isValid(config)) {
	        config._d = null;
	    }
	
	    return config;
	}
	
	function configFromInput(config) {
	    var input = config._i;
	    if (input === undefined) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (typeof(input) === 'object') {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}
	
	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};
	
	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }
	
	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;
	
	    return createFromConfig(c);
	}
	
	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}
	
	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}
	
	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isBefore', args);
	}
	
	function max () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isAfter', args);
	}
	
	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};
	
	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;
	
	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;
	
	    this._data = {};
	
	    this._locale = getLocale();
	
	    this._bubble();
	}
	
	function isDuration (obj) {
	    return obj instanceof Duration;
	}
	
	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}
	
	// FORMATTING
	
	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}
	
	offset('Z', ':');
	offset('ZZ', '');
	
	// PARSING
	
	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});
	
	// HELPERS
	
	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;
	
	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);
	
	    if (matches === null) {
	        return null;
	    }
	
	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}
	
	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}
	
	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}
	
	// HOOKS
	
	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};
	
	// MOMENTS
	
	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}
	
	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }
	
	        this.utcOffset(input, keepLocalTime);
	
	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}
	
	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}
	
	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;
	
	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}
	
	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}
	
	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;
	
	    return (this.utcOffset() - input) % 60 === 0;
	}
	
	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}
	
	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }
	
	    var c = {};
	
	    copyConfig(c, this);
	    c = prepareConfig(c);
	
	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }
	
	    return this._isDSTShifted;
	}
	
	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}
	
	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}
	
	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}
	
	// ASP.NET json date format regex
	var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
	
	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;
	
	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	
	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }
	
	    ret = new Duration(duration);
	
	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }
	
	    return ret;
	}
	
	createDuration.fn = Duration.prototype;
	
	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}
	
	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};
	
	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }
	
	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	    return res;
	}
	
	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }
	
	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }
	
	    return res;
	}
	
	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }
	
	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}
	
	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);
	
	    if (!mom.isValid()) {
	        // No op
	        return;
	    }
	
	    updateOffset = updateOffset == null ? true : updateOffset;
	
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}
	
	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');
	
	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}
	
	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';
	
	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}
	
	function clone () {
	    return new Moment(this);
	}
	
	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}
	
	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}
	
	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}
	
	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}
	
	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}
	
	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}
	
	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;
	
	    if (!this.isValid()) {
	        return NaN;
	    }
	
	    that = cloneWithOffset(input, this);
	
	    if (!that.isValid()) {
	        return NaN;
	    }
	
	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	    units = normalizeUnits(units);
	
	    if (units === 'year' || units === 'month' || units === 'quarter') {
	        output = monthDiff(this, that);
	        if (units === 'quarter') {
	            output = output / 3;
	        } else if (units === 'year') {
	            output = output / 12;
	        }
	    } else {
	        delta = this - that;
	        output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	    }
	    return asFloat ? output : absFloor(output);
	}
	
	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;
	
	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }
	
	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}
	
	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}
	
	function toISOString () {
	    var m = this.clone().utc();
	    if (0 < m.year() && m.year() <= 9999) {
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            return this.toDate().toISOString();
	        } else {
	            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    } else {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	}
	
	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';
	
	    return this.format(prefix + year + datetime + suffix);
	}
	
	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}
	
	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}
	
	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}
	
	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;
	
	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}
	
	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);
	
	function localeData () {
	    return this._locale;
	}
	
	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }
	
	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }
	
	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }
	
	    return this;
	}
	
	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }
	
	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }
	
	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}
	
	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}
	
	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}
	
	function toDate () {
	    return new Date(this.valueOf());
	}
	
	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}
	
	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}
	
	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}
	
	function isValid$1 () {
	    return isValid(this);
	}
	
	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}
	
	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}
	
	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}
	
	// FORMATTING
	
	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});
	
	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});
	
	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}
	
	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	// ALIASES
	
	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');
	
	// PRIORITY
	
	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);
	
	
	// PARSING
	
	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);
	
	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});
	
	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});
	
	// MOMENTS
	
	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}
	
	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}
	
	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}
	
	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}
	
	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}
	
	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}
	
	// FORMATTING
	
	addFormatToken('Q', 0, 'Qo', 'quarter');
	
	// ALIASES
	
	addUnitAlias('quarter', 'Q');
	
	// PRIORITY
	
	addUnitPriority('quarter', 7);
	
	// PARSING
	
	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});
	
	// MOMENTS
	
	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}
	
	// FORMATTING
	
	addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	// ALIASES
	
	addUnitAlias('date', 'D');
	
	// PRIOROITY
	addUnitPriority('date', 9);
	
	// PARSING
	
	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	});
	
	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});
	
	// MOMENTS
	
	var getSetDayOfMonth = makeGetSet('Date', true);
	
	// FORMATTING
	
	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	// ALIASES
	
	addUnitAlias('dayOfYear', 'DDD');
	
	// PRIORITY
	addUnitPriority('dayOfYear', 4);
	
	// PARSING
	
	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});
	
	// HELPERS
	
	// MOMENTS
	
	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}
	
	// FORMATTING
	
	addFormatToken('m', ['mm', 2], 0, 'minute');
	
	// ALIASES
	
	addUnitAlias('minute', 'm');
	
	// PRIORITY
	
	addUnitPriority('minute', 14);
	
	// PARSING
	
	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);
	
	// MOMENTS
	
	var getSetMinute = makeGetSet('Minutes', false);
	
	// FORMATTING
	
	addFormatToken('s', ['ss', 2], 0, 'second');
	
	// ALIASES
	
	addUnitAlias('second', 's');
	
	// PRIORITY
	
	addUnitPriority('second', 15);
	
	// PARSING
	
	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);
	
	// MOMENTS
	
	var getSetSecond = makeGetSet('Seconds', false);
	
	// FORMATTING
	
	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});
	
	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});
	
	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});
	
	
	// ALIASES
	
	addUnitAlias('millisecond', 'ms');
	
	// PRIORITY
	
	addUnitPriority('millisecond', 16);
	
	// PARSING
	
	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);
	
	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}
	
	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}
	
	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS
	
	var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	// FORMATTING
	
	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');
	
	// MOMENTS
	
	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}
	
	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}
	
	var proto = Moment.prototype;
	
	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$1;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;
	
	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;
	
	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;
	
	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;
	
	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;
	
	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;
	
	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;
	
	// Hour
	proto.hour = proto.hours = getSetHour;
	
	// Minute
	proto.minute = proto.minutes = getSetMinute;
	
	// Second
	proto.second = proto.seconds = getSetSecond;
	
	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;
	
	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;
	
	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;
	
	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
	function createUnix (input) {
	    return createLocal(input * 1000);
	}
	
	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}
	
	function preParsePostFormat (string) {
	    return string;
	}
	
	var proto$1 = Locale.prototype;
	
	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;
	
	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;
	
	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;
	
	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
	
	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;
	
	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}
	
	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }
	
	    format = format || '';
	
	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}
	
	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;
	
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    }
	
	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;
	
	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}
	
	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}
	
	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}
	
	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}
	
	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}
	
	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}
	
	getSetGlobalLocale('en', {
	    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	
	var mathAbs = Math.abs;
	
	function abs () {
	    var data           = this._data;
	
	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);
	
	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);
	
	    return this;
	}
	
	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);
	
	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;
	
	    return duration._bubble();
	}
	
	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}
	
	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}
	
	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}
	
	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;
	
	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }
	
	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;
	
	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;
	
	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;
	
	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;
	
	    days += absFloor(hours / 24);
	
	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));
	
	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;
	
	    data.days   = days;
	    data.months = months;
	    data.years  = years;
	
	    return this;
	}
	
	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}
	
	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}
	
	function as (units) {
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;
	
	    units = normalizeUnits(units);
	
	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}
	
	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}
	
	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}
	
	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');
	
	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this[units + 's']();
	}
	
	function makeGetter(name) {
	    return function () {
	        return this._data[name];
	    };
	}
	
	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');
	
	function weeks () {
	    return absFloor(this.days() / 7);
	}
	
	var round = Math.round;
	var thresholds = {
	    s: 45,  // seconds to minute
	    m: 45,  // minutes to hour
	    h: 22,  // hours to day
	    d: 26,  // days to month
	    M: 11   // months to year
	};
	
	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}
	
	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));
	
	    var a = seconds < thresholds.s && ['s', seconds]  ||
	            minutes <= 1           && ['m']           ||
	            minutes < thresholds.m && ['mm', minutes] ||
	            hours   <= 1           && ['h']           ||
	            hours   < thresholds.h && ['hh', hours]   ||
	            days    <= 1           && ['d']           ||
	            days    < thresholds.d && ['dd', days]    ||
	            months  <= 1           && ['M']           ||
	            months  < thresholds.M && ['MM', months]  ||
	            years   <= 1           && ['y']           || ['yy', years];
	
	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}
	
	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}
	
	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    return true;
	}
	
	function humanize (withSuffix) {
	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);
	
	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }
	
	    return locale.postformat(output);
	}
	
	var abs$1 = Math.abs;
	
	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;
	
	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;
	
	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;
	
	
	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds;
	    var total = this.asSeconds();
	
	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }
	
	    return (total < 0 ? '-' : '') +
	        'P' +
	        (Y ? Y + 'Y' : '') +
	        (M ? M + 'M' : '') +
	        (D ? D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? h + 'H' : '') +
	        (m ? m + 'M' : '') +
	        (s ? s + 'S' : '');
	}
	
	var proto$2 = Duration.prototype;
	
	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;
	
	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;
	
	// Side effect imports
	
	// FORMATTING
	
	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');
	
	// PARSING
	
	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});
	
	// Side effect imports
	
	
	hooks.version = '2.17.1';
	
	setHookCallback(createLocal);
	
	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;
	
	return hooks;
	
	})));
	
	},{}],7:[function(require,module,exports){
	/**
	 * @namespace Chart
	 */
	var Chart = require(28)();
	
	require(26)(Chart);
	require(42)(Chart);
	require(22)(Chart);
	require(31)(Chart);
	require(25)(Chart);
	require(21)(Chart);
	require(23)(Chart);
	require(24)(Chart);
	require(29)(Chart);
	require(33)(Chart);
	require(34)(Chart);
	require(32)(Chart);
	require(35)(Chart);
	require(30)(Chart);
	require(27)(Chart);
	require(36)(Chart);
	
	require(37)(Chart);
	require(38)(Chart);
	require(39)(Chart);
	require(40)(Chart);
	
	require(45)(Chart);
	require(43)(Chart);
	require(44)(Chart);
	require(46)(Chart);
	require(47)(Chart);
	require(48)(Chart);
	
	// Controllers must be loaded after elements
	// See Chart.core.datasetController.dataElementType
	require(15)(Chart);
	require(16)(Chart);
	require(17)(Chart);
	require(18)(Chart);
	require(19)(Chart);
	require(20)(Chart);
	
	require(8)(Chart);
	require(9)(Chart);
	require(10)(Chart);
	require(11)(Chart);
	require(12)(Chart);
	require(13)(Chart);
	require(14)(Chart);
	
	window.Chart = module.exports = Chart;
	
	},{"10":10,"11":11,"12":12,"13":13,"14":14,"15":15,"16":16,"17":17,"18":18,"19":19,"20":20,"21":21,"22":22,"23":23,"24":24,"25":25,"26":26,"27":27,"28":28,"29":29,"30":30,"31":31,"32":32,"33":33,"34":34,"35":35,"36":36,"37":37,"38":38,"39":39,"40":40,"42":42,"43":43,"44":44,"45":45,"46":46,"47":47,"48":48,"8":8,"9":9}],8:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Bar = function(context, config) {
			config.type = 'bar';
	
			return new Chart(context, config);
		};
	
	};
	
	},{}],9:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Bubble = function(context, config) {
			config.type = 'bubble';
			return new Chart(context, config);
		};
	
	};
	
	},{}],10:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Doughnut = function(context, config) {
			config.type = 'doughnut';
	
			return new Chart(context, config);
		};
	
	};
	
	},{}],11:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Line = function(context, config) {
			config.type = 'line';
	
			return new Chart(context, config);
		};
	
	};
	
	},{}],12:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.PolarArea = function(context, config) {
			config.type = 'polarArea';
	
			return new Chart(context, config);
		};
	
	};
	
	},{}],13:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		Chart.Radar = function(context, config) {
			config.type = 'radar';
	
			return new Chart(context, config);
		};
	
	};
	
	},{}],14:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var defaultConfig = {
			hover: {
				mode: 'single'
			},
	
			scales: {
				xAxes: [{
					type: 'linear', // scatter should not use a category axis
					position: 'bottom',
					id: 'x-axis-1' // need an ID so datasets can reference the scale
				}],
				yAxes: [{
					type: 'linear',
					position: 'left',
					id: 'y-axis-1'
				}]
			},
	
			tooltips: {
				callbacks: {
					title: function() {
						// Title doesn't make sense for scatter since we format the data as a point
						return '';
					},
					label: function(tooltipItem) {
						return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
					}
				}
			}
		};
	
		// Register the default config for this type
		Chart.defaults.scatter = defaultConfig;
	
		// Scatter charts use line controllers
		Chart.controllers.scatter = Chart.controllers.line;
	
		Chart.Scatter = function(context, config) {
			config.type = 'scatter';
			return new Chart(context, config);
		};
	
	};
	
	},{}],15:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.bar = {
			hover: {
				mode: 'label'
			},
	
			scales: {
				xAxes: [{
					type: 'category',
	
					// Specific to Bar Controller
					categoryPercentage: 0.8,
					barPercentage: 0.9,
	
					// grid line settings
					gridLines: {
						offsetGridLines: true
					}
				}],
				yAxes: [{
					type: 'linear'
				}]
			}
		};
	
		Chart.controllers.bar = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Rectangle,
	
			initialize: function(chart, datasetIndex) {
				Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
	
				var me = this;
				var meta = me.getMeta();
				var dataset = me.getDataset();
	
				meta.stack = dataset.stack;
				// Use this to indicate that this is a bar dataset.
				meta.bar = true;
			},
	
			// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible
			getStackCount: function() {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
	
				var stacks = [];
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var dsMeta = me.chart.getDatasetMeta(datasetIndex);
					if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&
						(yScale.options.stacked === false ||
						(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}, me);
	
				return stacks.length;
			},
	
			update: function(reset) {
				var me = this;
				helpers.each(me.getMeta().data, function(rectangle, index) {
					me.updateElement(rectangle, index, reset);
				}, me);
			},
	
			updateElement: function(rectangle, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
				var scaleBase = yScale.getBasePixel();
				var rectangleElementOptions = me.chart.options.elements.rectangle;
				var custom = rectangle.custom || {};
				var dataset = me.getDataset();
	
				rectangle._xScale = xScale;
				rectangle._yScale = yScale;
				rectangle._datasetIndex = me.index;
				rectangle._index = index;
	
				var ruler = me.getRuler(index); // The index argument for compatible
				rectangle._model = {
					x: me.calculateBarX(index, me.index, ruler),
					y: reset ? scaleBase : me.calculateBarY(index, me.index),
	
					// Tooltip
					label: me.chart.data.labels[index],
					datasetLabel: dataset.label,
	
					// Appearance
					horizontal: false,
					base: reset ? scaleBase : me.calculateBarBase(me.index, index),
					width: me.calculateBarWidth(ruler),
					backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
					borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
					borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
					borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
				};
	
				rectangle.pivot();
			},
	
			calculateBarBase: function(datasetIndex, index) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var base = yScale.getBaseValue();
				var original = base;
	
				if ((yScale.options.stacked === true) ||
					(yScale.options.stacked === undefined && meta.stack !== undefined)) {
					var chart = me.chart;
					var datasets = chart.data.datasets;
					var value = Number(datasets[datasetIndex].data[index]);
	
					for (var i = 0; i < datasetIndex; i++) {
						var currentDs = datasets[i];
						var currentDsMeta = chart.getDatasetMeta(i);
						if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) &&
							meta.stack === currentDsMeta.stack) {
							var currentVal = Number(currentDs.data[index]);
							base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
						}
					}
	
					return yScale.getPixelForValue(base);
				}
	
				return yScale.getBasePixel();
			},
	
			getRuler: function() {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var stackCount = me.getStackCount();
	
				var tickWidth = xScale.width / xScale.ticks.length;
				var categoryWidth = tickWidth * xScale.options.categoryPercentage;
				var categorySpacing = (tickWidth - (tickWidth * xScale.options.categoryPercentage)) / 2;
				var fullBarWidth = categoryWidth / stackCount;
	
				var barWidth = fullBarWidth * xScale.options.barPercentage;
				var barSpacing = fullBarWidth - (fullBarWidth * xScale.options.barPercentage);
	
				return {
					stackCount: stackCount,
					tickWidth: tickWidth,
					categoryWidth: categoryWidth,
					categorySpacing: categorySpacing,
					fullBarWidth: fullBarWidth,
					barWidth: barWidth,
					barSpacing: barSpacing
				};
			},
	
			calculateBarWidth: function(ruler) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				if (xScale.options.barThickness) {
					return xScale.options.barThickness;
				}
				return ruler.barWidth;
			},
	
			// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible
			getStackIndex: function(datasetIndex) {
				var me = this;
				var meta = me.chart.getDatasetMeta(datasetIndex);
				var yScale = me.getScaleForId(meta.yAxisID);
				var dsMeta, j;
				var stacks = [meta.stack];
	
				for (j = 0; j < datasetIndex; ++j) {
					dsMeta = this.chart.getDatasetMeta(j);
					if (dsMeta.bar && this.chart.isDatasetVisible(j) &&
						(yScale.options.stacked === false ||
						(yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}
	
				return stacks.length - 1;
			},
	
			calculateBarX: function(index, datasetIndex, ruler) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var stackIndex = me.getStackIndex(datasetIndex);
				var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
				leftTick -= me.chart.isCombo ? (ruler.tickWidth / 2) : 0;
	
				return leftTick +
					(ruler.barWidth / 2) +
					ruler.categorySpacing +
					(ruler.barWidth * stackIndex) +
					(ruler.barSpacing / 2) +
					(ruler.barSpacing * stackIndex);
			},
	
			calculateBarY: function(index, datasetIndex) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var value = Number(me.getDataset().data[index]);
	
				if (yScale.options.stacked ||
					(yScale.options.stacked === undefined && meta.stack !== undefined)) {
					var base = yScale.getBaseValue();
					var sumPos = base,
						sumNeg = base;
	
					for (var i = 0; i < datasetIndex; i++) {
						var ds = me.chart.data.datasets[i];
						var dsMeta = me.chart.getDatasetMeta(i);
						if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) &&
							meta.stack === dsMeta.stack) {
							var stackedVal = Number(ds.data[index]);
							if (stackedVal < 0) {
								sumNeg += stackedVal || 0;
							} else {
								sumPos += stackedVal || 0;
							}
						}
					}
	
					if (value < 0) {
						return yScale.getPixelForValue(sumNeg + value);
					}
					return yScale.getPixelForValue(sumPos + value);
				}
	
				return yScale.getPixelForValue(value);
			},
	
			draw: function(ease) {
				var me = this;
				var easingDecimal = ease || 1;
				var metaData = me.getMeta().data;
				var dataset = me.getDataset();
				var i, len;
	
				Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
				for (i = 0, len = metaData.length; i < len; ++i) {
					var d = dataset.data[i];
					if (d !== null && d !== undefined && !isNaN(d)) {
						metaData[i].transition(easingDecimal).draw();
					}
				}
				Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
			},
	
			setHoverStyle: function(rectangle) {
				var dataset = this.chart.data.datasets[rectangle._datasetIndex];
				var index = rectangle._index;
	
				var custom = rectangle.custom || {};
				var model = rectangle._model;
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
			},
	
			removeHoverStyle: function(rectangle) {
				var dataset = this.chart.data.datasets[rectangle._datasetIndex];
				var index = rectangle._index;
				var custom = rectangle.custom || {};
				var model = rectangle._model;
				var rectangleElementOptions = this.chart.options.elements.rectangle;
	
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
			}
	
		});
	
	
		// including horizontalBar in the bar file, instead of a file of its own
		// it extends bar (like pie extends doughnut)
		Chart.defaults.horizontalBar = {
			hover: {
				mode: 'label'
			},
	
			scales: {
				xAxes: [{
					type: 'linear',
					position: 'bottom'
				}],
				yAxes: [{
					position: 'left',
					type: 'category',
	
					// Specific to Horizontal Bar Controller
					categoryPercentage: 0.8,
					barPercentage: 0.9,
	
					// grid line settings
					gridLines: {
						offsetGridLines: true
					}
				}]
			},
			elements: {
				rectangle: {
					borderSkipped: 'left'
				}
			},
			tooltips: {
				callbacks: {
					title: function(tooltipItems, data) {
						// Pick first xLabel for now
						var title = '';
	
						if (tooltipItems.length > 0) {
							if (tooltipItems[0].yLabel) {
								title = tooltipItems[0].yLabel;
							} else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
								title = data.labels[tooltipItems[0].index];
							}
						}
	
						return title;
					},
					label: function(tooltipItem, data) {
						var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
						return datasetLabel + ': ' + tooltipItem.xLabel;
					}
				}
			}
		};
	
		Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
	
			// Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible
			getStackCount: function() {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
	
				var stacks = [];
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var dsMeta = me.chart.getDatasetMeta(datasetIndex);
					if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) &&
						(xScale.options.stacked === false ||
						(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}, me);
	
				return stacks.length;
			},
	
			updateElement: function(rectangle, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
				var scaleBase = xScale.getBasePixel();
				var custom = rectangle.custom || {};
				var dataset = me.getDataset();
				var rectangleElementOptions = me.chart.options.elements.rectangle;
	
				rectangle._xScale = xScale;
				rectangle._yScale = yScale;
				rectangle._datasetIndex = me.index;
				rectangle._index = index;
	
				var ruler = me.getRuler(index); // The index argument for compatible
				rectangle._model = {
					x: reset ? scaleBase : me.calculateBarX(index, me.index),
					y: me.calculateBarY(index, me.index, ruler),
	
					// Tooltip
					label: me.chart.data.labels[index],
					datasetLabel: dataset.label,
	
					// Appearance
					horizontal: true,
					base: reset ? scaleBase : me.calculateBarBase(me.index, index),
					height: me.calculateBarHeight(ruler),
					backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
					borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
					borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
					borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
				};
	
				rectangle.pivot();
			},
	
			calculateBarBase: function(datasetIndex, index) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var base = xScale.getBaseValue();
				var originalBase = base;
	
				if (xScale.options.stacked ||
					(xScale.options.stacked === undefined && meta.stack !== undefined)) {
					var chart = me.chart;
					var datasets = chart.data.datasets;
					var value = Number(datasets[datasetIndex].data[index]);
	
					for (var i = 0; i < datasetIndex; i++) {
						var currentDs = datasets[i];
						var currentDsMeta = chart.getDatasetMeta(i);
						if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) &&
							meta.stack === currentDsMeta.stack) {
							var currentVal = Number(currentDs.data[index]);
							base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
						}
					}
	
					return xScale.getPixelForValue(base);
				}
	
				return xScale.getBasePixel();
			},
	
			getRuler: function() {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var stackCount = me.getStackCount();
	
				var tickHeight = yScale.height / yScale.ticks.length;
				var categoryHeight = tickHeight * yScale.options.categoryPercentage;
				var categorySpacing = (tickHeight - (tickHeight * yScale.options.categoryPercentage)) / 2;
				var fullBarHeight = categoryHeight / stackCount;
	
				var barHeight = fullBarHeight * yScale.options.barPercentage;
				var barSpacing = fullBarHeight - (fullBarHeight * yScale.options.barPercentage);
	
				return {
					stackCount: stackCount,
					tickHeight: tickHeight,
					categoryHeight: categoryHeight,
					categorySpacing: categorySpacing,
					fullBarHeight: fullBarHeight,
					barHeight: barHeight,
					barSpacing: barSpacing
				};
			},
	
			calculateBarHeight: function(ruler) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				if (yScale.options.barThickness) {
					return yScale.options.barThickness;
				}
				return ruler.barHeight;
			},
	
			// Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible
			getStackIndex: function(datasetIndex) {
				var me = this;
				var meta = me.chart.getDatasetMeta(datasetIndex);
				var xScale = me.getScaleForId(meta.xAxisID);
				var dsMeta, j;
				var stacks = [meta.stack];
	
				for (j = 0; j < datasetIndex; ++j) {
					dsMeta = this.chart.getDatasetMeta(j);
					if (dsMeta.bar && this.chart.isDatasetVisible(j) &&
						(xScale.options.stacked === false ||
						(xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1) ||
						(xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1)))) {
						stacks.push(dsMeta.stack);
					}
				}
	
				return stacks.length - 1;
			},
	
			calculateBarX: function(index, datasetIndex) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var value = Number(me.getDataset().data[index]);
	
				if (xScale.options.stacked ||
					(xScale.options.stacked === undefined && meta.stack !== undefined)) {
					var base = xScale.getBaseValue();
					var sumPos = base,
						sumNeg = base;
	
					for (var i = 0; i < datasetIndex; i++) {
						var ds = me.chart.data.datasets[i];
						var dsMeta = me.chart.getDatasetMeta(i);
						if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) &&
							meta.stack === dsMeta.stack) {
							var stackedVal = Number(ds.data[index]);
							if (stackedVal < 0) {
								sumNeg += stackedVal || 0;
							} else {
								sumPos += stackedVal || 0;
							}
						}
					}
	
					if (value < 0) {
						return xScale.getPixelForValue(sumNeg + value);
					}
					return xScale.getPixelForValue(sumPos + value);
				}
	
				return xScale.getPixelForValue(value);
			},
	
			calculateBarY: function(index, datasetIndex, ruler) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var stackIndex = me.getStackIndex(datasetIndex);
				var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
				topTick -= me.chart.isCombo ? (ruler.tickHeight / 2) : 0;
	
				return topTick +
					(ruler.barHeight / 2) +
					ruler.categorySpacing +
					(ruler.barHeight * stackIndex) +
					(ruler.barSpacing / 2) +
					(ruler.barSpacing * stackIndex);
			}
		});
	};
	
	},{}],16:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.bubble = {
			hover: {
				mode: 'single'
			},
	
			scales: {
				xAxes: [{
					type: 'linear', // bubble should probably use a linear scale by default
					position: 'bottom',
					id: 'x-axis-0' // need an ID so datasets can reference the scale
				}],
				yAxes: [{
					type: 'linear',
					position: 'left',
					id: 'y-axis-0'
				}]
			},
	
			tooltips: {
				callbacks: {
					title: function() {
						// Title doesn't make sense for scatter since we format the data as a point
						return '';
					},
					label: function(tooltipItem, data) {
						var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
						var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
						return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
					}
				}
			}
		};
	
		Chart.controllers.bubble = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Point,
	
			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var points = meta.data;
	
				// Update Points
				helpers.each(points, function(point, index) {
					me.updateElement(point, index, reset);
				});
			},
	
			updateElement: function(point, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
	
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var data = dataset.data[index];
				var pointElementOptions = me.chart.options.elements.point;
				var dsIndex = me.index;
	
				helpers.extend(point, {
					// Utility
					_xScale: xScale,
					_yScale: yScale,
					_datasetIndex: dsIndex,
					_index: index,
	
					// Desired view properties
					_model: {
						x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
						y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
						// Appearance
						radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
	
						// Tooltip
						hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
					}
				});
	
				// Trick to reset the styles of the point
				Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
	
				var model = point._model;
				model.skip = custom.skip ? custom.skip : (isNaN(model.x) || isNaN(model.y));
	
				point.pivot();
			},
	
			getRadius: function(value) {
				return value.r || this.chart.options.elements.point.radius;
			},
	
			setHoverStyle: function(point) {
				var me = this;
				Chart.DatasetController.prototype.setHoverStyle.call(me, point);
	
				// Radius
				var dataset = me.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
				model.radius = custom.hoverRadius ? custom.hoverRadius : (helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius)) + me.getRadius(dataset.data[index]);
			},
	
			removeHoverStyle: function(point) {
				var me = this;
				Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
	
				var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
				var custom = point.custom || {};
				var model = point._model;
	
				model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
			}
		});
	};
	
	},{}],17:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			defaults = Chart.defaults;
	
		defaults.doughnut = {
			animation: {
				// Boolean - Whether we animate the rotation of the Doughnut
				animateRotate: true,
				// Boolean - Whether we animate scaling the Doughnut from the centre
				animateScale: false
			},
			aspectRatio: 1,
			hover: {
				mode: 'single'
			},
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');
	
				var data = chart.data;
				var datasets = data.datasets;
				var labels = data.labels;
	
				if (datasets.length) {
					for (var i = 0; i < datasets[0].data.length; ++i) {
						text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
						if (labels[i]) {
							text.push(labels[i]);
						}
						text.push('</li>');
					}
				}
	
				text.push('</ul>');
				return text.join('');
			},
			legend: {
				labels: {
					generateLabels: function(chart) {
						var data = chart.data;
						if (data.labels.length && data.datasets.length) {
							return data.labels.map(function(label, i) {
								var meta = chart.getDatasetMeta(0);
								var ds = data.datasets[0];
								var arc = meta.data[i];
								var custom = arc && arc.custom || {};
								var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
								var arcOpts = chart.options.elements.arc;
								var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
								var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
								var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
	
								return {
									text: label,
									fillStyle: fill,
									strokeStyle: stroke,
									lineWidth: bw,
									hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
	
									// Extra data used for toggling the correct item
									index: i
								};
							});
						}
						return [];
					}
				},
	
				onClick: function(e, legendItem) {
					var index = legendItem.index;
					var chart = this.chart;
					var i, ilen, meta;
	
					for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
						meta = chart.getDatasetMeta(i);
						// toggle visibility of index if exists
						if (meta.data[index]) {
							meta.data[index].hidden = !meta.data[index].hidden;
						}
					}
	
					chart.update();
				}
			},
	
			// The percentage of the chart that we cut out of the middle.
			cutoutPercentage: 50,
	
			// The rotation of the chart, where the first data arc begins.
			rotation: Math.PI * -0.5,
	
			// The total circumference of the chart.
			circumference: Math.PI * 2.0,
	
			// Need to override these to give a nice default
			tooltips: {
				callbacks: {
					title: function() {
						return '';
					},
					label: function(tooltipItem, data) {
						var dataLabel = data.labels[tooltipItem.index];
						var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
	
						if (helpers.isArray(dataLabel)) {
							// show value on first line of multiline label
							// need to clone because we are changing the value
							dataLabel = dataLabel.slice();
							dataLabel[0] += value;
						} else {
							dataLabel += value;
						}
	
						return dataLabel;
					}
				}
			}
		};
	
		defaults.pie = helpers.clone(defaults.doughnut);
		helpers.extend(defaults.pie, {
			cutoutPercentage: 0
		});
	
	
		Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Arc,
	
			linkScales: helpers.noop,
	
			// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
			getRingIndex: function(datasetIndex) {
				var ringIndex = 0;
	
				for (var j = 0; j < datasetIndex; ++j) {
					if (this.chart.isDatasetVisible(j)) {
						++ringIndex;
					}
				}
	
				return ringIndex;
			},
	
			update: function(reset) {
				var me = this;
				var chart = me.chart,
					chartArea = chart.chartArea,
					opts = chart.options,
					arcOpts = opts.elements.arc,
					availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,
					availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,
					minSize = Math.min(availableWidth, availableHeight),
					offset = {
						x: 0,
						y: 0
					},
					meta = me.getMeta(),
					cutoutPercentage = opts.cutoutPercentage,
					circumference = opts.circumference;
	
				// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
				if (circumference < Math.PI * 2.0) {
					var startAngle = opts.rotation % (Math.PI * 2.0);
					startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
					var endAngle = startAngle + circumference;
					var start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};
					var end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};
					var contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
					var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
					var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
					var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
					var cutout = cutoutPercentage / 100.0;
					var min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};
					var max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};
					var size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};
					minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
					offset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};
				}
	
				chart.borderWidth = me.getMaxBorderWidth(meta.data);
				chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
				chart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);
				chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
				chart.offsetX = offset.x * chart.outerRadius;
				chart.offsetY = offset.y * chart.outerRadius;
	
				meta.total = me.calculateTotal();
	
				me.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));
				me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
	
				helpers.each(meta.data, function(arc, index) {
					me.updateElement(arc, index, reset);
				});
			},
	
			updateElement: function(arc, index, reset) {
				var me = this;
				var chart = me.chart,
					chartArea = chart.chartArea,
					opts = chart.options,
					animationOpts = opts.animation,
					centerX = (chartArea.left + chartArea.right) / 2,
					centerY = (chartArea.top + chartArea.bottom) / 2,
					startAngle = opts.rotation, // non reset case handled later
					endAngle = opts.rotation, // non reset case handled later
					dataset = me.getDataset(),
					circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),
					innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,
					outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,
					valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
	
				helpers.extend(arc, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
	
					// Desired view properties
					_model: {
						x: centerX + chart.offsetX,
						y: centerY + chart.offsetY,
						startAngle: startAngle,
						endAngle: endAngle,
						circumference: circumference,
						outerRadius: outerRadius,
						innerRadius: innerRadius,
						label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
					}
				});
	
				var model = arc._model;
				// Resets the visual styles
				this.removeHoverStyle(arc);
	
				// Set correct angles if not resetting
				if (!reset || !animationOpts.animateRotate) {
					if (index === 0) {
						model.startAngle = opts.rotation;
					} else {
						model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
					}
	
					model.endAngle = model.startAngle + model.circumference;
				}
	
				arc.pivot();
			},
	
			removeHoverStyle: function(arc) {
				Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
			},
	
			calculateTotal: function() {
				var dataset = this.getDataset();
				var meta = this.getMeta();
				var total = 0;
				var value;
	
				helpers.each(meta.data, function(element, index) {
					value = dataset.data[index];
					if (!isNaN(value) && !element.hidden) {
						total += Math.abs(value);
					}
				});
	
				/* if (total === 0) {
					total = NaN;
				}*/
	
				return total;
			},
	
			calculateCircumference: function(value) {
				var total = this.getMeta().total;
				if (total > 0 && !isNaN(value)) {
					return (Math.PI * 2.0) * (value / total);
				}
				return 0;
			},
	
			// gets the max border or hover width to properly scale pie charts
			getMaxBorderWidth: function(elements) {
				var max = 0,
					index = this.index,
					length = elements.length,
					borderWidth,
					hoverWidth;
	
				for (var i = 0; i < length; i++) {
					borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
					hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
	
					max = borderWidth > max ? borderWidth : max;
					max = hoverWidth > max ? hoverWidth : max;
				}
				return max;
			}
		});
	};
	
	},{}],18:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.line = {
			showLines: true,
			spanGaps: false,
	
			hover: {
				mode: 'label'
			},
	
			scales: {
				xAxes: [{
					type: 'category',
					id: 'x-axis-0'
				}],
				yAxes: [{
					type: 'linear',
					id: 'y-axis-0'
				}]
			}
		};
	
		function lineEnabled(dataset, options) {
			return helpers.getValueOrDefault(dataset.showLine, options.showLines);
		}
	
		Chart.controllers.line = Chart.DatasetController.extend({
	
			datasetElementType: Chart.elements.Line,
	
			dataElementType: Chart.elements.Point,
	
			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var line = meta.dataset;
				var points = meta.data || [];
				var options = me.chart.options;
				var lineElementOptions = options.elements.line;
				var scale = me.getScaleForId(meta.yAxisID);
				var i, ilen, custom;
				var dataset = me.getDataset();
				var showLine = lineEnabled(dataset, options);
	
				// Update Line
				if (showLine) {
					custom = line.custom || {};
	
					// Compatibility: If the properties are defined with only the old name, use those values
					if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
						dataset.lineTension = dataset.tension;
					}
	
					// Utility
					line._scale = scale;
					line._datasetIndex = me.index;
					// Data
					line._children = points;
					// Model
					line._model = {
						// Appearance
						// The default behavior of lines is to break at null values, according
						// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
						// This option gives lines the ability to span gaps
						spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
						borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
						borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
						borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
						borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
						borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
						fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
						steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
						cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
						// Scale
						scaleTop: scale.top,
						scaleBottom: scale.bottom,
						scaleZero: scale.getBasePixel()
					};
	
					line.pivot();
				}
	
				// Update Points
				for (i=0, ilen=points.length; i<ilen; ++i) {
					me.updateElement(points[i], i, reset);
				}
	
				if (showLine && line._model.tension !== 0) {
					me.updateBezierControlPoints();
				}
	
				// Now pivot the point for animation
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].pivot();
				}
			},
	
			getPointBackgroundColor: function(point, index) {
				var backgroundColor = this.chart.options.elements.point.backgroundColor;
				var dataset = this.getDataset();
				var custom = point.custom || {};
	
				if (custom.backgroundColor) {
					backgroundColor = custom.backgroundColor;
				} else if (dataset.pointBackgroundColor) {
					backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
				} else if (dataset.backgroundColor) {
					backgroundColor = dataset.backgroundColor;
				}
	
				return backgroundColor;
			},
	
			getPointBorderColor: function(point, index) {
				var borderColor = this.chart.options.elements.point.borderColor;
				var dataset = this.getDataset();
				var custom = point.custom || {};
	
				if (custom.borderColor) {
					borderColor = custom.borderColor;
				} else if (dataset.pointBorderColor) {
					borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
				} else if (dataset.borderColor) {
					borderColor = dataset.borderColor;
				}
	
				return borderColor;
			},
	
			getPointBorderWidth: function(point, index) {
				var borderWidth = this.chart.options.elements.point.borderWidth;
				var dataset = this.getDataset();
				var custom = point.custom || {};
	
				if (!isNaN(custom.borderWidth)) {
					borderWidth = custom.borderWidth;
				} else if (!isNaN(dataset.pointBorderWidth)) {
					borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
				} else if (!isNaN(dataset.borderWidth)) {
					borderWidth = dataset.borderWidth;
				}
	
				return borderWidth;
			},
	
			updateElement: function(point, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var datasetIndex = me.index;
				var value = dataset.data[index];
				var yScale = me.getScaleForId(meta.yAxisID);
				var xScale = me.getScaleForId(meta.xAxisID);
				var pointOptions = me.chart.options.elements.point;
				var x, y;
				var labels = me.chart.data.labels || [];
				var includeOffset = (labels.length === 1 || dataset.data.length === 1) || me.chart.isCombo;
	
				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
					dataset.pointRadius = dataset.radius;
				}
				if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
					dataset.pointHitRadius = dataset.hitRadius;
				}
	
				x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
				y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
	
				// Utility
				point._xScale = xScale;
				point._yScale = yScale;
				point._datasetIndex = datasetIndex;
				point._index = index;
	
				// Desired view properties
				point._model = {
					x: x,
					y: y,
					skip: custom.skip || isNaN(x) || isNaN(y),
					// Appearance
					radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
					pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
					backgroundColor: me.getPointBackgroundColor(point, index),
					borderColor: me.getPointBorderColor(point, index),
					borderWidth: me.getPointBorderWidth(point, index),
					tension: meta.dataset._model ? meta.dataset._model.tension : 0,
					steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
					// Tooltip
					hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
				};
			},
	
			calculatePointY: function(value, index, datasetIndex) {
				var me = this;
				var chart = me.chart;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var sumPos = 0;
				var sumNeg = 0;
				var i, ds, dsMeta;
	
				if (yScale.options.stacked) {
					for (i = 0; i < datasetIndex; i++) {
						ds = chart.data.datasets[i];
						dsMeta = chart.getDatasetMeta(i);
						if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
							var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
							if (stackedRightValue < 0) {
								sumNeg += stackedRightValue || 0;
							} else {
								sumPos += stackedRightValue || 0;
							}
						}
					}
	
					var rightValue = Number(yScale.getRightValue(value));
					if (rightValue < 0) {
						return yScale.getPixelForValue(sumNeg + rightValue);
					}
					return yScale.getPixelForValue(sumPos + rightValue);
				}
	
				return yScale.getPixelForValue(value);
			},
	
			updateBezierControlPoints: function() {
				var me = this;
				var meta = me.getMeta();
				var area = me.chart.chartArea;
				var points = (meta.data || []);
				var i, ilen, point, model, controlPoints;
	
				// Only consider points that are drawn in case the spanGaps option is used
				if (meta.dataset._model.spanGaps) {
					points = points.filter(function(pt) {
						return !pt._model.skip;
					});
				}
	
				function capControlPoint(pt, min, max) {
					return Math.max(Math.min(pt, max), min);
				}
	
				if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
					helpers.splineCurveMonotone(points);
				} else {
					for (i = 0, ilen = points.length; i < ilen; ++i) {
						point = points[i];
						model = point._model;
						controlPoints = helpers.splineCurve(
							helpers.previousItem(points, i)._model,
							model,
							helpers.nextItem(points, i)._model,
							meta.dataset._model.tension
						);
						model.controlPointPreviousX = controlPoints.previous.x;
						model.controlPointPreviousY = controlPoints.previous.y;
						model.controlPointNextX = controlPoints.next.x;
						model.controlPointNextY = controlPoints.next.y;
					}
				}
	
				if (me.chart.options.elements.line.capBezierPoints) {
					for (i = 0, ilen = points.length; i < ilen; ++i) {
						model = points[i]._model;
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			},
	
			draw: function(ease) {
				var me = this;
				var meta = me.getMeta();
				var points = meta.data || [];
				var easingDecimal = ease || 1;
				var i, ilen;
	
				// Transition Point Locations
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].transition(easingDecimal);
				}
	
				Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
				// Transition and Draw the line
				if (lineEnabled(me.getDataset(), me.chart.options)) {
					meta.dataset.transition(easingDecimal).draw();
				}
				Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
	
				// Draw the points
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].draw(me.chart.chartArea);
				}
			},
	
			setHoverStyle: function(point) {
				// Point
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
	
				model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
				model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
			},
	
			removeHoverStyle: function(point) {
				var me = this;
				var dataset = me.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
	
				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
					dataset.pointRadius = dataset.radius;
				}
	
				model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
				model.backgroundColor = me.getPointBackgroundColor(point, index);
				model.borderColor = me.getPointBorderColor(point, index);
				model.borderWidth = me.getPointBorderWidth(point, index);
			}
		});
	};
	
	},{}],19:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.polarArea = {
	
			scale: {
				type: 'radialLinear',
				lineArc: true, // so that lines are circular
				ticks: {
					beginAtZero: true
				}
			},
	
			// Boolean - Whether to animate the rotation of the chart
			animation: {
				animateRotate: true,
				animateScale: true
			},
	
			startAngle: -0.5 * Math.PI,
			aspectRatio: 1,
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');
	
				var data = chart.data;
				var datasets = data.datasets;
				var labels = data.labels;
	
				if (datasets.length) {
					for (var i = 0; i < datasets[0].data.length; ++i) {
						text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
						if (labels[i]) {
							text.push(labels[i]);
						}
						text.push('</li>');
					}
				}
	
				text.push('</ul>');
				return text.join('');
			},
			legend: {
				labels: {
					generateLabels: function(chart) {
						var data = chart.data;
						if (data.labels.length && data.datasets.length) {
							return data.labels.map(function(label, i) {
								var meta = chart.getDatasetMeta(0);
								var ds = data.datasets[0];
								var arc = meta.data[i];
								var custom = arc.custom || {};
								var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
								var arcOpts = chart.options.elements.arc;
								var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
								var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
								var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
	
								return {
									text: label,
									fillStyle: fill,
									strokeStyle: stroke,
									lineWidth: bw,
									hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
	
									// Extra data used for toggling the correct item
									index: i
								};
							});
						}
						return [];
					}
				},
	
				onClick: function(e, legendItem) {
					var index = legendItem.index;
					var chart = this.chart;
					var i, ilen, meta;
	
					for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
						meta = chart.getDatasetMeta(i);
						meta.data[index].hidden = !meta.data[index].hidden;
					}
	
					chart.update();
				}
			},
	
			// Need to override these to give a nice default
			tooltips: {
				callbacks: {
					title: function() {
						return '';
					},
					label: function(tooltipItem, data) {
						return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
					}
				}
			}
		};
	
		Chart.controllers.polarArea = Chart.DatasetController.extend({
	
			dataElementType: Chart.elements.Arc,
	
			linkScales: helpers.noop,
	
			update: function(reset) {
				var me = this;
				var chart = me.chart;
				var chartArea = chart.chartArea;
				var meta = me.getMeta();
				var opts = chart.options;
				var arcOpts = opts.elements.arc;
				var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
				chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
				chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
				chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
	
				me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
				me.innerRadius = me.outerRadius - chart.radiusLength;
	
				meta.count = me.countVisibleElements();
	
				helpers.each(meta.data, function(arc, index) {
					me.updateElement(arc, index, reset);
				});
			},
	
			updateElement: function(arc, index, reset) {
				var me = this;
				var chart = me.chart;
				var dataset = me.getDataset();
				var opts = chart.options;
				var animationOpts = opts.animation;
				var scale = chart.scale;
				var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
				var labels = chart.data.labels;
	
				var circumference = me.calculateCircumference(dataset.data[index]);
				var centerX = scale.xCenter;
				var centerY = scale.yCenter;
	
				// If there is NaN data before us, we need to calculate the starting angle correctly.
				// We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
				var visibleCount = 0;
				var meta = me.getMeta();
				for (var i = 0; i < index; ++i) {
					if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
						++visibleCount;
					}
				}
	
				// var negHalfPI = -0.5 * Math.PI;
				var datasetStartAngle = opts.startAngle;
				var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
				var startAngle = datasetStartAngle + (circumference * visibleCount);
				var endAngle = startAngle + (arc.hidden ? 0 : circumference);
	
				var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
	
				helpers.extend(arc, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
					_scale: scale,
	
					// Desired view properties
					_model: {
						x: centerX,
						y: centerY,
						innerRadius: 0,
						outerRadius: reset ? resetRadius : distance,
						startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
						endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
						label: getValueAtIndexOrDefault(labels, index, labels[index])
					}
				});
	
				// Apply border and fill style
				me.removeHoverStyle(arc);
	
				arc.pivot();
			},
	
			removeHoverStyle: function(arc) {
				Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
			},
	
			countVisibleElements: function() {
				var dataset = this.getDataset();
				var meta = this.getMeta();
				var count = 0;
	
				helpers.each(meta.data, function(element, index) {
					if (!isNaN(dataset.data[index]) && !element.hidden) {
						count++;
					}
				});
	
				return count;
			},
	
			calculateCircumference: function(value) {
				var count = this.getMeta().count;
				if (count > 0 && !isNaN(value)) {
					return (2 * Math.PI) / count;
				}
				return 0;
			}
		});
	};
	
	},{}],20:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.radar = {
			aspectRatio: 1,
			scale: {
				type: 'radialLinear'
			},
			elements: {
				line: {
					tension: 0 // no bezier in radar
				}
			}
		};
	
		Chart.controllers.radar = Chart.DatasetController.extend({
	
			datasetElementType: Chart.elements.Line,
	
			dataElementType: Chart.elements.Point,
	
			linkScales: helpers.noop,
	
			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var line = meta.dataset;
				var points = meta.data;
				var custom = line.custom || {};
				var dataset = me.getDataset();
				var lineElementOptions = me.chart.options.elements.line;
				var scale = me.chart.scale;
	
				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
					dataset.lineTension = dataset.tension;
				}
	
				helpers.extend(meta.dataset, {
					// Utility
					_datasetIndex: me.index,
					// Data
					_children: points,
					_loop: true,
					// Model
					_model: {
						// Appearance
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
						borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
						fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
						borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
						borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
						borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
						borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
	
						// Scale
						scaleTop: scale.top,
						scaleBottom: scale.bottom,
						scaleZero: scale.getBasePosition()
					}
				});
	
				meta.dataset.pivot();
	
				// Update Points
				helpers.each(points, function(point, index) {
					me.updateElement(point, index, reset);
				}, me);
	
				// Update bezier control points
				me.updateBezierControlPoints();
			},
			updateElement: function(point, index, reset) {
				var me = this;
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var scale = me.chart.scale;
				var pointElementOptions = me.chart.options.elements.point;
				var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
	
				helpers.extend(point, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
					_scale: scale,
	
					// Desired view properties
					_model: {
						x: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales
						y: reset ? scale.yCenter : pointPosition.y,
	
						// Appearance
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
						radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
						borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
						pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
	
						// Tooltip
						hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
					}
				});
	
				point._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
			},
			updateBezierControlPoints: function() {
				var chartArea = this.chart.chartArea;
				var meta = this.getMeta();
	
				helpers.each(meta.data, function(point, index) {
					var model = point._model;
					var controlPoints = helpers.splineCurve(
						helpers.previousItem(meta.data, index, true)._model,
						model,
						helpers.nextItem(meta.data, index, true)._model,
						model.tension
					);
	
					// Prevent the bezier going outside of the bounds of the graph
					model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
					model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
	
					model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
					model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
	
					// Now pivot the point for animation
					point.pivot();
				});
			},
	
			draw: function(ease) {
				var meta = this.getMeta();
				var easingDecimal = ease || 1;
	
				// Transition Point Locations
				helpers.each(meta.data, function(point) {
					point.transition(easingDecimal);
				});
	
				// Transition and Draw the line
				meta.dataset.transition(easingDecimal).draw();
	
				// Draw the points
				helpers.each(meta.data, function(point) {
					point.draw();
				});
			},
	
			setHoverStyle: function(point) {
				// Point
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var custom = point.custom || {};
				var index = point._index;
				var model = point._model;
	
				model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
			},
	
			removeHoverStyle: function(point) {
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var custom = point.custom || {};
				var index = point._index;
				var model = point._model;
				var pointElementOptions = this.chart.options.elements.point;
	
				model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
			}
		});
	};
	
	},{}],21:[function(require,module,exports){
	/* global window: false */
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.global.animation = {
			duration: 1000,
			easing: 'easeOutQuart',
			onProgress: helpers.noop,
			onComplete: helpers.noop
		};
	
		Chart.Animation = Chart.Element.extend({
			currentStep: null, // the current animation step
			numSteps: 60, // default number of steps
			easing: '', // the easing to use for this animation
			render: null, // render function used by the animation service
	
			onAnimationProgress: null, // user specified callback to fire on each step of the animation
			onAnimationComplete: null // user specified callback to fire when the animation finishes
		});
	
		Chart.animationService = {
			frameDuration: 17,
			animations: [],
			dropFrames: 0,
			request: null,
	
			/**
			 * @function Chart.animationService.addAnimation
			 * @param chartInstance {ChartController} the chart to animate
			 * @param animationObject {IAnimation} the animation that we will animate
			 * @param duration {Number} length of animation in ms
			 * @param lazy {Boolean} if true, the chart is not marked as animating to enable more responsive interactions
			 */
			addAnimation: function(chartInstance, animationObject, duration, lazy) {
				var me = this;
	
				if (!lazy) {
					chartInstance.animating = true;
				}
	
				for (var index = 0; index < me.animations.length; ++index) {
					if (me.animations[index].chartInstance === chartInstance) {
						// replacing an in progress animation
						me.animations[index].animationObject = animationObject;
						return;
					}
				}
	
				me.animations.push({
					chartInstance: chartInstance,
					animationObject: animationObject
				});
	
				// If there are no animations queued, manually kickstart a digest, for lack of a better word
				if (me.animations.length === 1) {
					me.requestAnimationFrame();
				}
			},
			// Cancel the animation for a given chart instance
			cancelAnimation: function(chartInstance) {
				var index = helpers.findIndex(this.animations, function(animationWrapper) {
					return animationWrapper.chartInstance === chartInstance;
				});
	
				if (index !== -1) {
					this.animations.splice(index, 1);
					chartInstance.animating = false;
				}
			},
			requestAnimationFrame: function() {
				var me = this;
				if (me.request === null) {
					// Skip animation frame requests until the active one is executed.
					// This can happen when processing mouse events, e.g. 'mousemove'
					// and 'mouseout' events will trigger multiple renders.
					me.request = helpers.requestAnimFrame.call(window, function() {
						me.request = null;
						me.startDigest();
					});
				}
			},
			startDigest: function() {
				var me = this;
	
				var startTime = Date.now();
				var framesToDrop = 0;
	
				if (me.dropFrames > 1) {
					framesToDrop = Math.floor(me.dropFrames);
					me.dropFrames = me.dropFrames % 1;
				}
	
				var i = 0;
				while (i < me.animations.length) {
					if (me.animations[i].animationObject.currentStep === null) {
						me.animations[i].animationObject.currentStep = 0;
					}
	
					me.animations[i].animationObject.currentStep += 1 + framesToDrop;
	
					if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
						me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
					}
	
					me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
					if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
						me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
					}
	
					if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
						if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
							me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
						}
	
						// executed the last frame. Remove the animation.
						me.animations[i].chartInstance.animating = false;
	
						me.animations.splice(i, 1);
					} else {
						++i;
					}
				}
	
				var endTime = Date.now();
				var dropFrames = (endTime - startTime) / me.frameDuration;
	
				me.dropFrames += dropFrames;
	
				// Do we have more stuff to animate?
				if (me.animations.length > 0) {
					me.requestAnimationFrame();
				}
			}
		};
	};
	
	},{}],22:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
		// Global Chart canvas helpers object for drawing items to canvas
		var helpers = Chart.canvasHelpers = {};
	
		helpers.drawPoint = function(ctx, pointStyle, radius, x, y) {
			var type, edgeLength, xOffset, yOffset, height, size;
	
			if (typeof pointStyle === 'object') {
				type = pointStyle.toString();
				if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
					ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
					return;
				}
			}
	
			if (isNaN(radius) || radius <= 0) {
				return;
			}
	
			switch (pointStyle) {
			// Default includes circle
			default:
				ctx.beginPath();
				ctx.arc(x, y, radius, 0, Math.PI * 2);
				ctx.closePath();
				ctx.fill();
				break;
			case 'triangle':
				ctx.beginPath();
				edgeLength = 3 * radius / Math.sqrt(3);
				height = edgeLength * Math.sqrt(3) / 2;
				ctx.moveTo(x - edgeLength / 2, y + height / 3);
				ctx.lineTo(x + edgeLength / 2, y + height / 3);
				ctx.lineTo(x, y - 2 * height / 3);
				ctx.closePath();
				ctx.fill();
				break;
			case 'rect':
				size = 1 / Math.SQRT2 * radius;
				ctx.beginPath();
				ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
				ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
				break;
			case 'rectRounded':
				var offset = radius / Math.SQRT2;
				var leftX = x - offset;
				var topY = y - offset;
				var sideSize = Math.SQRT2 * radius;
				Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
				ctx.fill();
				break;
			case 'rectRot':
				size = 1 / Math.SQRT2 * radius;
				ctx.beginPath();
				ctx.moveTo(x - size, y);
				ctx.lineTo(x, y + size);
				ctx.lineTo(x + size, y);
				ctx.lineTo(x, y - size);
				ctx.closePath();
				ctx.fill();
				break;
			case 'cross':
				ctx.beginPath();
				ctx.moveTo(x, y + radius);
				ctx.lineTo(x, y - radius);
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			case 'crossRot':
				ctx.beginPath();
				xOffset = Math.cos(Math.PI / 4) * radius;
				yOffset = Math.sin(Math.PI / 4) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x - xOffset, y + yOffset);
				ctx.lineTo(x + xOffset, y - yOffset);
				ctx.closePath();
				break;
			case 'star':
				ctx.beginPath();
				ctx.moveTo(x, y + radius);
				ctx.lineTo(x, y - radius);
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				xOffset = Math.cos(Math.PI / 4) * radius;
				yOffset = Math.sin(Math.PI / 4) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x - xOffset, y + yOffset);
				ctx.lineTo(x + xOffset, y - yOffset);
				ctx.closePath();
				break;
			case 'line':
				ctx.beginPath();
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			case 'dash':
				ctx.beginPath();
				ctx.moveTo(x, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			}
	
			ctx.stroke();
		};
	
		helpers.clipArea = function(ctx, clipArea) {
			ctx.save();
			ctx.beginPath();
			ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
			ctx.clip();
		};
	
		helpers.unclipArea = function(ctx) {
			ctx.restore();
		};
	
	};
	
	},{}],23:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var plugins = Chart.plugins;
		var platform = Chart.platform;
	
		// Create a dictionary of chart types, to allow for extension of existing types
		Chart.types = {};
	
		// Store a reference to each instance - allowing us to globally resize chart instances on window resize.
		// Destroy method on the chart will remove the instance of the chart from this reference.
		Chart.instances = {};
	
		// Controllers available for dataset visualization eg. bar, line, slice, etc.
		Chart.controllers = {};
	
		/**
		 * Initializes the given config with global and chart default values.
		 */
		function initConfig(config) {
			config = config || {};
	
			// Do NOT use configMerge() for the data object because this method merges arrays
			// and so would change references to labels and datasets, preventing data updates.
			var data = config.data = config.data || {};
			data.datasets = data.datasets || [];
			data.labels = data.labels || [];
	
			config.options = helpers.configMerge(
				Chart.defaults.global,
				Chart.defaults[config.type],
				config.options || {});
	
			return config;
		}
	
		/**
		 * Updates the config of the chart
		 * @param chart {Chart.Controller} chart to update the options for
		 */
		function updateConfig(chart) {
			var newOptions = chart.options;
	
			// Update Scale(s) with options
			if (newOptions.scale) {
				chart.scale.options = newOptions.scale;
			} else if (newOptions.scales) {
				newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function(scaleOptions) {
					chart.scales[scaleOptions.id].options = scaleOptions;
				});
			}
	
			// Tooltip
			chart.tooltip._options = newOptions.tooltips;
		}
	
		/**
		 * @class Chart.Controller
		 * The main controller of a chart.
		 */
		Chart.Controller = function(item, config, instance) {
			var me = this;
	
			config = initConfig(config);
	
			var context = platform.acquireContext(item, config);
			var canvas = context && context.canvas;
			var height = canvas && canvas.height;
			var width = canvas && canvas.width;
	
			instance.ctx = context;
			instance.canvas = canvas;
			instance.config = config;
			instance.width = width;
			instance.height = height;
			instance.aspectRatio = height? width / height : null;
	
			me.id = helpers.uid();
			me.chart = instance;
			me.config = config;
			me.options = config.options;
			me._bufferedRender = false;
	
			// Add the chart instance to the global namespace
			Chart.instances[me.id] = me;
	
			Object.defineProperty(me, 'data', {
				get: function() {
					return me.config.data;
				}
			});
	
			if (!context || !canvas) {
				// The given item is not a compatible context2d element, let's return before finalizing
				// the chart initialization but after setting basic chart / controller properties that
				// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
				// https://github.com/chartjs/Chart.js/issues/2807
				console.error("Failed to create chart: can't acquire context from the given item");
				return me;
			}
	
			me.initialize();
			me.update();
	
			return me;
		};
	
		helpers.extend(Chart.Controller.prototype, /** @lends Chart.Controller.prototype */ {
			initialize: function() {
				var me = this;
	
				// Before init plugin notification
				plugins.notify(me, 'beforeInit');
	
				helpers.retinaScale(me.chart);
	
				me.bindEvents();
	
				if (me.options.responsive) {
					// Initial resize before chart draws (must be silent to preserve initial animations).
					me.resize(true);
				}
	
				// Make sure scales have IDs and are built before we build any controllers.
				me.ensureScalesHaveIDs();
				me.buildScales();
				me.initToolTip();
	
				// After init plugin notification
				plugins.notify(me, 'afterInit');
	
				return me;
			},
	
			clear: function() {
				helpers.clear(this.chart);
				return this;
			},
	
			stop: function() {
				// Stops any current animation loop occurring
				Chart.animationService.cancelAnimation(this);
				return this;
			},
	
			resize: function(silent) {
				var me = this;
				var chart = me.chart;
				var options = me.options;
				var canvas = chart.canvas;
				var aspectRatio = (options.maintainAspectRatio && chart.aspectRatio) || null;
	
				// the canvas render width and height will be casted to integers so make sure that
				// the canvas display style uses the same integer values to avoid blurring effect.
				var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
				var newHeight = Math.floor(aspectRatio? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));
	
				if (chart.width === newWidth && chart.height === newHeight) {
					return;
				}
	
				canvas.width = chart.width = newWidth;
				canvas.height = chart.height = newHeight;
				canvas.style.width = newWidth + 'px';
				canvas.style.height = newHeight + 'px';
	
				helpers.retinaScale(chart);
	
				if (!silent) {
					// Notify any plugins about the resize
					var newSize = {width: newWidth, height: newHeight};
					plugins.notify(me, 'resize', [newSize]);
	
					// Notify of resize
					if (me.options.onResize) {
						me.options.onResize(me, newSize);
					}
	
					me.stop();
					me.update(me.options.responsiveAnimationDuration);
				}
			},
	
			ensureScalesHaveIDs: function() {
				var options = this.options;
				var scalesOptions = options.scales || {};
				var scaleOptions = options.scale;
	
				helpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {
					xAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);
				});
	
				helpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {
					yAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);
				});
	
				if (scaleOptions) {
					scaleOptions.id = scaleOptions.id || 'scale';
				}
			},
	
			/**
			 * Builds a map of scale ID to scale object for future lookup.
			 */
			buildScales: function() {
				var me = this;
				var options = me.options;
				var scales = me.scales = {};
				var items = [];
	
				if (options.scales) {
					items = items.concat(
						(options.scales.xAxes || []).map(function(xAxisOptions) {
							return {options: xAxisOptions, dtype: 'category'};
						}),
						(options.scales.yAxes || []).map(function(yAxisOptions) {
							return {options: yAxisOptions, dtype: 'linear'};
						})
					);
				}
	
				if (options.scale) {
					items.push({options: options.scale, dtype: 'radialLinear', isDefault: true});
				}
	
				helpers.each(items, function(item) {
					var scaleOptions = item.options;
					var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
					var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
					if (!scaleClass) {
						return;
					}
	
					var scale = new scaleClass({
						id: scaleOptions.id,
						options: scaleOptions,
						ctx: me.chart.ctx,
						chart: me
					});
	
					scales[scale.id] = scale;
	
					// TODO(SB): I think we should be able to remove this custom case (options.scale)
					// and consider it as a regular scale part of the "scales"" map only! This would
					// make the logic easier and remove some useless? custom code.
					if (item.isDefault) {
						me.scale = scale;
					}
				});
	
				Chart.scaleService.addScalesToLayout(this);
			},
	
			buildOrUpdateControllers: function() {
				var me = this;
				var types = [];
				var newControllers = [];
	
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					var meta = me.getDatasetMeta(datasetIndex);
					if (!meta.type) {
						meta.type = dataset.type || me.config.type;
					}
	
					types.push(meta.type);
	
					if (meta.controller) {
						meta.controller.updateIndex(datasetIndex);
					} else {
						meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
						newControllers.push(meta.controller);
					}
				}, me);
	
				if (types.length > 1) {
					for (var i = 1; i < types.length; i++) {
						if (types[i] !== types[i - 1]) {
							me.isCombo = true;
							break;
						}
					}
				}
	
				return newControllers;
			},
	
			/**
			 * Reset the elements of all datasets
			 * @private
			 */
			resetElements: function() {
				var me = this;
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					me.getDatasetMeta(datasetIndex).controller.reset();
				}, me);
			},
	
			/**
			* Resets the chart back to it's state before the initial animation
			*/
			reset: function() {
				this.resetElements();
				this.tooltip.initialize();
			},
	
			update: function(animationDuration, lazy) {
				var me = this;
	
				updateConfig(me);
	
				if (plugins.notify(me, 'beforeUpdate') === false) {
					return;
				}
	
				// In case the entire data object changed
				me.tooltip._data = me.data;
	
				// Make sure dataset controllers are updated and new controllers are reset
				var newControllers = me.buildOrUpdateControllers();
	
				// Make sure all dataset controllers have correct meta data counts
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
				}, me);
	
				me.updateLayout();
	
				// Can only reset the new controllers after the scales have been updated
				helpers.each(newControllers, function(controller) {
					controller.reset();
				});
	
				me.updateDatasets();
	
				// Do this before render so that any plugins that need final scale updates can use it
				plugins.notify(me, 'afterUpdate');
	
				if (me._bufferedRender) {
					me._bufferedRequest = {
						lazy: lazy,
						duration: animationDuration
					};
				} else {
					me.render(animationDuration, lazy);
				}
			},
	
			/**
			 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
			 * hook, in which case, plugins will not be called on `afterLayout`.
			 * @private
			 */
			updateLayout: function() {
				var me = this;
	
				if (plugins.notify(me, 'beforeLayout') === false) {
					return;
				}
	
				Chart.layoutService.update(this, this.chart.width, this.chart.height);
	
				/**
				 * Provided for backward compatibility, use `afterLayout` instead.
				 * @method IPlugin#afterScaleUpdate
				 * @deprecated since version 2.5.0
				 * @todo remove at version 3
				 */
				plugins.notify(me, 'afterScaleUpdate');
				plugins.notify(me, 'afterLayout');
			},
	
			/**
			 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
			 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
			 * @private
			 */
			updateDatasets: function() {
				var me = this;
	
				if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
					return;
				}
	
				for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
					me.getDatasetMeta(i).controller.update();
				}
	
				plugins.notify(me, 'afterDatasetsUpdate');
			},
	
			render: function(duration, lazy) {
				var me = this;
	
				if (plugins.notify(me, 'beforeRender') === false) {
					return;
				}
	
				var animationOptions = me.options.animation;
				var onComplete = function() {
					plugins.notify(me, 'afterRender');
					var callback = animationOptions && animationOptions.onComplete;
					if (callback && callback.call) {
						callback.call(me);
					}
				};
	
				if (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {
					var animation = new Chart.Animation();
					animation.numSteps = (duration || animationOptions.duration) / 16.66; // 60 fps
					animation.easing = animationOptions.easing;
	
					// render function
					animation.render = function(chartInstance, animationObject) {
						var easingFunction = helpers.easingEffects[animationObject.easing];
						var stepDecimal = animationObject.currentStep / animationObject.numSteps;
						var easeDecimal = easingFunction(stepDecimal);
	
						chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
					};
	
					// user events
					animation.onAnimationProgress = animationOptions.onProgress;
					animation.onAnimationComplete = onComplete;
	
					Chart.animationService.addAnimation(me, animation, duration, lazy);
				} else {
					me.draw();
					onComplete();
				}
	
				return me;
			},
	
			draw: function(easingValue) {
				var me = this;
	
				me.clear();
	
				if (easingValue === undefined || easingValue === null) {
					easingValue = 1;
				}
	
				if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
					return;
				}
	
				// Draw all the scales
				helpers.each(me.boxes, function(box) {
					box.draw(me.chartArea);
				}, me);
	
				if (me.scale) {
					me.scale.draw();
				}
	
				me.drawDatasets(easingValue);
	
				// Finally draw the tooltip
				me.tooltip.transition(easingValue).draw();
	
				plugins.notify(me, 'afterDraw', [easingValue]);
			},
	
			/**
			 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
			 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
			 * @private
			 */
			drawDatasets: function(easingValue) {
				var me = this;
	
				if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
					return;
				}
	
				// Draw each dataset via its respective controller (reversed to support proper line stacking)
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					if (me.isDatasetVisible(datasetIndex)) {
						me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
					}
				}, me, true);
	
				plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
			},
	
			// Get the single element that was clicked on
			// @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
			getElementAtEvent: function(e) {
				return Chart.Interaction.modes.single(this, e);
			},
	
			getElementsAtEvent: function(e) {
				return Chart.Interaction.modes.label(this, e, {intersect: true});
			},
	
			getElementsAtXAxis: function(e) {
				return Chart.Interaction.modes['x-axis'](this, e, {intersect: true});
			},
	
			getElementsAtEventForMode: function(e, mode, options) {
				var method = Chart.Interaction.modes[mode];
				if (typeof method === 'function') {
					return method(this, e, options);
				}
	
				return [];
			},
	
			getDatasetAtEvent: function(e) {
				return Chart.Interaction.modes.dataset(this, e, {intersect: true});
			},
	
			getDatasetMeta: function(datasetIndex) {
				var me = this;
				var dataset = me.data.datasets[datasetIndex];
				if (!dataset._meta) {
					dataset._meta = {};
				}
	
				var meta = dataset._meta[me.id];
				if (!meta) {
					meta = dataset._meta[me.id] = {
						type: null,
						data: [],
						dataset: null,
						controller: null,
						hidden: null,			// See isDatasetVisible() comment
						xAxisID: null,
						yAxisID: null
					};
				}
	
				return meta;
			},
	
			getVisibleDatasetCount: function() {
				var count = 0;
				for (var i = 0, ilen = this.data.datasets.length; i<ilen; ++i) {
					if (this.isDatasetVisible(i)) {
						count++;
					}
				}
				return count;
			},
	
			isDatasetVisible: function(datasetIndex) {
				var meta = this.getDatasetMeta(datasetIndex);
	
				// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
				// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
				return typeof meta.hidden === 'boolean'? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
			},
	
			generateLegend: function() {
				return this.options.legendCallback(this);
			},
	
			destroy: function() {
				var me = this;
				var canvas = me.chart.canvas;
				var meta, i, ilen;
	
				me.stop();
	
				// dataset controllers need to cleanup associated data
				for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
					meta = me.getDatasetMeta(i);
					if (meta.controller) {
						meta.controller.destroy();
						meta.controller = null;
					}
				}
	
				if (canvas) {
					me.unbindEvents();
					helpers.clear(me.chart);
					platform.releaseContext(me.chart.ctx);
					me.chart.canvas = null;
					me.chart.ctx = null;
				}
	
				plugins.notify(me, 'destroy');
	
				delete Chart.instances[me.id];
			},
	
			toBase64Image: function() {
				return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
			},
	
			initToolTip: function() {
				var me = this;
				me.tooltip = new Chart.Tooltip({
					_chart: me.chart,
					_chartInstance: me,
					_data: me.data,
					_options: me.options.tooltips
				}, me);
				me.tooltip.initialize();
			},
	
			/**
			 * @private
			 */
			bindEvents: function() {
				var me = this;
				var listeners = me._listeners = {};
				var listener = function() {
					me.eventHandler.apply(me, arguments);
				};
	
				helpers.each(me.options.events, function(type) {
					platform.addEventListener(me, type, listener);
					listeners[type] = listener;
				});
	
				// Responsiveness is currently based on the use of an iframe, however this method causes
				// performance issues and could be troublesome when used with ad blockers. So make sure
				// that the user is still able to create a chart without iframe when responsive is false.
				// See https://github.com/chartjs/Chart.js/issues/2210
				if (me.options.responsive) {
					listener = function() {
						me.resize();
					};
	
					platform.addEventListener(me, 'resize', listener);
					listeners.resize = listener;
				}
			},
	
			/**
			 * @private
			 */
			unbindEvents: function() {
				var me = this;
				var listeners = me._listeners;
				if (!listeners) {
					return;
				}
	
				delete me._listeners;
				helpers.each(listeners, function(listener, type) {
					platform.removeEventListener(me, type, listener);
				});
			},
	
			updateHoverStyle: function(elements, mode, enabled) {
				var method = enabled? 'setHoverStyle' : 'removeHoverStyle';
				var element, i, ilen;
	
				for (i=0, ilen=elements.length; i<ilen; ++i) {
					element = elements[i];
					if (element) {
						this.getDatasetMeta(element._datasetIndex).controller[method](element);
					}
				}
			},
	
			/**
			 * @private
			 */
			eventHandler: function(e) {
				var me = this;
				var tooltip = me.tooltip;
	
				if (plugins.notify(me, 'beforeEvent', [e]) === false) {
					return;
				}
	
				// Buffer any update calls so that renders do not occur
				me._bufferedRender = true;
				me._bufferedRequest = null;
	
				var changed = me.handleEvent(e);
				changed |= tooltip && tooltip.handleEvent(e);
	
				plugins.notify(me, 'afterEvent', [e]);
	
				var bufferedRequest = me._bufferedRequest;
				if (bufferedRequest) {
					// If we have an update that was triggered, we need to do a normal render
					me.render(bufferedRequest.duration, bufferedRequest.lazy);
				} else if (changed && !me.animating) {
					// If entering, leaving, or changing elements, animate the change via pivot
					me.stop();
	
					// We only need to render at this point. Updating will cause scales to be
					// recomputed generating flicker & using more memory than necessary.
					me.render(me.options.hover.animationDuration, true);
				}
	
				me._bufferedRender = false;
				me._bufferedRequest = null;
	
				return me;
			},
	
			/**
			 * Handle an event
			 * @private
			 * @param {IEvent} event the event to handle
			 * @return {Boolean} true if the chart needs to re-render
			 */
			handleEvent: function(e) {
				var me = this;
				var options = me.options || {};
				var hoverOptions = options.hover;
				var changed = false;
	
				me.lastActive = me.lastActive || [];
	
				// Find Active Elements for hover and tooltips
				if (e.type === 'mouseout') {
					me.active = [];
				} else {
					me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
				}
	
				// On Hover hook
				if (hoverOptions.onHover) {
					// Need to call with native event here to not break backwards compatibility
					hoverOptions.onHover.call(me, e.native, me.active);
				}
	
				if (e.type === 'mouseup' || e.type === 'click') {
					if (options.onClick) {
						// Use e.native here for backwards compatibility
						options.onClick.call(me, e.native, me.active);
					}
				}
	
				// Remove styling for last active (even if it may still be active)
				if (me.lastActive.length) {
					me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
				}
	
				// Built in hover styling
				if (me.active.length && hoverOptions.mode) {
					me.updateHoverStyle(me.active, hoverOptions.mode, true);
				}
	
				changed = !helpers.arrayEquals(me.active, me.lastActive);
	
				// Remember Last Actives
				me.lastActive = me.active;
	
				return changed;
			}
		});
	};
	
	},{}],24:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
	
		/**
		 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
		 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
		 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
		 */
		function listenArrayEvents(array, listener) {
			if (array._chartjs) {
				array._chartjs.listeners.push(listener);
				return;
			}
	
			Object.defineProperty(array, '_chartjs', {
				configurable: true,
				enumerable: false,
				value: {
					listeners: [listener]
				}
			});
	
			arrayEvents.forEach(function(key) {
				var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
				var base = array[key];
	
				Object.defineProperty(array, key, {
					configurable: true,
					enumerable: false,
					value: function() {
						var args = Array.prototype.slice.call(arguments);
						var res = base.apply(this, args);
	
						helpers.each(array._chartjs.listeners, function(object) {
							if (typeof object[method] === 'function') {
								object[method].apply(object, args);
							}
						});
	
						return res;
					}
				});
			});
		}
	
		/**
		 * Removes the given array event listener and cleanup extra attached properties (such as
		 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
		 */
		function unlistenArrayEvents(array, listener) {
			var stub = array._chartjs;
			if (!stub) {
				return;
			}
	
			var listeners = stub.listeners;
			var index = listeners.indexOf(listener);
			if (index !== -1) {
				listeners.splice(index, 1);
			}
	
			if (listeners.length > 0) {
				return;
			}
	
			arrayEvents.forEach(function(key) {
				delete array[key];
			});
	
			delete array._chartjs;
		}
	
		// Base class for all dataset controllers (line, bar, etc)
		Chart.DatasetController = function(chart, datasetIndex) {
			this.initialize(chart, datasetIndex);
		};
	
		helpers.extend(Chart.DatasetController.prototype, {
	
			/**
			 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
			 * @type {Chart.core.element}
			 */
			datasetElementType: null,
	
			/**
			 * Element type used to generate a meta data (e.g. Chart.element.Point).
			 * @type {Chart.core.element}
			 */
			dataElementType: null,
	
			initialize: function(chart, datasetIndex) {
				var me = this;
				me.chart = chart;
				me.index = datasetIndex;
				me.linkScales();
				me.addElements();
			},
	
			updateIndex: function(datasetIndex) {
				this.index = datasetIndex;
			},
	
			linkScales: function() {
				var me = this;
				var meta = me.getMeta();
				var dataset = me.getDataset();
	
				if (meta.xAxisID === null) {
					meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
				}
				if (meta.yAxisID === null) {
					meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
				}
			},
	
			getDataset: function() {
				return this.chart.data.datasets[this.index];
			},
	
			getMeta: function() {
				return this.chart.getDatasetMeta(this.index);
			},
	
			getScaleForId: function(scaleID) {
				return this.chart.scales[scaleID];
			},
	
			reset: function() {
				this.update(true);
			},
	
			/**
			 * @private
			 */
			destroy: function() {
				if (this._data) {
					unlistenArrayEvents(this._data, this);
				}
			},
	
			createMetaDataset: function() {
				var me = this;
				var type = me.datasetElementType;
				return type && new type({
					_chart: me.chart.chart,
					_datasetIndex: me.index
				});
			},
	
			createMetaData: function(index) {
				var me = this;
				var type = me.dataElementType;
				return type && new type({
					_chart: me.chart.chart,
					_datasetIndex: me.index,
					_index: index
				});
			},
	
			addElements: function() {
				var me = this;
				var meta = me.getMeta();
				var data = me.getDataset().data || [];
				var metaData = meta.data;
				var i, ilen;
	
				for (i=0, ilen=data.length; i<ilen; ++i) {
					metaData[i] = metaData[i] || me.createMetaData(i);
				}
	
				meta.dataset = meta.dataset || me.createMetaDataset();
			},
	
			addElementAndReset: function(index) {
				var element = this.createMetaData(index);
				this.getMeta().data.splice(index, 0, element);
				this.updateElement(element, index, true);
			},
	
			buildOrUpdateElements: function() {
				var me = this;
				var dataset = me.getDataset();
				var data = dataset.data || (dataset.data = []);
	
				// In order to correctly handle data addition/deletion animation (an thus simulate
				// real-time charts), we need to monitor these data modifications and synchronize
				// the internal meta data accordingly.
				if (me._data !== data) {
					if (me._data) {
						// This case happens when the user replaced the data array instance.
						unlistenArrayEvents(me._data, me);
					}
	
					listenArrayEvents(data, me);
					me._data = data;
				}
	
				// Re-sync meta data in case the user replaced the data array or if we missed
				// any updates and so make sure that we handle number of datapoints changing.
				me.resyncElements();
			},
	
			update: helpers.noop,
	
			draw: function(ease) {
				var easingDecimal = ease || 1;
				var i, len;
				var metaData = this.getMeta().data;
				for (i = 0, len = metaData.length; i < len; ++i) {
					metaData[i].transition(easingDecimal).draw();
				}
			},
	
			removeHoverStyle: function(element, elementOpts) {
				var dataset = this.chart.data.datasets[element._datasetIndex],
					index = element._index,
					custom = element.custom || {},
					valueOrDefault = helpers.getValueAtIndexOrDefault,
					model = element._model;
	
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
			},
	
			setHoverStyle: function(element) {
				var dataset = this.chart.data.datasets[element._datasetIndex],
					index = element._index,
					custom = element.custom || {},
					valueOrDefault = helpers.getValueAtIndexOrDefault,
					getHoverColor = helpers.getHoverColor,
					model = element._model;
	
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
			},
	
			/**
			 * @private
			 */
			resyncElements: function() {
				var me = this;
				var meta = me.getMeta();
				var data = me.getDataset().data;
				var numMeta = meta.data.length;
				var numData = data.length;
	
				if (numData < numMeta) {
					meta.data.splice(numData, numMeta - numData);
				} else if (numData > numMeta) {
					me.insertElements(numMeta, numData - numMeta);
				}
			},
	
			/**
			 * @private
			 */
			insertElements: function(start, count) {
				for (var i=0; i<count; ++i) {
					this.addElementAndReset(start + i);
				}
			},
	
			/**
			 * @private
			 */
			onDataPush: function() {
				this.insertElements(this.getDataset().data.length-1, arguments.length);
			},
	
			/**
			 * @private
			 */
			onDataPop: function() {
				this.getMeta().data.pop();
			},
	
			/**
			 * @private
			 */
			onDataShift: function() {
				this.getMeta().data.shift();
			},
	
			/**
			 * @private
			 */
			onDataSplice: function(start, count) {
				this.getMeta().data.splice(start, count);
				this.insertElements(start, arguments.length - 2);
			},
	
			/**
			 * @private
			 */
			onDataUnshift: function() {
				this.insertElements(0, arguments.length);
			}
		});
	
		Chart.DatasetController.extend = helpers.inherits;
	};
	
	},{}],25:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.elements = {};
	
		Chart.Element = function(configuration) {
			helpers.extend(this, configuration);
			this.initialize.apply(this, arguments);
		};
	
		helpers.extend(Chart.Element.prototype, {
	
			initialize: function() {
				this.hidden = false;
			},
	
			pivot: function() {
				var me = this;
				if (!me._view) {
					me._view = helpers.clone(me._model);
				}
				me._start = helpers.clone(me._view);
				return me;
			},
	
			transition: function(ease) {
				var me = this;
	
				if (!me._view) {
					me._view = helpers.clone(me._model);
				}
	
				// No animation -> No Transition
				if (ease === 1) {
					me._view = me._model;
					me._start = null;
					return me;
				}
	
				if (!me._start) {
					me.pivot();
				}
	
				helpers.each(me._model, function(value, key) {
	
					if (key[0] === '_') {
						// Only non-underscored properties
					// Init if doesn't exist
					} else if (!me._view.hasOwnProperty(key)) {
						if (typeof value === 'number' && !isNaN(me._view[key])) {
							me._view[key] = value * ease;
						} else {
							me._view[key] = value;
						}
					// No unnecessary computations
					} else if (value === me._view[key]) {
						// It's the same! Woohoo!
					// Color transitions if possible
					} else if (typeof value === 'string') {
						try {
							var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
							me._view[key] = color.rgbString();
						} catch (err) {
							me._view[key] = value;
						}
					// Number transitions
					} else if (typeof value === 'number') {
						var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
						me._view[key] = ((me._model[key] - startVal) * ease) + startVal;
					// Everything else
					} else {
						me._view[key] = value;
					}
				}, me);
	
				return me;
			},
	
			tooltipPosition: function() {
				return {
					x: this._model.x,
					y: this._model.y
				};
			},
	
			hasValue: function() {
				return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
			}
		});
	
		Chart.Element.extend = helpers.inherits;
	
	};
	
	},{}],26:[function(require,module,exports){
	/* global window: false */
	/* global document: false */
	'use strict';
	
	var color = require(2);
	
	module.exports = function(Chart) {
		// Global Chart helpers object for utility methods and classes
		var helpers = Chart.helpers = {};
	
		// -- Basic js utility methods
		helpers.each = function(loopable, callback, self, reverse) {
			// Check to see if null or undefined firstly.
			var i, len;
			if (helpers.isArray(loopable)) {
				len = loopable.length;
				if (reverse) {
					for (i = len - 1; i >= 0; i--) {
						callback.call(self, loopable[i], i);
					}
				} else {
					for (i = 0; i < len; i++) {
						callback.call(self, loopable[i], i);
					}
				}
			} else if (typeof loopable === 'object') {
				var keys = Object.keys(loopable);
				len = keys.length;
				for (i = 0; i < len; i++) {
					callback.call(self, loopable[keys[i]], keys[i]);
				}
			}
		};
		helpers.clone = function(obj) {
			var objClone = {};
			helpers.each(obj, function(value, key) {
				if (helpers.isArray(value)) {
					objClone[key] = value.slice(0);
				} else if (typeof value === 'object' && value !== null) {
					objClone[key] = helpers.clone(value);
				} else {
					objClone[key] = value;
				}
			});
			return objClone;
		};
		helpers.extend = function(base) {
			var setFn = function(value, key) {
				base[key] = value;
			};
			for (var i = 1, ilen = arguments.length; i < ilen; i++) {
				helpers.each(arguments[i], setFn);
			}
			return base;
		};
		// Need a special merge function to chart configs since they are now grouped
		helpers.configMerge = function(_base) {
			var base = helpers.clone(_base);
			helpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {
				helpers.each(extension, function(value, key) {
					var baseHasProperty = base.hasOwnProperty(key);
					var baseVal = baseHasProperty ? base[key] : {};
	
					if (key === 'scales') {
						// Scale config merging is complex. Add our own function here for that
						base[key] = helpers.scaleMerge(baseVal, value);
					} else if (key === 'scale') {
						// Used in polar area & radar charts since there is only one scale
						base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
					} else if (baseHasProperty
							&& typeof baseVal === 'object'
							&& !helpers.isArray(baseVal)
							&& baseVal !== null
							&& typeof value === 'object'
							&& !helpers.isArray(value)) {
						// If we are overwriting an object with an object, do a merge of the properties.
						base[key] = helpers.configMerge(baseVal, value);
					} else {
						// can just overwrite the value in this case
						base[key] = value;
					}
				});
			});
	
			return base;
		};
		helpers.scaleMerge = function(_base, extension) {
			var base = helpers.clone(_base);
	
			helpers.each(extension, function(value, key) {
				if (key === 'xAxes' || key === 'yAxes') {
					// These properties are arrays of items
					if (base.hasOwnProperty(key)) {
						helpers.each(value, function(valueObj, index) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
							if (index >= base[key].length || !base[key][index].type) {
								base[key].push(helpers.configMerge(axisDefaults, valueObj));
							} else if (valueObj.type && valueObj.type !== base[key][index].type) {
								// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
								base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
							} else {
								// Type is the same
								base[key][index] = helpers.configMerge(base[key][index], valueObj);
							}
						});
					} else {
						base[key] = [];
						helpers.each(value, function(valueObj) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
						});
					}
				} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
					// If we are overwriting an object with an object, do a merge of the properties.
					base[key] = helpers.configMerge(base[key], value);
	
				} else {
					// can just overwrite the value in this case
					base[key] = value;
				}
			});
	
			return base;
		};
		helpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {
			if (value === undefined || value === null) {
				return defaultValue;
			}
	
			if (helpers.isArray(value)) {
				return index < value.length ? value[index] : defaultValue;
			}
	
			return value;
		};
		helpers.getValueOrDefault = function(value, defaultValue) {
			return value === undefined ? defaultValue : value;
		};
		helpers.indexOf = Array.prototype.indexOf?
			function(array, item) {
				return array.indexOf(item);
			}:
			function(array, item) {
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (array[i] === item) {
						return i;
					}
				}
				return -1;
			};
		helpers.where = function(collection, filterCallback) {
			if (helpers.isArray(collection) && Array.prototype.filter) {
				return collection.filter(filterCallback);
			}
			var filtered = [];
	
			helpers.each(collection, function(item) {
				if (filterCallback(item)) {
					filtered.push(item);
				}
			});
	
			return filtered;
		};
		helpers.findIndex = Array.prototype.findIndex?
			function(array, callback, scope) {
				return array.findIndex(callback, scope);
			} :
			function(array, callback, scope) {
				scope = scope === undefined? array : scope;
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (callback.call(scope, array[i], i, array)) {
						return i;
					}
				}
				return -1;
			};
		helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to start of the array
			if (startIndex === undefined || startIndex === null) {
				startIndex = -1;
			}
			for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to end of the array
			if (startIndex === undefined || startIndex === null) {
				startIndex = arrayToSearch.length;
			}
			for (var i = startIndex - 1; i >= 0; i--) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers.inherits = function(extensions) {
			// Basic javascript inheritance based on the model created in Backbone.js
			var me = this;
			var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
				return me.apply(this, arguments);
			};
	
			var Surrogate = function() {
				this.constructor = ChartElement;
			};
			Surrogate.prototype = me.prototype;
			ChartElement.prototype = new Surrogate();
	
			ChartElement.extend = helpers.inherits;
	
			if (extensions) {
				helpers.extend(ChartElement.prototype, extensions);
			}
	
			ChartElement.__super__ = me.prototype;
	
			return ChartElement;
		};
		helpers.noop = function() {};
		helpers.uid = (function() {
			var id = 0;
			return function() {
				return id++;
			};
		}());
		// -- Math methods
		helpers.isNumber = function(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		};
		helpers.almostEquals = function(x, y, epsilon) {
			return Math.abs(x - y) < epsilon;
		};
		helpers.almostWhole = function(x, epsilon) {
			var rounded = Math.round(x);
			return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
		};
		helpers.max = function(array) {
			return array.reduce(function(max, value) {
				if (!isNaN(value)) {
					return Math.max(max, value);
				}
				return max;
			}, Number.NEGATIVE_INFINITY);
		};
		helpers.min = function(array) {
			return array.reduce(function(min, value) {
				if (!isNaN(value)) {
					return Math.min(min, value);
				}
				return min;
			}, Number.POSITIVE_INFINITY);
		};
		helpers.sign = Math.sign?
			function(x) {
				return Math.sign(x);
			} :
			function(x) {
				x = +x; // convert to a number
				if (x === 0 || isNaN(x)) {
					return x;
				}
				return x > 0 ? 1 : -1;
			};
		helpers.log10 = Math.log10?
			function(x) {
				return Math.log10(x);
			} :
			function(x) {
				return Math.log(x) / Math.LN10;
			};
		helpers.toRadians = function(degrees) {
			return degrees * (Math.PI / 180);
		};
		helpers.toDegrees = function(radians) {
			return radians * (180 / Math.PI);
		};
		// Gets the angle from vertical upright to the point about a centre.
		helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
			var distanceFromXCenter = anglePoint.x - centrePoint.x,
				distanceFromYCenter = anglePoint.y - centrePoint.y,
				radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
	
			var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
	
			if (angle < (-0.5 * Math.PI)) {
				angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
			}
	
			return {
				angle: angle,
				distance: radialDistanceFromCenter
			};
		};
		helpers.distanceBetweenPoints = function(pt1, pt2) {
			return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
		};
		helpers.aliasPixel = function(pixelWidth) {
			return (pixelWidth % 2 === 0) ? 0 : 0.5;
		};
		helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
			// Props to Rob Spencer at scaled innovation for his post on splining between points
			// http://scaledinnovation.com/analytics/splines/aboutSplines.html
	
			// This function must also respect "skipped" points
	
			var previous = firstPoint.skip ? middlePoint : firstPoint,
				current = middlePoint,
				next = afterPoint.skip ? middlePoint : afterPoint;
	
			var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
			var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
	
			var s01 = d01 / (d01 + d12);
			var s12 = d12 / (d01 + d12);
	
			// If all points are the same, s01 & s02 will be inf
			s01 = isNaN(s01) ? 0 : s01;
			s12 = isNaN(s12) ? 0 : s12;
	
			var fa = t * s01; // scaling factor for triangle Ta
			var fb = t * s12;
	
			return {
				previous: {
					x: current.x - fa * (next.x - previous.x),
					y: current.y - fa * (next.y - previous.y)
				},
				next: {
					x: current.x + fb * (next.x - previous.x),
					y: current.y + fb * (next.y - previous.y)
				}
			};
		};
		helpers.EPSILON = Number.EPSILON || 1e-14;
		helpers.splineCurveMonotone = function(points) {
			// This function calculates Bézier control points in a similar way than |splineCurve|,
			// but preserves monotonicity of the provided data and ensures no local extremums are added
			// between the dataset discrete points due to the interpolation.
			// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
	
			var pointsWithTangents = (points || []).map(function(point) {
				return {
					model: point._model,
					deltaK: 0,
					mK: 0
				};
			});
	
			// Calculate slopes (deltaK) and initialize tangents (mK)
			var pointsLen = pointsWithTangents.length;
			var i, pointBefore, pointCurrent, pointAfter;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}
	
				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointAfter && !pointAfter.model.skip) {
					var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);
	
					// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
					pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
				}
	
				if (!pointBefore || pointBefore.model.skip) {
					pointCurrent.mK = pointCurrent.deltaK;
				} else if (!pointAfter || pointAfter.model.skip) {
					pointCurrent.mK = pointBefore.deltaK;
				} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
					pointCurrent.mK = 0;
				} else {
					pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
				}
			}
	
			// Adjust tangents to ensure monotonic properties
			var alphaK, betaK, tauK, squaredMagnitude;
			for (i = 0; i < pointsLen - 1; ++i) {
				pointCurrent = pointsWithTangents[i];
				pointAfter = pointsWithTangents[i + 1];
				if (pointCurrent.model.skip || pointAfter.model.skip) {
					continue;
				}
	
				if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
					pointCurrent.mK = pointAfter.mK = 0;
					continue;
				}
	
				alphaK = pointCurrent.mK / pointCurrent.deltaK;
				betaK = pointAfter.mK / pointCurrent.deltaK;
				squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
				if (squaredMagnitude <= 9) {
					continue;
				}
	
				tauK = 3 / Math.sqrt(squaredMagnitude);
				pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
				pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
			}
	
			// Compute control points
			var deltaX;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}
	
				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointBefore && !pointBefore.model.skip) {
					deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
					pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
					pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
				}
				if (pointAfter && !pointAfter.model.skip) {
					deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
					pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
					pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
				}
			}
		};
		helpers.nextItem = function(collection, index, loop) {
			if (loop) {
				return index >= collection.length - 1 ? collection[0] : collection[index + 1];
			}
			return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
		};
		helpers.previousItem = function(collection, index, loop) {
			if (loop) {
				return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
			}
			return index <= 0 ? collection[0] : collection[index - 1];
		};
		// Implementation of the nice number algorithm used in determining where axis labels will go
		helpers.niceNum = function(range, round) {
			var exponent = Math.floor(helpers.log10(range));
			var fraction = range / Math.pow(10, exponent);
			var niceFraction;
	
			if (round) {
				if (fraction < 1.5) {
					niceFraction = 1;
				} else if (fraction < 3) {
					niceFraction = 2;
				} else if (fraction < 7) {
					niceFraction = 5;
				} else {
					niceFraction = 10;
				}
			} else if (fraction <= 1.0) {
				niceFraction = 1;
			} else if (fraction <= 2) {
				niceFraction = 2;
			} else if (fraction <= 5) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
	
			return niceFraction * Math.pow(10, exponent);
		};
		// Easing functions adapted from Robert Penner's easing equations
		// http://www.robertpenner.com/easing/
		var easingEffects = helpers.easingEffects = {
			linear: function(t) {
				return t;
			},
			easeInQuad: function(t) {
				return t * t;
			},
			easeOutQuad: function(t) {
				return -1 * t * (t - 2);
			},
			easeInOutQuad: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t;
				}
				return -1 / 2 * ((--t) * (t - 2) - 1);
			},
			easeInCubic: function(t) {
				return t * t * t;
			},
			easeOutCubic: function(t) {
				return 1 * ((t = t / 1 - 1) * t * t + 1);
			},
			easeInOutCubic: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t;
				}
				return 1 / 2 * ((t -= 2) * t * t + 2);
			},
			easeInQuart: function(t) {
				return t * t * t * t;
			},
			easeOutQuart: function(t) {
				return -1 * ((t = t / 1 - 1) * t * t * t - 1);
			},
			easeInOutQuart: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t * t;
				}
				return -1 / 2 * ((t -= 2) * t * t * t - 2);
			},
			easeInQuint: function(t) {
				return 1 * (t /= 1) * t * t * t * t;
			},
			easeOutQuint: function(t) {
				return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
			},
			easeInOutQuint: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t * t * t;
				}
				return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
			},
			easeInSine: function(t) {
				return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
			},
			easeOutSine: function(t) {
				return 1 * Math.sin(t / 1 * (Math.PI / 2));
			},
			easeInOutSine: function(t) {
				return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
			},
			easeInExpo: function(t) {
				return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
			},
			easeOutExpo: function(t) {
				return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
			},
			easeInOutExpo: function(t) {
				if (t === 0) {
					return 0;
				}
				if (t === 1) {
					return 1;
				}
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * Math.pow(2, 10 * (t - 1));
				}
				return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
			},
			easeInCirc: function(t) {
				if (t >= 1) {
					return t;
				}
				return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
			},
			easeOutCirc: function(t) {
				return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
			},
			easeInOutCirc: function(t) {
				if ((t /= 1 / 2) < 1) {
					return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
				}
				return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
			},
			easeInElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1) === 1) {
					return 1;
				}
				if (!p) {
					p = 1 * 0.3;
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			},
			easeOutElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1) === 1) {
					return 1;
				}
				if (!p) {
					p = 1 * 0.3;
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
			},
			easeInOutElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1 / 2) === 2) {
					return 1;
				}
				if (!p) {
					p = 1 * (0.3 * 1.5);
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				if (t < 1) {
					return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
				}
				return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
			},
			easeInBack: function(t) {
				var s = 1.70158;
				return 1 * (t /= 1) * t * ((s + 1) * t - s);
			},
			easeOutBack: function(t) {
				var s = 1.70158;
				return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
			},
			easeInOutBack: function(t) {
				var s = 1.70158;
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
				}
				return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
			},
			easeInBounce: function(t) {
				return 1 - easingEffects.easeOutBounce(1 - t);
			},
			easeOutBounce: function(t) {
				if ((t /= 1) < (1 / 2.75)) {
					return 1 * (7.5625 * t * t);
				} else if (t < (2 / 2.75)) {
					return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
				} else if (t < (2.5 / 2.75)) {
					return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
				}
				return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
			},
			easeInOutBounce: function(t) {
				if (t < 1 / 2) {
					return easingEffects.easeInBounce(t * 2) * 0.5;
				}
				return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
			}
		};
		// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
		helpers.requestAnimFrame = (function() {
			return window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				window.oRequestAnimationFrame ||
				window.msRequestAnimationFrame ||
				function(callback) {
					return window.setTimeout(callback, 1000 / 60);
				};
		}());
		// -- DOM methods
		helpers.getRelativePosition = function(evt, chart) {
			var mouseX, mouseY;
			var e = evt.originalEvent || evt,
				canvas = evt.currentTarget || evt.srcElement,
				boundingRect = canvas.getBoundingClientRect();
	
			var touches = e.touches;
			if (touches && touches.length > 0) {
				mouseX = touches[0].clientX;
				mouseY = touches[0].clientY;
	
			} else {
				mouseX = e.clientX;
				mouseY = e.clientY;
			}
	
			// Scale mouse coordinates into canvas coordinates
			// by following the pattern laid out by 'jerryj' in the comments of
			// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
			var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
			var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
			var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
			var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
			var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
			var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
	
			// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
			// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
			mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
			mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);
	
			return {
				x: mouseX,
				y: mouseY
			};
	
		};
		helpers.addEvent = function(node, eventType, method) {
			if (node.addEventListener) {
				node.addEventListener(eventType, method);
			} else if (node.attachEvent) {
				node.attachEvent('on' + eventType, method);
			} else {
				node['on' + eventType] = method;
			}
		};
		helpers.removeEvent = function(node, eventType, handler) {
			if (node.removeEventListener) {
				node.removeEventListener(eventType, handler, false);
			} else if (node.detachEvent) {
				node.detachEvent('on' + eventType, handler);
			} else {
				node['on' + eventType] = helpers.noop;
			}
		};
	
		// Private helper function to convert max-width/max-height values that may be percentages into a number
		function parseMaxStyle(styleValue, node, parentProperty) {
			var valueInPixels;
			if (typeof(styleValue) === 'string') {
				valueInPixels = parseInt(styleValue, 10);
	
				if (styleValue.indexOf('%') !== -1) {
					// percentage * size in dimension
					valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
				}
			} else {
				valueInPixels = styleValue;
			}
	
			return valueInPixels;
		}
	
		/**
		 * Returns if the given value contains an effective constraint.
		 * @private
		 */
		function isConstrainedValue(value) {
			return value !== undefined && value !== null && value !== 'none';
		}
	
		// Private helper to get a constraint dimension
		// @param domNode : the node to check the constraint on
		// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
		// @param percentageProperty : property of parent to use when calculating width as a percentage
		// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
		function getConstraintDimension(domNode, maxStyle, percentageProperty) {
			var view = document.defaultView;
			var parentNode = domNode.parentNode;
			var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
			var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
			var hasCNode = isConstrainedValue(constrainedNode);
			var hasCContainer = isConstrainedValue(constrainedContainer);
			var infinity = Number.POSITIVE_INFINITY;
	
			if (hasCNode || hasCContainer) {
				return Math.min(
					hasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
					hasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
			}
	
			return 'none';
		}
		// returns Number or undefined if no constraint
		helpers.getConstraintWidth = function(domNode) {
			return getConstraintDimension(domNode, 'max-width', 'clientWidth');
		};
		// returns Number or undefined if no constraint
		helpers.getConstraintHeight = function(domNode) {
			return getConstraintDimension(domNode, 'max-height', 'clientHeight');
		};
		helpers.getMaximumWidth = function(domNode) {
			var container = domNode.parentNode;
			var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
			var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
			var w = container.clientWidth - paddingLeft - paddingRight;
			var cw = helpers.getConstraintWidth(domNode);
			return isNaN(cw)? w : Math.min(w, cw);
		};
		helpers.getMaximumHeight = function(domNode) {
			var container = domNode.parentNode;
			var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
			var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
			var h = container.clientHeight - paddingTop - paddingBottom;
			var ch = helpers.getConstraintHeight(domNode);
			return isNaN(ch)? h : Math.min(h, ch);
		};
		helpers.getStyle = function(el, property) {
			return el.currentStyle ?
				el.currentStyle[property] :
				document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
		};
		helpers.retinaScale = function(chart) {
			var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
			if (pixelRatio === 1) {
				return;
			}
	
			var canvas = chart.canvas;
			var height = chart.height;
			var width = chart.width;
	
			canvas.height = height * pixelRatio;
			canvas.width = width * pixelRatio;
			chart.ctx.scale(pixelRatio, pixelRatio);
	
			// If no style has been set on the canvas, the render size is used as display size,
			// making the chart visually bigger, so let's enforce it to the "correct" values.
			// See https://github.com/chartjs/Chart.js/issues/3575
			canvas.style.height = height + 'px';
			canvas.style.width = width + 'px';
		};
		// -- Canvas methods
		helpers.clear = function(chart) {
			chart.ctx.clearRect(0, 0, chart.width, chart.height);
		};
		helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
			return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
		};
		helpers.longestText = function(ctx, font, arrayOfThings, cache) {
			cache = cache || {};
			var data = cache.data = cache.data || {};
			var gc = cache.garbageCollect = cache.garbageCollect || [];
	
			if (cache.font !== font) {
				data = cache.data = {};
				gc = cache.garbageCollect = [];
				cache.font = font;
			}
	
			ctx.font = font;
			var longest = 0;
			helpers.each(arrayOfThings, function(thing) {
				// Undefined strings and arrays should not be measured
				if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
					longest = helpers.measureText(ctx, data, gc, longest, thing);
				} else if (helpers.isArray(thing)) {
					// if it is an array lets measure each element
					// to do maybe simplify this function a bit so we can do this more recursively?
					helpers.each(thing, function(nestedThing) {
						// Undefined strings and arrays should not be measured
						if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
							longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
						}
					});
				}
			});
	
			var gcLen = gc.length / 2;
			if (gcLen > arrayOfThings.length) {
				for (var i = 0; i < gcLen; i++) {
					delete data[gc[i]];
				}
				gc.splice(0, gcLen);
			}
			return longest;
		};
		helpers.measureText = function(ctx, data, gc, longest, string) {
			var textWidth = data[string];
			if (!textWidth) {
				textWidth = data[string] = ctx.measureText(string).width;
				gc.push(string);
			}
			if (textWidth > longest) {
				longest = textWidth;
			}
			return longest;
		};
		helpers.numberOfLabelLines = function(arrayOfThings) {
			var numberOfLines = 1;
			helpers.each(arrayOfThings, function(thing) {
				if (helpers.isArray(thing)) {
					if (thing.length > numberOfLines) {
						numberOfLines = thing.length;
					}
				}
			});
			return numberOfLines;
		};
		helpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {
			ctx.beginPath();
			ctx.moveTo(x + radius, y);
			ctx.lineTo(x + width - radius, y);
			ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
			ctx.lineTo(x + width, y + height - radius);
			ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
			ctx.lineTo(x + radius, y + height);
			ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
			ctx.lineTo(x, y + radius);
			ctx.quadraticCurveTo(x, y, x + radius, y);
			ctx.closePath();
		};
		helpers.color = function(c) {
			if (!color) {
				console.error('Color.js not found!');
				return c;
			}
	
			/* global CanvasGradient */
			if (c instanceof CanvasGradient) {
				return color(Chart.defaults.global.defaultColor);
			}
	
			return color(c);
		};
		helpers.isArray = Array.isArray?
			function(obj) {
				return Array.isArray(obj);
			} :
			function(obj) {
				return Object.prototype.toString.call(obj) === '[object Array]';
			};
		// ! @see http://stackoverflow.com/a/14853974
		helpers.arrayEquals = function(a0, a1) {
			var i, ilen, v0, v1;
	
			if (!a0 || !a1 || a0.length !== a1.length) {
				return false;
			}
	
			for (i = 0, ilen=a0.length; i < ilen; ++i) {
				v0 = a0[i];
				v1 = a1[i];
	
				if (v0 instanceof Array && v1 instanceof Array) {
					if (!helpers.arrayEquals(v0, v1)) {
						return false;
					}
				} else if (v0 !== v1) {
					// NOTE: two different object instances will never be equal: {x:20} != {x:20}
					return false;
				}
			}
	
			return true;
		};
		helpers.callCallback = function(fn, args, _tArg) {
			if (fn && typeof fn.call === 'function') {
				fn.apply(_tArg, args);
			}
		};
		helpers.getHoverColor = function(colorValue) {
			/* global CanvasPattern */
			return (colorValue instanceof CanvasPattern) ?
				colorValue :
				helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
		};
	};
	
	},{"2":2}],27:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
		var helpers = Chart.helpers;
	
		/**
		 * Helper function to get relative position for an event
		 * @param {Event|IEvent} event - The event to get the position for
		 * @param {Chart} chart - The chart
		 * @returns {Point} the event position
		 */
		function getRelativePosition(e, chart) {
			if (e.native) {
				return {
					x: e.x,
					y: e.y
				};
			}
	
			return helpers.getRelativePosition(e, chart);
		}
	
		/**
		 * Helper function to traverse all of the visible elements in the chart
		 * @param chart {chart} the chart
		 * @param handler {Function} the callback to execute for each visible item
		 */
		function parseVisibleItems(chart, handler) {
			var datasets = chart.data.datasets;
			var meta, i, j, ilen, jlen;
	
			for (i = 0, ilen = datasets.length; i < ilen; ++i) {
				if (!chart.isDatasetVisible(i)) {
					continue;
				}
	
				meta = chart.getDatasetMeta(i);
				for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
					var element = meta.data[j];
					if (!element._view.skip) {
						handler(element);
					}
				}
			}
		}
	
		/**
		 * Helper function to get the items that intersect the event position
		 * @param items {ChartElement[]} elements to filter
		 * @param position {Point} the point to be nearest to
		 * @return {ChartElement[]} the nearest items
		 */
		function getIntersectItems(chart, position) {
			var elements = [];
	
			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
				}
			});
	
			return elements;
		}
	
		/**
		 * Helper function to get the items nearest to the event position considering all visible items in teh chart
		 * @param chart {Chart} the chart to look at elements from
		 * @param position {Point} the point to be nearest to
		 * @param intersect {Boolean} if true, only consider items that intersect the position
		 * @param distanceMetric {Function} Optional function to provide the distance between
		 * @return {ChartElement[]} the nearest items
		 */
		function getNearestItems(chart, position, intersect, distanceMetric) {
			var minDistance = Number.POSITIVE_INFINITY;
			var nearestItems = [];
	
			if (!distanceMetric) {
				distanceMetric = helpers.distanceBetweenPoints;
			}
	
			parseVisibleItems(chart, function(element) {
				if (intersect && !element.inRange(position.x, position.y)) {
					return;
				}
	
				var center = element.getCenterPoint();
				var distance = distanceMetric(position, center);
	
				if (distance < minDistance) {
					nearestItems = [element];
					minDistance = distance;
				} else if (distance === minDistance) {
					// Can have multiple items at the same distance in which case we sort by size
					nearestItems.push(element);
				}
			});
	
			return nearestItems;
		}
	
		function indexMode(chart, e, options) {
			var position = getRelativePosition(e, chart.chart);
			var distanceMetric = function(pt1, pt2) {
				return Math.abs(pt1.x - pt2.x);
			};
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
			var elements = [];
	
			if (!items.length) {
				return [];
			}
	
			chart.data.datasets.forEach(function(dataset, datasetIndex) {
				if (chart.isDatasetVisible(datasetIndex)) {
					var meta = chart.getDatasetMeta(datasetIndex),
						element = meta.data[items[0]._index];
	
					// don't count items that are skipped (null data)
					if (element && !element._view.skip) {
						elements.push(element);
					}
				}
			});
	
			return elements;
		}
	
		/**
		 * @interface IInteractionOptions
		 */
		/**
		 * If true, only consider items that intersect the point
		 * @name IInterfaceOptions#boolean
		 * @type Boolean
		 */
	
		/**
		 * Contains interaction related functions
		 * @namespace Chart.Interaction
		 */
		Chart.Interaction = {
			// Helper function for different modes
			modes: {
				single: function(chart, e) {
					var position = getRelativePosition(e, chart.chart);
					var elements = [];
	
					parseVisibleItems(chart, function(element) {
						if (element.inRange(position.x, position.y)) {
							elements.push(element);
							return elements;
						}
					});
	
					return elements.slice(0, 1);
				},
	
				/**
				 * @function Chart.Interaction.modes.label
				 * @deprecated since version 2.4.0
				 */
				label: indexMode,
	
				/**
				 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
				 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
				 * @function Chart.Interaction.modes.index
				 * @since v2.4.0
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use during interaction
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				index: indexMode,
	
				/**
				 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
				 * If the options.intersect is false, we find the nearest item and return the items in that dataset
				 * @function Chart.Interaction.modes.dataset
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use during interaction
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				dataset: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);
	
					if (items.length > 0) {
						items = chart.getDatasetMeta(items[0]._datasetIndex).data;
					}
	
					return items;
				},
	
				/**
				 * @function Chart.Interaction.modes.x-axis
				 * @deprecated since version 2.4.0. Use index mode and intersect == true
				 */
				'x-axis': function(chart, e) {
					return indexMode(chart, e, true);
				},
	
				/**
				 * Point mode returns all elements that hit test based on the event position
				 * of the event
				 * @function Chart.Interaction.modes.intersect
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				point: function(chart, e) {
					var position = getRelativePosition(e, chart.chart);
					return getIntersectItems(chart, position);
				},
	
				/**
				 * nearest mode returns the element closest to the point
				 * @function Chart.Interaction.modes.intersect
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				nearest: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var nearestItems = getNearestItems(chart, position, options.intersect);
	
					// We have multiple items at the same distance from the event. Now sort by smallest
					if (nearestItems.length > 1) {
						nearestItems.sort(function(a, b) {
							var sizeA = a.getArea();
							var sizeB = b.getArea();
							var ret = sizeA - sizeB;
	
							if (ret === 0) {
								// if equal sort by dataset index
								ret = a._datasetIndex - b._datasetIndex;
							}
	
							return ret;
						});
					}
	
					// Return only 1 item
					return nearestItems.slice(0, 1);
				},
	
				/**
				 * x mode returns the elements that hit-test at the current x coordinate
				 * @function Chart.Interaction.modes.x
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				x: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var items = [];
					var intersectsItem = false;
	
					parseVisibleItems(chart, function(element) {
						if (element.inXRange(position.x)) {
							items.push(element);
						}
	
						if (element.inRange(position.x, position.y)) {
							intersectsItem = true;
						}
					});
	
					// If we want to trigger on an intersect and we don't have any items
					// that intersect the position, return nothing
					if (options.intersect && !intersectsItem) {
						items = [];
					}
					return items;
				},
	
				/**
				 * y mode returns the elements that hit-test at the current y coordinate
				 * @function Chart.Interaction.modes.y
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				y: function(chart, e, options) {
					var position = getRelativePosition(e, chart.chart);
					var items = [];
					var intersectsItem = false;
	
					parseVisibleItems(chart, function(element) {
						if (element.inYRange(position.y)) {
							items.push(element);
						}
	
						if (element.inRange(position.x, position.y)) {
							intersectsItem = true;
						}
					});
	
					// If we want to trigger on an intersect and we don't have any items
					// that intersect the position, return nothing
					if (options.intersect && !intersectsItem) {
						items = [];
					}
					return items;
				}
			}
		};
	};
	
	},{}],28:[function(require,module,exports){
	'use strict';
	
	module.exports = function() {
	
		// Occupy the global variable of Chart, and create a simple base class
		var Chart = function(item, config) {
			this.controller = new Chart.Controller(item, config, this);
			return this.controller;
		};
	
		// Globally expose the defaults to allow for user updating/changing
		Chart.defaults = {
			global: {
				responsive: true,
				responsiveAnimationDuration: 0,
				maintainAspectRatio: true,
				events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
				hover: {
					onHover: null,
					mode: 'nearest',
					intersect: true,
					animationDuration: 400
				},
				onClick: null,
				defaultColor: 'rgba(0,0,0,0.1)',
				defaultFontColor: '#666',
				defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
				defaultFontSize: 12,
				defaultFontStyle: 'normal',
				showLines: true,
	
				// Element defaults defined in element extensions
				elements: {},
	
				// Legend callback string
				legendCallback: function(chart) {
					var text = [];
					text.push('<ul class="' + chart.id + '-legend">');
					for (var i = 0; i < chart.data.datasets.length; i++) {
						text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
						if (chart.data.datasets[i].label) {
							text.push(chart.data.datasets[i].label);
						}
						text.push('</li>');
					}
					text.push('</ul>');
	
					return text.join('');
				}
			}
		};
	
		Chart.Chart = Chart;
	
		return Chart;
	};
	
	},{}],29:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		// The layout service is very self explanatory.  It's responsible for the layout within a chart.
		// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
		// It is this service's responsibility of carrying out that layout.
		Chart.layoutService = {
			defaults: {},
	
			// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.
			addBox: function(chartInstance, box) {
				if (!chartInstance.boxes) {
					chartInstance.boxes = [];
				}
				chartInstance.boxes.push(box);
			},
	
			removeBox: function(chartInstance, box) {
				if (!chartInstance.boxes) {
					return;
				}
				chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
			},
	
			// The most important function
			update: function(chartInstance, width, height) {
	
				if (!chartInstance) {
					return;
				}
	
				var layoutOptions = chartInstance.options.layout;
				var padding = layoutOptions ? layoutOptions.padding : null;
	
				var leftPadding = 0;
				var rightPadding = 0;
				var topPadding = 0;
				var bottomPadding = 0;
	
				if (!isNaN(padding)) {
					// options.layout.padding is a number. assign to all
					leftPadding = padding;
					rightPadding = padding;
					topPadding = padding;
					bottomPadding = padding;
				} else {
					leftPadding = padding.left || 0;
					rightPadding = padding.right || 0;
					topPadding = padding.top || 0;
					bottomPadding = padding.bottom || 0;
				}
	
				var leftBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'left';
				});
				var rightBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'right';
				});
				var topBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'top';
				});
				var bottomBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'bottom';
				});
	
				// Boxes that overlay the chartarea such as the radialLinear scale
				var chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'chartArea';
				});
	
				// Ensure that full width boxes are at the very top / bottom
				topBoxes.sort(function(a, b) {
					return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
				});
				bottomBoxes.sort(function(a, b) {
					return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
				});
	
				// Essentially we now have any number of boxes on each of the 4 sides.
				// Our canvas looks like the following.
				// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
				// B1 is the bottom axis
				// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
				// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
				// an error will be thrown.
				//
				// |----------------------------------------------------|
				// |                  T1 (Full Width)                   |
				// |----------------------------------------------------|
				// |    |    |                 T2                  |    |
				// |    |----|-------------------------------------|----|
				// |    |    | C1 |                           | C2 |    |
				// |    |    |----|                           |----|    |
				// |    |    |                                     |    |
				// | L1 | L2 |           ChartArea (C0)            | R1 |
				// |    |    |                                     |    |
				// |    |    |----|                           |----|    |
				// |    |    | C3 |                           | C4 |    |
				// |    |----|-------------------------------------|----|
				// |    |    |                 B1                  |    |
				// |----------------------------------------------------|
				// |                  B2 (Full Width)                   |
				// |----------------------------------------------------|
				//
				// What we do to find the best sizing, we do the following
				// 1. Determine the minimum size of the chart area.
				// 2. Split the remaining width equally between each vertical axis
				// 3. Split the remaining height equally between each horizontal axis
				// 4. Give each layout the maximum size it can be. The layout will return it's minimum size
				// 5. Adjust the sizes of each axis based on it's minimum reported size.
				// 6. Refit each axis
				// 7. Position each axis in the final location
				// 8. Tell the chart the final location of the chart area
				// 9. Tell any axes that overlay the chart area the positions of the chart area
	
				// Step 1
				var chartWidth = width - leftPadding - rightPadding;
				var chartHeight = height - topPadding - bottomPadding;
				var chartAreaWidth = chartWidth / 2; // min 50%
				var chartAreaHeight = chartHeight / 2; // min 50%
	
				// Step 2
				var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
	
				// Step 3
				var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
	
				// Step 4
				var maxChartAreaWidth = chartWidth;
				var maxChartAreaHeight = chartHeight;
				var minBoxSizes = [];
	
				function getMinimumBoxSize(box) {
					var minSize;
					var isHorizontal = box.isHorizontal();
	
					if (isHorizontal) {
						minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
						maxChartAreaHeight -= minSize.height;
					} else {
						minSize = box.update(verticalBoxWidth, chartAreaHeight);
						maxChartAreaWidth -= minSize.width;
					}
	
					minBoxSizes.push({
						horizontal: isHorizontal,
						minSize: minSize,
						box: box,
					});
				}
	
				helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
	
				// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)
				var maxHorizontalLeftPadding = 0;
				var maxHorizontalRightPadding = 0;
				var maxVerticalTopPadding = 0;
				var maxVerticalBottomPadding = 0;
	
				helpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {
					if (horizontalBox.getPadding) {
						var boxPadding = horizontalBox.getPadding();
						maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
						maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
					}
				});
	
				helpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {
					if (verticalBox.getPadding) {
						var boxPadding = verticalBox.getPadding();
						maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
						maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
					}
				});
	
				// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
				// be if the axes are drawn at their minimum sizes.
				// Steps 5 & 6
				var totalLeftBoxesWidth = leftPadding;
				var totalRightBoxesWidth = rightPadding;
				var totalTopBoxesHeight = topPadding;
				var totalBottomBoxesHeight = bottomPadding;
	
				// Function to fit a box
				function fitBox(box) {
					var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {
						return minBox.box === box;
					});
	
					if (minBoxSize) {
						if (box.isHorizontal()) {
							var scaleMargin = {
								left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
								right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
								top: 0,
								bottom: 0
							};
	
							// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
							// on the margin. Sometimes they need to increase in size slightly
							box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
						} else {
							box.update(minBoxSize.minSize.width, maxChartAreaHeight);
						}
					}
				}
	
				// Update, and calculate the left and right margins for the horizontal boxes
				helpers.each(leftBoxes.concat(rightBoxes), fitBox);
	
				helpers.each(leftBoxes, function(box) {
					totalLeftBoxesWidth += box.width;
				});
	
				helpers.each(rightBoxes, function(box) {
					totalRightBoxesWidth += box.width;
				});
	
				// Set the Left and Right margins for the horizontal boxes
				helpers.each(topBoxes.concat(bottomBoxes), fitBox);
	
				// Figure out how much margin is on the top and bottom of the vertical boxes
				helpers.each(topBoxes, function(box) {
					totalTopBoxesHeight += box.height;
				});
	
				helpers.each(bottomBoxes, function(box) {
					totalBottomBoxesHeight += box.height;
				});
	
				function finalFitVerticalBox(box) {
					var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {
						return minSize.box === box;
					});
	
					var scaleMargin = {
						left: 0,
						right: 0,
						top: totalTopBoxesHeight,
						bottom: totalBottomBoxesHeight
					};
	
					if (minBoxSize) {
						box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
					}
				}
	
				// Let the left layout know the final margin
				helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
	
				// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
				totalLeftBoxesWidth = leftPadding;
				totalRightBoxesWidth = rightPadding;
				totalTopBoxesHeight = topPadding;
				totalBottomBoxesHeight = bottomPadding;
	
				helpers.each(leftBoxes, function(box) {
					totalLeftBoxesWidth += box.width;
				});
	
				helpers.each(rightBoxes, function(box) {
					totalRightBoxesWidth += box.width;
				});
	
				helpers.each(topBoxes, function(box) {
					totalTopBoxesHeight += box.height;
				});
				helpers.each(bottomBoxes, function(box) {
					totalBottomBoxesHeight += box.height;
				});
	
				// We may be adding some padding to account for rotated x axis labels
				var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
				totalLeftBoxesWidth += leftPaddingAddition;
				totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
	
				var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
				totalTopBoxesHeight += topPaddingAddition;
				totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
	
				// Figure out if our chart area changed. This would occur if the dataset layout label rotation
				// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
				// without calling `fit` again
				var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
				var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
	
				if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
					helpers.each(leftBoxes, function(box) {
						box.height = newMaxChartAreaHeight;
					});
	
					helpers.each(rightBoxes, function(box) {
						box.height = newMaxChartAreaHeight;
					});
	
					helpers.each(topBoxes, function(box) {
						if (!box.options.fullWidth) {
							box.width = newMaxChartAreaWidth;
						}
					});
	
					helpers.each(bottomBoxes, function(box) {
						if (!box.options.fullWidth) {
							box.width = newMaxChartAreaWidth;
						}
					});
	
					maxChartAreaHeight = newMaxChartAreaHeight;
					maxChartAreaWidth = newMaxChartAreaWidth;
				}
	
				// Step 7 - Position the boxes
				var left = leftPadding + leftPaddingAddition;
				var top = topPadding + topPaddingAddition;
	
				function placeBox(box) {
					if (box.isHorizontal()) {
						box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
						box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
						box.top = top;
						box.bottom = top + box.height;
	
						// Move to next point
						top = box.bottom;
	
					} else {
	
						box.left = left;
						box.right = left + box.width;
						box.top = totalTopBoxesHeight;
						box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
	
						// Move to next point
						left = box.right;
					}
				}
	
				helpers.each(leftBoxes.concat(topBoxes), placeBox);
	
				// Account for chart width and height
				left += maxChartAreaWidth;
				top += maxChartAreaHeight;
	
				helpers.each(rightBoxes, placeBox);
				helpers.each(bottomBoxes, placeBox);
	
				// Step 8
				chartInstance.chartArea = {
					left: totalLeftBoxesWidth,
					top: totalTopBoxesHeight,
					right: totalLeftBoxesWidth + maxChartAreaWidth,
					bottom: totalTopBoxesHeight + maxChartAreaHeight
				};
	
				// Step 9
				helpers.each(chartAreaBoxes, function(box) {
					box.left = chartInstance.chartArea.left;
					box.top = chartInstance.chartArea.top;
					box.right = chartInstance.chartArea.right;
					box.bottom = chartInstance.chartArea.bottom;
	
					box.update(maxChartAreaWidth, maxChartAreaHeight);
				});
			}
		};
	};
	
	},{}],30:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var noop = helpers.noop;
	
		Chart.defaults.global.legend = {
	
			display: true,
			position: 'top',
			fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
			reverse: false,
	
			// a callback that will handle
			onClick: function(e, legendItem) {
				var index = legendItem.datasetIndex;
				var ci = this.chart;
				var meta = ci.getDatasetMeta(index);
	
				// See controller.isDatasetVisible comment
				meta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;
	
				// We hid a dataset ... rerender the chart
				ci.update();
			},
	
			onHover: null,
	
			labels: {
				boxWidth: 40,
				padding: 10,
				// Generates labels shown in the legend
				// Valid properties to return:
				// text : text to display
				// fillStyle : fill of coloured box
				// strokeStyle: stroke of coloured box
				// hidden : if this legend item refers to a hidden item
				// lineCap : cap style for line
				// lineDash
				// lineDashOffset :
				// lineJoin :
				// lineWidth :
				generateLabels: function(chart) {
					var data = chart.data;
					return helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
						return {
							text: dataset.label,
							fillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),
							hidden: !chart.isDatasetVisible(i),
							lineCap: dataset.borderCapStyle,
							lineDash: dataset.borderDash,
							lineDashOffset: dataset.borderDashOffset,
							lineJoin: dataset.borderJoinStyle,
							lineWidth: dataset.borderWidth,
							strokeStyle: dataset.borderColor,
							pointStyle: dataset.pointStyle,
	
							// Below is extra data used for toggling the datasets
							datasetIndex: i
						};
					}, this) : [];
				}
			}
		};
	
		/**
		 * Helper function to get the box width based on the usePointStyle option
		 * @param labelopts {Object} the label options on the legend
		 * @param fontSize {Number} the label font size
		 * @return {Number} width of the color box area
		 */
		function getBoxWidth(labelOpts, fontSize) {
			return labelOpts.usePointStyle ?
				fontSize * Math.SQRT2 :
				labelOpts.boxWidth;
		}
	
		Chart.Legend = Chart.Element.extend({
	
			initialize: function(config) {
				helpers.extend(this, config);
	
				// Contains hit boxes for each dataset (in dataset order)
				this.legendHitBoxes = [];
	
				// Are we in doughnut mode which has a different data type
				this.doughnutMode = false;
			},
	
			// These methods are ordered by lifecycle. Utilities then follow.
			// Any function defined here is inherited by all legend types.
			// Any function can be extended by the legend type
	
			beforeUpdate: noop,
			update: function(maxWidth, maxHeight, margins) {
				var me = this;
	
				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();
	
				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = margins;
	
				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
				// Labels
				me.beforeBuildLabels();
				me.buildLabels();
				me.afterBuildLabels();
	
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();
	
				return me.minSize;
			},
			afterUpdate: noop,
	
			//
	
			beforeSetDimensions: noop,
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;
	
					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}
	
				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
	
				// Reset minSize
				me.minSize = {
					width: 0,
					height: 0
				};
			},
			afterSetDimensions: noop,
	
			//
	
			beforeBuildLabels: noop,
			buildLabels: function() {
				var me = this;
				var labelOpts = me.options.labels;
				var legendItems = labelOpts.generateLabels.call(me, me.chart);
	
				if (labelOpts.filter) {
					legendItems = legendItems.filter(function(item) {
						return labelOpts.filter(item, me.chart.data);
					});
				}
	
				if (me.options.reverse) {
					legendItems.reverse();
				}
	
				me.legendItems = legendItems;
			},
			afterBuildLabels: noop,
	
			//
	
			beforeFit: noop,
			fit: function() {
				var me = this;
				var opts = me.options;
				var labelOpts = opts.labels;
				var display = opts.display;
	
				var ctx = me.ctx;
	
				var globalDefault = Chart.defaults.global,
					itemOrDefault = helpers.getValueOrDefault,
					fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
					fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
					fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
					labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
	
				// Reset hit boxes
				var hitboxes = me.legendHitBoxes = [];
	
				var minSize = me.minSize;
				var isHorizontal = me.isHorizontal();
	
				if (isHorizontal) {
					minSize.width = me.maxWidth; // fill all the width
					minSize.height = display ? 10 : 0;
				} else {
					minSize.width = display ? 10 : 0;
					minSize.height = me.maxHeight; // fill all the height
				}
	
				// Increase sizes here
				if (display) {
					ctx.font = labelFont;
	
					if (isHorizontal) {
						// Labels
	
						// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
						var lineWidths = me.lineWidths = [0];
						var totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;
	
						ctx.textAlign = 'left';
						ctx.textBaseline = 'top';
	
						helpers.each(me.legendItems, function(legendItem, i) {
							var boxWidth = getBoxWidth(labelOpts, fontSize);
							var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
	
							if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
								totalHeight += fontSize + (labelOpts.padding);
								lineWidths[lineWidths.length] = me.left;
							}
	
							// Store the hitbox width and height here. Final position will be updated in `draw`
							hitboxes[i] = {
								left: 0,
								top: 0,
								width: width,
								height: fontSize
							};
	
							lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
						});
	
						minSize.height += totalHeight;
	
					} else {
						var vPadding = labelOpts.padding;
						var columnWidths = me.columnWidths = [];
						var totalWidth = labelOpts.padding;
						var currentColWidth = 0;
						var currentColHeight = 0;
						var itemHeight = fontSize + vPadding;
	
						helpers.each(me.legendItems, function(legendItem, i) {
							var boxWidth = getBoxWidth(labelOpts, fontSize);
							var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
	
							// If too tall, go to new column
							if (currentColHeight + itemHeight > minSize.height) {
								totalWidth += currentColWidth + labelOpts.padding;
								columnWidths.push(currentColWidth); // previous column width
	
								currentColWidth = 0;
								currentColHeight = 0;
							}
	
							// Get max width
							currentColWidth = Math.max(currentColWidth, itemWidth);
							currentColHeight += itemHeight;
	
							// Store the hitbox width and height here. Final position will be updated in `draw`
							hitboxes[i] = {
								left: 0,
								top: 0,
								width: itemWidth,
								height: fontSize
							};
						});
	
						totalWidth += currentColWidth;
						columnWidths.push(currentColWidth);
						minSize.width += totalWidth;
					}
				}
	
				me.width = minSize.width;
				me.height = minSize.height;
			},
			afterFit: noop,
	
			// Shared Methods
			isHorizontal: function() {
				return this.options.position === 'top' || this.options.position === 'bottom';
			},
	
			// Actually draw the legend on the canvas
			draw: function() {
				var me = this;
				var opts = me.options;
				var labelOpts = opts.labels;
				var globalDefault = Chart.defaults.global,
					lineDefault = globalDefault.elements.line,
					legendWidth = me.width,
					lineWidths = me.lineWidths;
	
				if (opts.display) {
					var ctx = me.ctx,
						cursor,
						itemOrDefault = helpers.getValueOrDefault,
						fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),
						fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
						fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
						fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
						labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
	
					// Canvas setup
					ctx.textAlign = 'left';
					ctx.textBaseline = 'top';
					ctx.lineWidth = 0.5;
					ctx.strokeStyle = fontColor; // for strikethrough effect
					ctx.fillStyle = fontColor; // render in correct colour
					ctx.font = labelFont;
	
					var boxWidth = getBoxWidth(labelOpts, fontSize),
						hitboxes = me.legendHitBoxes;
	
					// current position
					var drawLegendBox = function(x, y, legendItem) {
						if (isNaN(boxWidth) || boxWidth <= 0) {
							return;
						}
	
						// Set the ctx for the box
						ctx.save();
	
						ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
						ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
						ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
						ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
						ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
						ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
						var isLineWidthZero = (itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);
	
						if (ctx.setLineDash) {
							// IE 9 and 10 do not support line dash
							ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
						}
	
						if (opts.labels && opts.labels.usePointStyle) {
							// Recalculate x and y for drawPoint() because its expecting
							// x and y to be center of figure (instead of top left)
							var radius = fontSize * Math.SQRT2 / 2;
							var offSet = radius / Math.SQRT2;
							var centerX = x + offSet;
							var centerY = y + offSet;
	
							// Draw pointStyle as legend symbol
							Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
						} else {
							// Draw box as legend symbol
							if (!isLineWidthZero) {
								ctx.strokeRect(x, y, boxWidth, fontSize);
							}
							ctx.fillRect(x, y, boxWidth, fontSize);
						}
	
						ctx.restore();
					};
					var fillText = function(x, y, legendItem, textWidth) {
						ctx.fillText(legendItem.text, boxWidth + (fontSize / 2) + x, y);
	
						if (legendItem.hidden) {
							// Strikethrough the text if hidden
							ctx.beginPath();
							ctx.lineWidth = 2;
							ctx.moveTo(boxWidth + (fontSize / 2) + x, y + (fontSize / 2));
							ctx.lineTo(boxWidth + (fontSize / 2) + x + textWidth, y + (fontSize / 2));
							ctx.stroke();
						}
					};
	
					// Horizontal
					var isHorizontal = me.isHorizontal();
					if (isHorizontal) {
						cursor = {
							x: me.left + ((legendWidth - lineWidths[0]) / 2),
							y: me.top + labelOpts.padding,
							line: 0
						};
					} else {
						cursor = {
							x: me.left + labelOpts.padding,
							y: me.top + labelOpts.padding,
							line: 0
						};
					}
	
					var itemHeight = fontSize + labelOpts.padding;
					helpers.each(me.legendItems, function(legendItem, i) {
						var textWidth = ctx.measureText(legendItem.text).width,
							width = boxWidth + (fontSize / 2) + textWidth,
							x = cursor.x,
							y = cursor.y;
	
						if (isHorizontal) {
							if (x + width >= legendWidth) {
								y = cursor.y += itemHeight;
								cursor.line++;
								x = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);
							}
						} else if (y + itemHeight > me.bottom) {
							x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
							y = cursor.y = me.top + labelOpts.padding;
							cursor.line++;
						}
	
						drawLegendBox(x, y, legendItem);
	
						hitboxes[i].left = x;
						hitboxes[i].top = y;
	
						// Fill the actual label
						fillText(x, y, legendItem, textWidth);
	
						if (isHorizontal) {
							cursor.x += width + (labelOpts.padding);
						} else {
							cursor.y += itemHeight;
						}
	
					});
				}
			},
	
			/**
			 * Handle an event
			 * @private
			 * @param {IEvent} event - The event to handle
			 * @return {Boolean} true if a change occured
			 */
			handleEvent: function(e) {
				var me = this;
				var opts = me.options;
				var type = e.type === 'mouseup' ? 'click' : e.type;
				var changed = false;
	
				if (type === 'mousemove') {
					if (!opts.onHover) {
						return;
					}
				} else if (type === 'click') {
					if (!opts.onClick) {
						return;
					}
				} else {
					return;
				}
	
				// Chart event already has relative position in it
				var x = e.x,
					y = e.y;
	
				if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
					// See if we are touching one of the dataset boxes
					var lh = me.legendHitBoxes;
					for (var i = 0; i < lh.length; ++i) {
						var hitBox = lh[i];
	
						if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
							// Touching an element
							if (type === 'click') {
								// use e.native for backwards compatibility
								opts.onClick.call(me, e.native, me.legendItems[i]);
								changed = true;
								break;
							} else if (type === 'mousemove') {
								// use e.native for backwards compatibility
								opts.onHover.call(me, e.native, me.legendItems[i]);
								changed = true;
								break;
							}
						}
					}
				}
	
				return changed;
			}
		});
	
		function createNewLegendAndAttach(chartInstance, legendOpts) {
			var legend = new Chart.Legend({
				ctx: chartInstance.chart.ctx,
				options: legendOpts,
				chart: chartInstance
			});
			chartInstance.legend = legend;
			Chart.layoutService.addBox(chartInstance, legend);
		}
	
		// Register the legend plugin
		Chart.plugins.register({
			beforeInit: function(chartInstance) {
				var legendOpts = chartInstance.options.legend;
	
				if (legendOpts) {
					createNewLegendAndAttach(chartInstance, legendOpts);
				}
			},
			beforeUpdate: function(chartInstance) {
				var legendOpts = chartInstance.options.legend;
	
				if (legendOpts) {
					legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);
	
					if (chartInstance.legend) {
						chartInstance.legend.options = legendOpts;
					} else {
						createNewLegendAndAttach(chartInstance, legendOpts);
					}
				} else {
					Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
					delete chartInstance.legend;
				}
			},
			afterEvent: function(chartInstance, e) {
				var legend = chartInstance.legend;
				if (legend) {
					legend.handleEvent(e);
				}
			}
		});
	};
	
	},{}],31:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.global.plugins = {};
	
		/**
		 * The plugin service singleton
		 * @namespace Chart.plugins
		 * @since 2.1.0
		 */
		Chart.plugins = {
			/**
			 * Globally registered plugins.
			 * @private
			 */
			_plugins: [],
	
			/**
			 * This identifier is used to invalidate the descriptors cache attached to each chart
			 * when a global plugin is registered or unregistered. In this case, the cache ID is
			 * incremented and descriptors are regenerated during following API calls.
			 * @private
			 */
			_cacheId: 0,
	
			/**
			 * Registers the given plugin(s) if not already registered.
			 * @param {Array|Object} plugins plugin instance(s).
			 */
			register: function(plugins) {
				var p = this._plugins;
				([]).concat(plugins).forEach(function(plugin) {
					if (p.indexOf(plugin) === -1) {
						p.push(plugin);
					}
				});
	
				this._cacheId++;
			},
	
			/**
			 * Unregisters the given plugin(s) only if registered.
			 * @param {Array|Object} plugins plugin instance(s).
			 */
			unregister: function(plugins) {
				var p = this._plugins;
				([]).concat(plugins).forEach(function(plugin) {
					var idx = p.indexOf(plugin);
					if (idx !== -1) {
						p.splice(idx, 1);
					}
				});
	
				this._cacheId++;
			},
	
			/**
			 * Remove all registered plugins.
			 * @since 2.1.5
			 */
			clear: function() {
				this._plugins = [];
				this._cacheId++;
			},
	
			/**
			 * Returns the number of registered plugins?
			 * @returns {Number}
			 * @since 2.1.5
			 */
			count: function() {
				return this._plugins.length;
			},
	
			/**
			 * Returns all registered plugin instances.
			 * @returns {Array} array of plugin objects.
			 * @since 2.1.5
			 */
			getAll: function() {
				return this._plugins;
			},
	
			/**
			 * Calls enabled plugins for `chart` on the specified hook and with the given args.
			 * This method immediately returns as soon as a plugin explicitly returns false. The
			 * returned value can be used, for instance, to interrupt the current action.
			 * @param {Object} chart - The chart instance for which plugins should be called.
			 * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
			 * @param {Array} [args] - Extra arguments to apply to the hook call.
			 * @returns {Boolean} false if any of the plugins return false, else returns true.
			 */
			notify: function(chart, hook, args) {
				var descriptors = this.descriptors(chart);
				var ilen = descriptors.length;
				var i, descriptor, plugin, params, method;
	
				for (i=0; i<ilen; ++i) {
					descriptor = descriptors[i];
					plugin = descriptor.plugin;
					method = plugin[hook];
					if (typeof method === 'function') {
						params = [chart].concat(args || []);
						params.push(descriptor.options);
						if (method.apply(plugin, params) === false) {
							return false;
						}
					}
				}
	
				return true;
			},
	
			/**
			 * Returns descriptors of enabled plugins for the given chart.
			 * @returns {Array} [{ plugin, options }]
			 * @private
			 */
			descriptors: function(chart) {
				var cache = chart._plugins || (chart._plugins = {});
				if (cache.id === this._cacheId) {
					return cache.descriptors;
				}
	
				var plugins = [];
				var descriptors = [];
				var config = (chart && chart.config) || {};
				var defaults = Chart.defaults.global.plugins;
				var options = (config.options && config.options.plugins) || {};
	
				this._plugins.concat(config.plugins || []).forEach(function(plugin) {
					var idx = plugins.indexOf(plugin);
					if (idx !== -1) {
						return;
					}
	
					var id = plugin.id;
					var opts = options[id];
					if (opts === false) {
						return;
					}
	
					if (opts === true) {
						opts = helpers.clone(defaults[id]);
					}
	
					plugins.push(plugin);
					descriptors.push({
						plugin: plugin,
						options: opts || {}
					});
				});
	
				cache.descriptors = descriptors;
				cache.id = this._cacheId;
				return descriptors;
			}
		};
	
		/**
		 * Plugin extension hooks.
		 * @interface IPlugin
		 * @since 2.1.0
		 */
		/**
		 * @method IPlugin#beforeInit
		 * @desc Called before initializing `chart`.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#afterInit
		 * @desc Called after `chart` has been initialized and before the first update.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeUpdate
		 * @desc Called before updating `chart`. If any plugin returns `false`, the update
		 * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart update.
		 */
		/**
		 * @method IPlugin#afterUpdate
		 * @desc Called after `chart` has been updated and before rendering. Note that this
		 * hook will not be called if the chart update has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeDatasetsUpdate
	 	 * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
		 * the datasets update is cancelled until another `update` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} false to cancel the datasets update.
		 * @since version 2.1.5
		 */
		/**
		 * @method IPlugin#afterDatasetsUpdate
		 * @desc Called after the `chart` datasets have been updated. Note that this hook
		 * will not be called if the datasets update has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @since version 2.1.5
		 */
		/**
		 * @method IPlugin#beforeLayout
		 * @desc Called before laying out `chart`. If any plugin returns `false`,
		 * the layout update is cancelled until another `update` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart layout.
		 */
		/**
		 * @method IPlugin#afterLayout
		 * @desc Called after the `chart` has been layed out. Note that this hook will not
		 * be called if the layout update has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeRender
		 * @desc Called before rendering `chart`. If any plugin returns `false`,
		 * the rendering is cancelled until another `render` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart rendering.
		 */
		/**
		 * @method IPlugin#afterRender
		 * @desc Called after the `chart` has been fully rendered (and animation completed). Note
		 * that this hook will not be called if the rendering has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeDraw
		 * @desc Called before drawing `chart` at every animation frame specified by the given
		 * easing value. If any plugin returns `false`, the frame drawing is cancelled until
		 * another `render` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart drawing.
		 */
		/**
		 * @method IPlugin#afterDraw
		 * @desc Called after the `chart` has been drawn for the specific easing value. Note
		 * that this hook will not be called if the drawing has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeDatasetsDraw
	 	 * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
		 * the datasets drawing is cancelled until another `render` is triggered.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 * @returns {Boolean} `false` to cancel the chart datasets drawing.
		 */
		/**
		 * @method IPlugin#afterDatasetsDraw
		 * @desc Called after the `chart` datasets have been drawn. Note that this hook
		 * will not be called if the datasets drawing has been previously cancelled.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#beforeEvent
	 	 * @desc Called before processing the specified `event`. If any plugin returns `false`,
		 * the event will be discarded.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {IEvent} event - The event object.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#afterEvent
		 * @desc Called after the `event` has been consumed. Note that this hook
		 * will not be called if the `event` has been previously discarded.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {IEvent} event - The event object.
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#resize
		 * @desc Called after the chart as been resized.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Number} size - The new canvas display size (eq. canvas.style width & height).
		 * @param {Object} options - The plugin options.
		 */
		/**
		 * @method IPlugin#destroy
		 * @desc Called after the chart as been destroyed.
		 * @param {Chart.Controller} chart - The chart instance.
		 * @param {Object} options - The plugin options.
		 */
	
		/**
		 * Provided for backward compatibility, use Chart.plugins instead
		 * @namespace Chart.pluginService
		 * @deprecated since version 2.1.5
		 * @todo remove at version 3
		 * @private
		 */
		Chart.pluginService = Chart.plugins;
	
		/**
		 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
		 * effect, instead simply create/register plugins via plain JavaScript objects.
		 * @interface Chart.PluginBase
		 * @deprecated since version 2.5.0
		 * @todo remove at version 3
		 * @private
		 */
		Chart.PluginBase = helpers.inherits({});
	};
	
	},{}],32:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.scale = {
			display: true,
			position: 'left',
	
			// grid line settings
			gridLines: {
				display: true,
				color: 'rgba(0, 0, 0, 0.1)',
				lineWidth: 1,
				drawBorder: true,
				drawOnChartArea: true,
				drawTicks: true,
				tickMarkLength: 10,
				zeroLineWidth: 1,
				zeroLineColor: 'rgba(0,0,0,0.25)',
				offsetGridLines: false,
				borderDash: [],
				borderDashOffset: 0.0
			},
	
			// scale label
			scaleLabel: {
				// actual label
				labelString: '',
	
				// display property
				display: false
			},
	
			// label settings
			ticks: {
				beginAtZero: false,
				minRotation: 0,
				maxRotation: 50,
				mirror: false,
				padding: 0,
				reverse: false,
				display: true,
				autoSkip: true,
				autoSkipPadding: 0,
				labelOffset: 0,
				// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
				callback: Chart.Ticks.formatters.values
			}
		};
	
		function computeTextSize(context, tick, font) {
			return helpers.isArray(tick) ?
				helpers.longestText(context, font, tick) :
				context.measureText(tick).width;
		}
	
		function parseFontOptions(options) {
			var getValueOrDefault = helpers.getValueOrDefault;
			var globalDefaults = Chart.defaults.global;
			var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
			var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
			var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
	
			return {
				size: size,
				style: style,
				family: family,
				font: helpers.fontString(size, style, family)
			};
		}
	
		Chart.Scale = Chart.Element.extend({
			/**
			 * Get the padding needed for the scale
			 * @method getPadding
			 * @private
			 * @returns {Padding} the necessary padding
			 */
			getPadding: function() {
				var me = this;
				return {
					left: me.paddingLeft || 0,
					top: me.paddingTop || 0,
					right: me.paddingRight || 0,
					bottom: me.paddingBottom || 0
				};
			},
	
			// These methods are ordered by lifecyle. Utilities then follow.
			// Any function defined here is inherited by all scale types.
			// Any function can be extended by the scale type
	
			beforeUpdate: function() {
				helpers.callCallback(this.options.beforeUpdate, [this]);
			},
			update: function(maxWidth, maxHeight, margins) {
				var me = this;
	
				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();
	
				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = helpers.extend({
					left: 0,
					right: 0,
					top: 0,
					bottom: 0
				}, margins);
				me.longestTextCache = me.longestTextCache || {};
	
				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
	
				// Data min/max
				me.beforeDataLimits();
				me.determineDataLimits();
				me.afterDataLimits();
	
				// Ticks
				me.beforeBuildTicks();
				me.buildTicks();
				me.afterBuildTicks();
	
				me.beforeTickToLabelConversion();
				me.convertTicksToLabels();
				me.afterTickToLabelConversion();
	
				// Tick Rotation
				me.beforeCalculateTickRotation();
				me.calculateTickRotation();
				me.afterCalculateTickRotation();
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();
	
				return me.minSize;
	
			},
			afterUpdate: function() {
				helpers.callCallback(this.options.afterUpdate, [this]);
			},
	
			//
	
			beforeSetDimensions: function() {
				helpers.callCallback(this.options.beforeSetDimensions, [this]);
			},
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;
	
					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}
	
				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
			},
			afterSetDimensions: function() {
				helpers.callCallback(this.options.afterSetDimensions, [this]);
			},
	
			// Data limits
			beforeDataLimits: function() {
				helpers.callCallback(this.options.beforeDataLimits, [this]);
			},
			determineDataLimits: helpers.noop,
			afterDataLimits: function() {
				helpers.callCallback(this.options.afterDataLimits, [this]);
			},
	
			//
			beforeBuildTicks: function() {
				helpers.callCallback(this.options.beforeBuildTicks, [this]);
			},
			buildTicks: helpers.noop,
			afterBuildTicks: function() {
				helpers.callCallback(this.options.afterBuildTicks, [this]);
			},
	
			beforeTickToLabelConversion: function() {
				helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
			},
			convertTicksToLabels: function() {
				var me = this;
				// Convert ticks to strings
				var tickOpts = me.options.ticks;
				me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
			},
			afterTickToLabelConversion: function() {
				helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
			},
	
			//
	
			beforeCalculateTickRotation: function() {
				helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
			},
			calculateTickRotation: function() {
				var me = this;
				var context = me.ctx;
				var tickOpts = me.options.ticks;
	
				// Get the width of each grid by calculating the difference
				// between x offsets between 0 and 1.
				var tickFont = parseFontOptions(tickOpts);
				context.font = tickFont.font;
	
				var labelRotation = tickOpts.minRotation || 0;
	
				if (me.options.display && me.isHorizontal()) {
					var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
					var labelWidth = originalLabelWidth;
					var cosRotation;
					var sinRotation;
	
					// Allow 3 pixels x2 padding either side for label readability
					var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
	
					// Max label rotation can be set or default to 90 - also act as a loop counter
					while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
						var angleRadians = helpers.toRadians(labelRotation);
						cosRotation = Math.cos(angleRadians);
						sinRotation = Math.sin(angleRadians);
	
						if (sinRotation * originalLabelWidth > me.maxHeight) {
							// go back one step
							labelRotation--;
							break;
						}
	
						labelRotation++;
						labelWidth = cosRotation * originalLabelWidth;
					}
				}
	
				me.labelRotation = labelRotation;
			},
			afterCalculateTickRotation: function() {
				helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
			},
	
			//
	
			beforeFit: function() {
				helpers.callCallback(this.options.beforeFit, [this]);
			},
			fit: function() {
				var me = this;
				// Reset
				var minSize = me.minSize = {
					width: 0,
					height: 0
				};
	
				var opts = me.options;
				var tickOpts = opts.ticks;
				var scaleLabelOpts = opts.scaleLabel;
				var gridLineOpts = opts.gridLines;
				var display = opts.display;
				var isHorizontal = me.isHorizontal();
	
				var tickFont = parseFontOptions(tickOpts);
				var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
				var tickMarkLength = opts.gridLines.tickMarkLength;
	
				// Width
				if (isHorizontal) {
					// subtract the margins to line up with the chartArea if we are a full width scale
					minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
				} else {
					minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
				}
	
				// height
				if (isHorizontal) {
					minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
				} else {
					minSize.height = me.maxHeight; // fill all the height
				}
	
				// Are we showing a title for the scale?
				if (scaleLabelOpts.display && display) {
					if (isHorizontal) {
						minSize.height += scaleLabelFontSize;
					} else {
						minSize.width += scaleLabelFontSize;
					}
				}
	
				// Don't bother fitting the ticks if we are not showing them
				if (tickOpts.display && display) {
					var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
					var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
					var lineSpace = tickFont.size * 0.5;
	
					if (isHorizontal) {
						// A horizontal axis is more constrained by the height.
						me.longestLabelWidth = largestTextWidth;
	
						var angleRadians = helpers.toRadians(me.labelRotation);
						var cosRotation = Math.cos(angleRadians);
						var sinRotation = Math.sin(angleRadians);
	
						// TODO - improve this calculation
						var labelHeight = (sinRotation * largestTextWidth)
							+ (tickFont.size * tallestLabelHeightInLines)
							+ (lineSpace * tallestLabelHeightInLines);
	
						minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
						me.ctx.font = tickFont.font;
	
						var firstTick = me.ticks[0];
						var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
	
						var lastTick = me.ticks[me.ticks.length - 1];
						var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);
	
						// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated
						// by the font height
						if (me.labelRotation !== 0) {
							me.paddingLeft = opts.position === 'bottom'? (cosRotation * firstLabelWidth) + 3: (cosRotation * lineSpace) + 3; // add 3 px to move away from canvas edges
							me.paddingRight = opts.position === 'bottom'? (cosRotation * lineSpace) + 3: (cosRotation * lastLabelWidth) + 3;
						} else {
							me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
							me.paddingRight = lastLabelWidth / 2 + 3;
						}
					} else {
						// A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first
						// Account for padding
	
						if (tickOpts.mirror) {
							largestTextWidth = 0;
						} else {
							largestTextWidth += me.options.ticks.padding;
						}
						minSize.width += largestTextWidth;
						me.paddingTop = tickFont.size / 2;
						me.paddingBottom = tickFont.size / 2;
					}
				}
	
				me.handleMargins();
	
				me.width = minSize.width;
				me.height = minSize.height;
			},
	
			/**
			 * Handle margins and padding interactions
			 * @private
			 */
			handleMargins: function() {
				var me = this;
				if (me.margins) {
					me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
					me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
					me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
					me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
				}
			},
	
			afterFit: function() {
				helpers.callCallback(this.options.afterFit, [this]);
			},
	
			// Shared Methods
			isHorizontal: function() {
				return this.options.position === 'top' || this.options.position === 'bottom';
			},
			isFullWidth: function() {
				return (this.options.fullWidth);
			},
	
			// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
			getRightValue: function(rawValue) {
				// Null and undefined values first
				if (rawValue === null || typeof(rawValue) === 'undefined') {
					return NaN;
				}
				// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
				if (typeof(rawValue) === 'number' && !isFinite(rawValue)) {
					return NaN;
				}
				// If it is in fact an object, dive in one more level
				if (typeof(rawValue) === 'object') {
					if ((rawValue instanceof Date) || (rawValue.isValid)) {
						return rawValue;
					}
					return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
				}
	
				// Value is good, return it
				return rawValue;
			},
	
			// Used to get the value to display in the tooltip for the data at the given index
			// function getLabelForIndex(index, datasetIndex)
			getLabelForIndex: helpers.noop,
	
			// Used to get data value locations.  Value can either be an index or a numerical value
			getPixelForValue: helpers.noop,
	
			// Used to get the data value from a given pixel. This is the inverse of getPixelForValue
			getValueForPixel: helpers.noop,
	
			// Used for tick location, should
			getPixelForTick: function(index, includeOffset) {
				var me = this;
				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var tickWidth = innerWidth / Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
					var pixel = (tickWidth * index) + me.paddingLeft;
	
					if (includeOffset) {
						pixel += tickWidth / 2;
					}
	
					var finalVal = me.left + Math.round(pixel);
					finalVal += me.isFullWidth() ? me.margins.left : 0;
					return finalVal;
				}
				var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
				return me.top + (index * (innerHeight / (me.ticks.length - 1)));
			},
	
			// Utility for getting the pixel location of a percentage of scale
			getPixelForDecimal: function(decimal /* , includeOffset*/) {
				var me = this;
				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var valueOffset = (innerWidth * decimal) + me.paddingLeft;
	
					var finalVal = me.left + Math.round(valueOffset);
					finalVal += me.isFullWidth() ? me.margins.left : 0;
					return finalVal;
				}
				return me.top + (decimal * me.height);
			},
	
			getBasePixel: function() {
				return this.getPixelForValue(this.getBaseValue());
			},
	
			getBaseValue: function() {
				var me = this;
				var min = me.min;
				var max = me.max;
	
				return me.beginAtZero ? 0:
					min < 0 && max < 0? max :
					min > 0 && max > 0? min :
					0;
			},
	
			// Actually draw the scale on the canvas
			// @param {rectangle} chartArea : the area of the chart to draw full grid lines on
			draw: function(chartArea) {
				var me = this;
				var options = me.options;
				if (!options.display) {
					return;
				}
	
				var context = me.ctx;
				var globalDefaults = Chart.defaults.global;
				var optionTicks = options.ticks;
				var gridLines = options.gridLines;
				var scaleLabel = options.scaleLabel;
	
				var isRotated = me.labelRotation !== 0;
				var skipRatio;
				var useAutoskipper = optionTicks.autoSkip;
				var isHorizontal = me.isHorizontal();
	
				// figure out the maximum number of gridlines to show
				var maxTicks;
				if (optionTicks.maxTicksLimit) {
					maxTicks = optionTicks.maxTicksLimit;
				}
	
				var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
				var tickFont = parseFontOptions(optionTicks);
	
				var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
				var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
				var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
	
				var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
				var scaleLabelFont = parseFontOptions(scaleLabel);
	
				var labelRotationRadians = helpers.toRadians(me.labelRotation);
				var cosRotation = Math.cos(labelRotationRadians);
				var longestRotatedLabel = me.longestLabelWidth * cosRotation;
	
				// Make sure we draw text in the correct color and font
				context.fillStyle = tickFontColor;
	
				var itemsToDraw = [];
	
				if (isHorizontal) {
					skipRatio = false;
	
					// Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation
					// See #2584
					if (isRotated) {
						longestRotatedLabel /= 2;
					}
	
					if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > (me.width - (me.paddingLeft + me.paddingRight))) {
						skipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length) / (me.width - (me.paddingLeft + me.paddingRight)));
					}
	
					// if they defined a max number of optionTicks,
					// increase skipRatio until that number is met
					if (maxTicks && me.ticks.length > maxTicks) {
						while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
							if (!skipRatio) {
								skipRatio = 1;
							}
							skipRatio += 1;
						}
					}
	
					if (!useAutoskipper) {
						skipRatio = false;
					}
				}
	
	
				var xTickStart = options.position === 'right' ? me.left : me.right - tl;
				var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
				var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
				var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
	
				helpers.each(me.ticks, function(label, index) {
					// If the callback returned a null or undefined value, do not draw this line
					if (label === undefined || label === null) {
						return;
					}
	
					var isLastTick = me.ticks.length === index + 1;
	
					// Since we always show the last tick,we need may need to hide the last shown one before
					var shouldSkip = (skipRatio > 1 && index % skipRatio > 0) || (index % skipRatio === 0 && index + skipRatio >= me.ticks.length);
					if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
						return;
					}
	
					var lineWidth, lineColor;
					if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
						// Draw the first index specially
						lineWidth = gridLines.zeroLineWidth;
						lineColor = gridLines.zeroLineColor;
					} else {
						lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
						lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
					}
	
					// Common properties
					var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
					var textAlign = 'middle';
					var textBaseline = 'middle';
	
					if (isHorizontal) {
	
						if (options.position === 'bottom') {
							// bottom
							textBaseline = !isRotated? 'top':'middle';
							textAlign = !isRotated? 'center': 'right';
							labelY = me.top + tl;
						} else {
							// top
							textBaseline = !isRotated? 'bottom':'middle';
							textAlign = !isRotated? 'center': 'left';
							labelY = me.bottom - tl;
						}
	
						var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines
						labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)
	
						tx1 = tx2 = x1 = x2 = xLineValue;
						ty1 = yTickStart;
						ty2 = yTickEnd;
						y1 = chartArea.top;
						y2 = chartArea.bottom;
					} else {
						var isLeft = options.position === 'left';
						var tickPadding = optionTicks.padding;
						var labelXOffset;
	
						if (optionTicks.mirror) {
							textAlign = isLeft ? 'left' : 'right';
							labelXOffset = tickPadding;
						} else {
							textAlign = isLeft ? 'right' : 'left';
							labelXOffset = tl + tickPadding;
						}
	
						labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
	
						var yLineValue = me.getPixelForTick(index); // xvalues for grid lines
						yLineValue += helpers.aliasPixel(lineWidth);
						labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
	
						tx1 = xTickStart;
						tx2 = xTickEnd;
						x1 = chartArea.left;
						x2 = chartArea.right;
						ty1 = ty2 = y1 = y2 = yLineValue;
					}
	
					itemsToDraw.push({
						tx1: tx1,
						ty1: ty1,
						tx2: tx2,
						ty2: ty2,
						x1: x1,
						y1: y1,
						x2: x2,
						y2: y2,
						labelX: labelX,
						labelY: labelY,
						glWidth: lineWidth,
						glColor: lineColor,
						glBorderDash: borderDash,
						glBorderDashOffset: borderDashOffset,
						rotation: -1 * labelRotationRadians,
						label: label,
						textBaseline: textBaseline,
						textAlign: textAlign
					});
				});
	
				// Draw all of the tick labels, tick marks, and grid lines at the correct places
				helpers.each(itemsToDraw, function(itemToDraw) {
					if (gridLines.display) {
						context.save();
						context.lineWidth = itemToDraw.glWidth;
						context.strokeStyle = itemToDraw.glColor;
						if (context.setLineDash) {
							context.setLineDash(itemToDraw.glBorderDash);
							context.lineDashOffset = itemToDraw.glBorderDashOffset;
						}
	
						context.beginPath();
	
						if (gridLines.drawTicks) {
							context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
							context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
						}
	
						if (gridLines.drawOnChartArea) {
							context.moveTo(itemToDraw.x1, itemToDraw.y1);
							context.lineTo(itemToDraw.x2, itemToDraw.y2);
						}
	
						context.stroke();
						context.restore();
					}
	
					if (optionTicks.display) {
						context.save();
						context.translate(itemToDraw.labelX, itemToDraw.labelY);
						context.rotate(itemToDraw.rotation);
						context.font = tickFont.font;
						context.textBaseline = itemToDraw.textBaseline;
						context.textAlign = itemToDraw.textAlign;
	
						var label = itemToDraw.label;
						if (helpers.isArray(label)) {
							for (var i = 0, y = 0; i < label.length; ++i) {
								// We just make sure the multiline element is a string here..
								context.fillText('' + label[i], 0, y);
								// apply same lineSpacing as calculated @ L#320
								y += (tickFont.size * 1.5);
							}
						} else {
							context.fillText(label, 0, 0);
						}
						context.restore();
					}
				});
	
				if (scaleLabel.display) {
					// Draw the scale label
					var scaleLabelX;
					var scaleLabelY;
					var rotation = 0;
	
					if (isHorizontal) {
						scaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width
						scaleLabelY = options.position === 'bottom' ? me.bottom - (scaleLabelFont.size / 2) : me.top + (scaleLabelFont.size / 2);
					} else {
						var isLeft = options.position === 'left';
						scaleLabelX = isLeft ? me.left + (scaleLabelFont.size / 2) : me.right - (scaleLabelFont.size / 2);
						scaleLabelY = me.top + ((me.bottom - me.top) / 2);
						rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
					}
	
					context.save();
					context.translate(scaleLabelX, scaleLabelY);
					context.rotate(rotation);
					context.textAlign = 'center';
					context.textBaseline = 'middle';
					context.fillStyle = scaleLabelFontColor; // render in correct colour
					context.font = scaleLabelFont.font;
					context.fillText(scaleLabel.labelString, 0, 0);
					context.restore();
				}
	
				if (gridLines.drawBorder) {
					// Draw the line at the edge of the axis
					context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
					context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
					var x1 = me.left,
						x2 = me.right,
						y1 = me.top,
						y2 = me.bottom;
	
					var aliasPixel = helpers.aliasPixel(context.lineWidth);
					if (isHorizontal) {
						y1 = y2 = options.position === 'top' ? me.bottom : me.top;
						y1 += aliasPixel;
						y2 += aliasPixel;
					} else {
						x1 = x2 = options.position === 'left' ? me.right : me.left;
						x1 += aliasPixel;
						x2 += aliasPixel;
					}
	
					context.beginPath();
					context.moveTo(x1, y1);
					context.lineTo(x2, y2);
					context.stroke();
				}
			}
		});
	};
	
	},{}],33:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.scaleService = {
			// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
			// use the new chart options to grab the correct scale
			constructors: {},
			// Use a registration function so that we can move to an ES6 map when we no longer need to support
			// old browsers
	
			// Scale config defaults
			defaults: {},
			registerScaleType: function(type, scaleConstructor, defaults) {
				this.constructors[type] = scaleConstructor;
				this.defaults[type] = helpers.clone(defaults);
			},
			getScaleConstructor: function(type) {
				return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
			},
			getScaleDefaults: function(type) {
				// Return the scale defaults merged with the global settings so that we always use the latest ones
				return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
			},
			updateScaleDefaults: function(type, additions) {
				var defaults = this.defaults;
				if (defaults.hasOwnProperty(type)) {
					defaults[type] = helpers.extend(defaults[type], additions);
				}
			},
			addScalesToLayout: function(chartInstance) {
				// Adds each scale to the chart.boxes array to be sized accordingly
				helpers.each(chartInstance.scales, function(scale) {
					Chart.layoutService.addBox(chartInstance, scale);
				});
			}
		};
	};
	
	},{}],34:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		/**
		 * Namespace to hold static tick generation functions
		 * @namespace Chart.Ticks
		 */
		Chart.Ticks = {
			/**
			 * Namespace to hold generators for different types of ticks
			 * @namespace Chart.Ticks.generators
			 */
			generators: {
				/**
				 * Interface for the options provided to the numeric tick generator
				 * @interface INumericTickGenerationOptions
				 */
				/**
				 * The maximum number of ticks to display
				 * @name INumericTickGenerationOptions#maxTicks
				 * @type Number
				 */
				/**
				 * The distance between each tick.
				 * @name INumericTickGenerationOptions#stepSize
				 * @type Number
				 * @optional
				 */
				/**
				 * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum
				 * @name INumericTickGenerationOptions#min
				 * @type Number
				 * @optional
				 */
				/**
				 * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum
				 * @name INumericTickGenerationOptions#max
				 * @type Number
				 * @optional
				 */
	
				/**
				 * Generate a set of linear ticks
				 * @method Chart.Ticks.generators.linear
				 * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
				 * @param dataRange {IRange} the range of the data
				 * @returns {Array<Number>} array of tick values
				 */
				linear: function(generationOptions, dataRange) {
					var ticks = [];
					// To get a "nice" value for the tick spacing, we will use the appropriately named
					// "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
					// for details.
	
					var spacing;
					if (generationOptions.stepSize && generationOptions.stepSize > 0) {
						spacing = generationOptions.stepSize;
					} else {
						var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
						spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
					}
					var niceMin = Math.floor(dataRange.min / spacing) * spacing;
					var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
	
					// If min, max and stepSize is set and they make an evenly spaced scale use it.
					if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
						// If very close to our whole number, use it.
						if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
							niceMin = generationOptions.min;
							niceMax = generationOptions.max;
						}
					}
	
					var numSpaces = (niceMax - niceMin) / spacing;
					// If very close to our rounded value, use it.
					if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
						numSpaces = Math.round(numSpaces);
					} else {
						numSpaces = Math.ceil(numSpaces);
					}
	
					// Put the values into the ticks array
					ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
					for (var j = 1; j < numSpaces; ++j) {
						ticks.push(niceMin + (j * spacing));
					}
					ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
	
					return ticks;
				},
	
				/**
				 * Generate a set of logarithmic ticks
				 * @method Chart.Ticks.generators.logarithmic
				 * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
				 * @param dataRange {IRange} the range of the data
				 * @returns {Array<Number>} array of tick values
				 */
				logarithmic: function(generationOptions, dataRange) {
					var ticks = [];
					var getValueOrDefault = helpers.getValueOrDefault;
	
					// Figure out what the max number of ticks we can support it is based on the size of
					// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
					// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
					// the graph
					var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
	
					var endExp = Math.floor(helpers.log10(dataRange.max));
					var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
					var exp;
					var significand;
	
					if (tickVal === 0) {
						exp = Math.floor(helpers.log10(dataRange.minNotZero));
						significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
	
						ticks.push(tickVal);
						tickVal = significand * Math.pow(10, exp);
					} else {
						exp = Math.floor(helpers.log10(tickVal));
						significand = Math.floor(tickVal / Math.pow(10, exp));
					}
	
					do {
						ticks.push(tickVal);
	
						++significand;
						if (significand === 10) {
							significand = 1;
							++exp;
						}
	
						tickVal = significand * Math.pow(10, exp);
					} while (exp < endExp || (exp === endExp && significand < endSignificand));
	
					var lastTick = getValueOrDefault(generationOptions.max, tickVal);
					ticks.push(lastTick);
	
					return ticks;
				}
			},
	
			/**
			 * Namespace to hold formatters for different types of ticks
			 * @namespace Chart.Ticks.formatters
			 */
			formatters: {
				/**
				 * Formatter for value labels
				 * @method Chart.Ticks.formatters.values
				 * @param value the value to display
				 * @return {String|Array} the label to display
				 */
				values: function(value) {
					return helpers.isArray(value) ? value : '' + value;
				},
	
				/**
				 * Formatter for linear numeric ticks
				 * @method Chart.Ticks.formatters.linear
				 * @param tickValue {Number} the value to be formatted
				 * @param index {Number} the position of the tickValue parameter in the ticks array
				 * @param ticks {Array<Number>} the list of ticks being converted
				 * @return {String} string representation of the tickValue parameter
				 */
				linear: function(tickValue, index, ticks) {
					// If we have lots of ticks, don't use the ones
					var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
	
					// If we have a number like 2.5 as the delta, figure out how many decimal places we need
					if (Math.abs(delta) > 1) {
						if (tickValue !== Math.floor(tickValue)) {
							// not an integer
							delta = tickValue - Math.floor(tickValue);
						}
					}
	
					var logDelta = helpers.log10(Math.abs(delta));
					var tickString = '';
	
					if (tickValue !== 0) {
						var numDecimal = -1 * Math.floor(logDelta);
						numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
						tickString = tickValue.toFixed(numDecimal);
					} else {
						tickString = '0'; // never show decimal places for 0
					}
	
					return tickString;
				},
	
				logarithmic: function(tickValue, index, ticks) {
					var remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));
	
					if (tickValue === 0) {
						return '0';
					} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
						return tickValue.toExponential();
					}
					return '';
				}
			}
		};
	};
	
	},{}],35:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		Chart.defaults.global.title = {
			display: false,
			position: 'top',
			fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
	
			fontStyle: 'bold',
			padding: 10,
	
			// actual title
			text: ''
		};
	
		var noop = helpers.noop;
		Chart.Title = Chart.Element.extend({
	
			initialize: function(config) {
				var me = this;
				helpers.extend(me, config);
	
				// Contains hit boxes for each dataset (in dataset order)
				me.legendHitBoxes = [];
			},
	
			// These methods are ordered by lifecycle. Utilities then follow.
	
			beforeUpdate: noop,
			update: function(maxWidth, maxHeight, margins) {
				var me = this;
	
				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();
	
				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = margins;
	
				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
				// Labels
				me.beforeBuildLabels();
				me.buildLabels();
				me.afterBuildLabels();
	
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();
	
				return me.minSize;
	
			},
			afterUpdate: noop,
	
			//
	
			beforeSetDimensions: noop,
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;
	
					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}
	
				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
	
				// Reset minSize
				me.minSize = {
					width: 0,
					height: 0
				};
			},
			afterSetDimensions: noop,
	
			//
	
			beforeBuildLabels: noop,
			buildLabels: noop,
			afterBuildLabels: noop,
	
			//
	
			beforeFit: noop,
			fit: function() {
				var me = this,
					valueOrDefault = helpers.getValueOrDefault,
					opts = me.options,
					globalDefaults = Chart.defaults.global,
					display = opts.display,
					fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
					minSize = me.minSize;
	
				if (me.isHorizontal()) {
					minSize.width = me.maxWidth; // fill all the width
					minSize.height = display ? fontSize + (opts.padding * 2) : 0;
				} else {
					minSize.width = display ? fontSize + (opts.padding * 2) : 0;
					minSize.height = me.maxHeight; // fill all the height
				}
	
				me.width = minSize.width;
				me.height = minSize.height;
	
			},
			afterFit: noop,
	
			// Shared Methods
			isHorizontal: function() {
				var pos = this.options.position;
				return pos === 'top' || pos === 'bottom';
			},
	
			// Actually draw the title block on the canvas
			draw: function() {
				var me = this,
					ctx = me.ctx,
					valueOrDefault = helpers.getValueOrDefault,
					opts = me.options,
					globalDefaults = Chart.defaults.global;
	
				if (opts.display) {
					var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
						fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),
						fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),
						titleFont = helpers.fontString(fontSize, fontStyle, fontFamily),
						rotation = 0,
						titleX,
						titleY,
						top = me.top,
						left = me.left,
						bottom = me.bottom,
						right = me.right,
						maxWidth;
	
					ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour
					ctx.font = titleFont;
	
					// Horizontal
					if (me.isHorizontal()) {
						titleX = left + ((right - left) / 2); // midpoint of the width
						titleY = top + ((bottom - top) / 2); // midpoint of the height
						maxWidth = right - left;
					} else {
						titleX = opts.position === 'left' ? left + (fontSize / 2) : right - (fontSize / 2);
						titleY = top + ((bottom - top) / 2);
						maxWidth = bottom - top;
						rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
					}
	
					ctx.save();
					ctx.translate(titleX, titleY);
					ctx.rotate(rotation);
					ctx.textAlign = 'center';
					ctx.textBaseline = 'middle';
					ctx.fillText(opts.text, 0, 0, maxWidth);
					ctx.restore();
				}
			}
		});
	
		function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
			var title = new Chart.Title({
				ctx: chartInstance.chart.ctx,
				options: titleOpts,
				chart: chartInstance
			});
			chartInstance.titleBlock = title;
			Chart.layoutService.addBox(chartInstance, title);
		}
	
		// Register the title plugin
		Chart.plugins.register({
			beforeInit: function(chartInstance) {
				var titleOpts = chartInstance.options.title;
	
				if (titleOpts) {
					createNewTitleBlockAndAttach(chartInstance, titleOpts);
				}
			},
			beforeUpdate: function(chartInstance) {
				var titleOpts = chartInstance.options.title;
	
				if (titleOpts) {
					titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);
	
					if (chartInstance.titleBlock) {
						chartInstance.titleBlock.options = titleOpts;
					} else {
						createNewTitleBlockAndAttach(chartInstance, titleOpts);
					}
				} else {
					Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
					delete chartInstance.titleBlock;
				}
			}
		});
	};
	
	},{}],36:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		/**
	 	 * Helper method to merge the opacity into a color
	 	 */
		function mergeOpacity(colorString, opacity) {
			var color = helpers.color(colorString);
			return color.alpha(opacity * color.alpha()).rgbaString();
		}
	
		Chart.defaults.global.tooltips = {
			enabled: true,
			custom: null,
			mode: 'nearest',
			position: 'average',
			intersect: true,
			backgroundColor: 'rgba(0,0,0,0.8)',
			titleFontStyle: 'bold',
			titleSpacing: 2,
			titleMarginBottom: 6,
			titleFontColor: '#fff',
			titleAlign: 'left',
			bodySpacing: 2,
			bodyFontColor: '#fff',
			bodyAlign: 'left',
			footerFontStyle: 'bold',
			footerSpacing: 2,
			footerMarginTop: 6,
			footerFontColor: '#fff',
			footerAlign: 'left',
			yPadding: 6,
			xPadding: 6,
			caretSize: 5,
			cornerRadius: 6,
			multiKeyBackground: '#fff',
			displayColors: true,
			callbacks: {
				// Args are: (tooltipItems, data)
				beforeTitle: helpers.noop,
				title: function(tooltipItems, data) {
					// Pick first xLabel for now
					var title = '';
					var labels = data.labels;
					var labelCount = labels ? labels.length : 0;
	
					if (tooltipItems.length > 0) {
						var item = tooltipItems[0];
	
						if (item.xLabel) {
							title = item.xLabel;
						} else if (labelCount > 0 && item.index < labelCount) {
							title = labels[item.index];
						}
					}
	
					return title;
				},
				afterTitle: helpers.noop,
	
				// Args are: (tooltipItems, data)
				beforeBody: helpers.noop,
	
				// Args are: (tooltipItem, data)
				beforeLabel: helpers.noop,
				label: function(tooltipItem, data) {
					var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
					return datasetLabel + ': ' + tooltipItem.yLabel;
				},
				labelColor: function(tooltipItem, chartInstance) {
					var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
					var activeElement = meta.data[tooltipItem.index];
					var view = activeElement._view;
					return {
						borderColor: view.borderColor,
						backgroundColor: view.backgroundColor
					};
				},
				afterLabel: helpers.noop,
	
				// Args are: (tooltipItems, data)
				afterBody: helpers.noop,
	
				// Args are: (tooltipItems, data)
				beforeFooter: helpers.noop,
				footer: helpers.noop,
				afterFooter: helpers.noop
			}
		};
	
		// Helper to push or concat based on if the 2nd parameter is an array or not
		function pushOrConcat(base, toPush) {
			if (toPush) {
				if (helpers.isArray(toPush)) {
					// base = base.concat(toPush);
					Array.prototype.push.apply(base, toPush);
				} else {
					base.push(toPush);
				}
			}
	
			return base;
		}
	
		// Private helper to create a tooltip item model
		// @param element : the chart element (point, arc, bar) to create the tooltip item for
		// @return : new tooltip item
		function createTooltipItem(element) {
			var xScale = element._xScale;
			var yScale = element._yScale || element._scale; // handle radar || polarArea charts
			var index = element._index,
				datasetIndex = element._datasetIndex;
	
			return {
				xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
				yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
				index: index,
				datasetIndex: datasetIndex,
				x: element._model.x,
				y: element._model.y
			};
		}
	
		/**
		 * Helper to get the reset model for the tooltip
		 * @param tooltipOpts {Object} the tooltip options
		 */
		function getBaseModel(tooltipOpts) {
			var globalDefaults = Chart.defaults.global;
			var getValueOrDefault = helpers.getValueOrDefault;
	
			return {
				// Positioning
				xPadding: tooltipOpts.xPadding,
				yPadding: tooltipOpts.yPadding,
				xAlign: tooltipOpts.xAlign,
				yAlign: tooltipOpts.yAlign,
	
				// Body
				bodyFontColor: tooltipOpts.bodyFontColor,
				_bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
				_bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
				_bodyAlign: tooltipOpts.bodyAlign,
				bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
				bodySpacing: tooltipOpts.bodySpacing,
	
				// Title
				titleFontColor: tooltipOpts.titleFontColor,
				_titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
				_titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
				titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
				_titleAlign: tooltipOpts.titleAlign,
				titleSpacing: tooltipOpts.titleSpacing,
				titleMarginBottom: tooltipOpts.titleMarginBottom,
	
				// Footer
				footerFontColor: tooltipOpts.footerFontColor,
				_footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
				_footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
				footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
				_footerAlign: tooltipOpts.footerAlign,
				footerSpacing: tooltipOpts.footerSpacing,
				footerMarginTop: tooltipOpts.footerMarginTop,
	
				// Appearance
				caretSize: tooltipOpts.caretSize,
				cornerRadius: tooltipOpts.cornerRadius,
				backgroundColor: tooltipOpts.backgroundColor,
				opacity: 0,
				legendColorBackground: tooltipOpts.multiKeyBackground,
				displayColors: tooltipOpts.displayColors
			};
		}
	
		/**
		 * Get the size of the tooltip
		 */
		function getTooltipSize(tooltip, model) {
			var ctx = tooltip._chart.ctx;
	
			var height = model.yPadding * 2; // Tooltip Padding
			var width = 0;
	
			// Count of all lines in the body
			var body = model.body;
			var combinedBodyLength = body.reduce(function(count, bodyItem) {
				return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
			}, 0);
			combinedBodyLength += model.beforeBody.length + model.afterBody.length;
	
			var titleLineCount = model.title.length;
			var footerLineCount = model.footer.length;
			var titleFontSize = model.titleFontSize,
				bodyFontSize = model.bodyFontSize,
				footerFontSize = model.footerFontSize;
	
			height += titleLineCount * titleFontSize; // Title Lines
			height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
			height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
			height += combinedBodyLength * bodyFontSize; // Body Lines
			height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
			height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
			height += footerLineCount * (footerFontSize); // Footer Lines
			height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
	
			// Title width
			var widthPadding = 0;
			var maxLineWidth = function(line) {
				width = Math.max(width, ctx.measureText(line).width + widthPadding);
			};
	
			ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
			helpers.each(model.title, maxLineWidth);
	
			// Body width
			ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
			helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
	
			// Body lines may include some extra width due to the color box
			widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
			helpers.each(body, function(bodyItem) {
				helpers.each(bodyItem.before, maxLineWidth);
				helpers.each(bodyItem.lines, maxLineWidth);
				helpers.each(bodyItem.after, maxLineWidth);
			});
	
			// Reset back to 0
			widthPadding = 0;
	
			// Footer width
			ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
			helpers.each(model.footer, maxLineWidth);
	
			// Add padding
			width += 2 * model.xPadding;
	
			return {
				width: width,
				height: height
			};
		}
	
		/**
		 * Helper to get the alignment of a tooltip given the size
		 */
		function determineAlignment(tooltip, size) {
			var model = tooltip._model;
			var chart = tooltip._chart;
			var chartArea = tooltip._chartInstance.chartArea;
			var xAlign = 'center';
			var yAlign = 'center';
	
			if (model.y < size.height) {
				yAlign = 'top';
			} else if (model.y > (chart.height - size.height)) {
				yAlign = 'bottom';
			}
	
			var lf, rf; // functions to determine left, right alignment
			var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
			var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
			var midX = (chartArea.left + chartArea.right) / 2;
			var midY = (chartArea.top + chartArea.bottom) / 2;
	
			if (yAlign === 'center') {
				lf = function(x) {
					return x <= midX;
				};
				rf = function(x) {
					return x > midX;
				};
			} else {
				lf = function(x) {
					return x <= (size.width / 2);
				};
				rf = function(x) {
					return x >= (chart.width - (size.width / 2));
				};
			}
	
			olf = function(x) {
				return x + size.width > chart.width;
			};
			orf = function(x) {
				return x - size.width < 0;
			};
			yf = function(y) {
				return y <= midY ? 'top' : 'bottom';
			};
	
			if (lf(model.x)) {
				xAlign = 'left';
	
				// Is tooltip too wide and goes over the right side of the chart.?
				if (olf(model.x)) {
					xAlign = 'center';
					yAlign = yf(model.y);
				}
			} else if (rf(model.x)) {
				xAlign = 'right';
	
				// Is tooltip too wide and goes outside left edge of canvas?
				if (orf(model.x)) {
					xAlign = 'center';
					yAlign = yf(model.y);
				}
			}
	
			var opts = tooltip._options;
			return {
				xAlign: opts.xAlign ? opts.xAlign : xAlign,
				yAlign: opts.yAlign ? opts.yAlign : yAlign
			};
		}
	
		/**
		 * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
		 */
		function getBackgroundPoint(vm, size, alignment) {
			// Background Position
			var x = vm.x;
			var y = vm.y;
	
			var caretSize = vm.caretSize,
				caretPadding = vm.caretPadding,
				cornerRadius = vm.cornerRadius,
				xAlign = alignment.xAlign,
				yAlign = alignment.yAlign,
				paddingAndSize = caretSize + caretPadding,
				radiusAndPadding = cornerRadius + caretPadding;
	
			if (xAlign === 'right') {
				x -= size.width;
			} else if (xAlign === 'center') {
				x -= (size.width / 2);
			}
	
			if (yAlign === 'top') {
				y += paddingAndSize;
			} else if (yAlign === 'bottom') {
				y -= size.height + paddingAndSize;
			} else {
				y -= (size.height / 2);
			}
	
			if (yAlign === 'center') {
				if (xAlign === 'left') {
					x += paddingAndSize;
				} else if (xAlign === 'right') {
					x -= paddingAndSize;
				}
			} else if (xAlign === 'left') {
				x -= radiusAndPadding;
			} else if (xAlign === 'right') {
				x += radiusAndPadding;
			}
	
			return {
				x: x,
				y: y
			};
		}
	
		Chart.Tooltip = Chart.Element.extend({
			initialize: function() {
				this._model = getBaseModel(this._options);
			},
	
			// Get the title
			// Args are: (tooltipItem, data)
			getTitle: function() {
				var me = this;
				var opts = me._options;
				var callbacks = opts.callbacks;
	
				var beforeTitle = callbacks.beforeTitle.apply(me, arguments),
					title = callbacks.title.apply(me, arguments),
					afterTitle = callbacks.afterTitle.apply(me, arguments);
	
				var lines = [];
				lines = pushOrConcat(lines, beforeTitle);
				lines = pushOrConcat(lines, title);
				lines = pushOrConcat(lines, afterTitle);
	
				return lines;
			},
	
			// Args are: (tooltipItem, data)
			getBeforeBody: function() {
				var lines = this._options.callbacks.beforeBody.apply(this, arguments);
				return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
			},
	
			// Args are: (tooltipItem, data)
			getBody: function(tooltipItems, data) {
				var me = this;
				var callbacks = me._options.callbacks;
				var bodyItems = [];
	
				helpers.each(tooltipItems, function(tooltipItem) {
					var bodyItem = {
						before: [],
						lines: [],
						after: []
					};
					pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
					pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
					pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
	
					bodyItems.push(bodyItem);
				});
	
				return bodyItems;
			},
	
			// Args are: (tooltipItem, data)
			getAfterBody: function() {
				var lines = this._options.callbacks.afterBody.apply(this, arguments);
				return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
			},
	
			// Get the footer and beforeFooter and afterFooter lines
			// Args are: (tooltipItem, data)
			getFooter: function() {
				var me = this;
				var callbacks = me._options.callbacks;
	
				var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
				var footer = callbacks.footer.apply(me, arguments);
				var afterFooter = callbacks.afterFooter.apply(me, arguments);
	
				var lines = [];
				lines = pushOrConcat(lines, beforeFooter);
				lines = pushOrConcat(lines, footer);
				lines = pushOrConcat(lines, afterFooter);
	
				return lines;
			},
	
			update: function(changed) {
				var me = this;
				var opts = me._options;
	
				// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
				// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
				// which breaks any animations.
				var existingModel = me._model;
				var model = me._model = getBaseModel(opts);
				var active = me._active;
	
				var data = me._data;
				var chartInstance = me._chartInstance;
	
				// In the case where active.length === 0 we need to keep these at existing values for good animations
				var alignment = {
					xAlign: existingModel.xAlign,
					yAlign: existingModel.yAlign
				};
				var backgroundPoint = {
					x: existingModel.x,
					y: existingModel.y
				};
				var tooltipSize = {
					width: existingModel.width,
					height: existingModel.height
				};
				var tooltipPosition = {
					x: existingModel.caretX,
					y: existingModel.caretY
				};
	
				var i, len;
	
				if (active.length) {
					model.opacity = 1;
	
					var labelColors = [];
					tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
	
					var tooltipItems = [];
					for (i = 0, len = active.length; i < len; ++i) {
						tooltipItems.push(createTooltipItem(active[i]));
					}
	
					// If the user provided a filter function, use it to modify the tooltip items
					if (opts.filter) {
						tooltipItems = tooltipItems.filter(function(a) {
							return opts.filter(a, data);
						});
					}
	
					// If the user provided a sorting function, use it to modify the tooltip items
					if (opts.itemSort) {
						tooltipItems = tooltipItems.sort(function(a, b) {
							return opts.itemSort(a, b, data);
						});
					}
	
					// Determine colors for boxes
					helpers.each(tooltipItems, function(tooltipItem) {
						labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
					});
	
					// Build the Text Lines
					model.title = me.getTitle(tooltipItems, data);
					model.beforeBody = me.getBeforeBody(tooltipItems, data);
					model.body = me.getBody(tooltipItems, data);
					model.afterBody = me.getAfterBody(tooltipItems, data);
					model.footer = me.getFooter(tooltipItems, data);
	
					// Initial positioning and colors
					model.x = Math.round(tooltipPosition.x);
					model.y = Math.round(tooltipPosition.y);
					model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
					model.labelColors = labelColors;
	
					// data points
					model.dataPoints = tooltipItems;
	
					// We need to determine alignment of the tooltip
					tooltipSize = getTooltipSize(this, model);
					alignment = determineAlignment(this, tooltipSize);
					// Final Size and Position
					backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
				} else {
					model.opacity = 0;
				}
	
				model.xAlign = alignment.xAlign;
				model.yAlign = alignment.yAlign;
				model.x = backgroundPoint.x;
				model.y = backgroundPoint.y;
				model.width = tooltipSize.width;
				model.height = tooltipSize.height;
	
				// Point where the caret on the tooltip points to
				model.caretX = tooltipPosition.x;
				model.caretY = tooltipPosition.y;
	
				me._model = model;
	
				if (changed && opts.custom) {
					opts.custom.call(me, model);
				}
	
				return me;
			},
			drawCaret: function(tooltipPoint, size, opacity) {
				var vm = this._view;
				var ctx = this._chart.ctx;
				var x1, x2, x3;
				var y1, y2, y3;
				var caretSize = vm.caretSize;
				var cornerRadius = vm.cornerRadius;
				var xAlign = vm.xAlign,
					yAlign = vm.yAlign;
				var ptX = tooltipPoint.x,
					ptY = tooltipPoint.y;
				var width = size.width,
					height = size.height;
	
				if (yAlign === 'center') {
					// Left or right side
					if (xAlign === 'left') {
						x1 = ptX;
						x2 = x1 - caretSize;
						x3 = x1;
					} else {
						x1 = ptX + width;
						x2 = x1 + caretSize;
						x3 = x1;
					}
	
					y2 = ptY + (height / 2);
					y1 = y2 - caretSize;
					y3 = y2 + caretSize;
				} else {
					if (xAlign === 'left') {
						x1 = ptX + cornerRadius;
						x2 = x1 + caretSize;
						x3 = x2 + caretSize;
					} else if (xAlign === 'right') {
						x1 = ptX + width - cornerRadius;
						x2 = x1 - caretSize;
						x3 = x2 - caretSize;
					} else {
						x2 = ptX + (width / 2);
						x1 = x2 - caretSize;
						x3 = x2 + caretSize;
					}
	
					if (yAlign === 'top') {
						y1 = ptY;
						y2 = y1 - caretSize;
						y3 = y1;
					} else {
						y1 = ptY + height;
						y2 = y1 + caretSize;
						y3 = y1;
					}
				}
	
				ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
				ctx.beginPath();
				ctx.moveTo(x1, y1);
				ctx.lineTo(x2, y2);
				ctx.lineTo(x3, y3);
				ctx.closePath();
				ctx.fill();
			},
			drawTitle: function(pt, vm, ctx, opacity) {
				var title = vm.title;
	
				if (title.length) {
					ctx.textAlign = vm._titleAlign;
					ctx.textBaseline = 'top';
	
					var titleFontSize = vm.titleFontSize,
						titleSpacing = vm.titleSpacing;
	
					ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
					ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
	
					var i, len;
					for (i = 0, len = title.length; i < len; ++i) {
						ctx.fillText(title[i], pt.x, pt.y);
						pt.y += titleFontSize + titleSpacing; // Line Height and spacing
	
						if (i + 1 === title.length) {
							pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
						}
					}
				}
			},
			drawBody: function(pt, vm, ctx, opacity) {
				var bodyFontSize = vm.bodyFontSize;
				var bodySpacing = vm.bodySpacing;
				var body = vm.body;
	
				ctx.textAlign = vm._bodyAlign;
				ctx.textBaseline = 'top';
	
				var textColor = mergeOpacity(vm.bodyFontColor, opacity);
				ctx.fillStyle = textColor;
				ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
	
				// Before Body
				var xLinePadding = 0;
				var fillLineOfText = function(line) {
					ctx.fillText(line, pt.x + xLinePadding, pt.y);
					pt.y += bodyFontSize + bodySpacing;
				};
	
				// Before body lines
				helpers.each(vm.beforeBody, fillLineOfText);
	
				var drawColorBoxes = vm.displayColors;
				xLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;
	
				// Draw body lines now
				helpers.each(body, function(bodyItem, i) {
					helpers.each(bodyItem.before, fillLineOfText);
	
					helpers.each(bodyItem.lines, function(line) {
						// Draw Legend-like boxes if needed
						if (drawColorBoxes) {
							// Fill a white rect so that colours merge nicely if the opacity is < 1
							ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
							ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
	
							// Border
							ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
							ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
	
							// Inner square
							ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
							ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
	
							ctx.fillStyle = textColor;
						}
	
						fillLineOfText(line);
					});
	
					helpers.each(bodyItem.after, fillLineOfText);
				});
	
				// Reset back to 0 for after body
				xLinePadding = 0;
	
				// After body lines
				helpers.each(vm.afterBody, fillLineOfText);
				pt.y -= bodySpacing; // Remove last body spacing
			},
			drawFooter: function(pt, vm, ctx, opacity) {
				var footer = vm.footer;
	
				if (footer.length) {
					pt.y += vm.footerMarginTop;
	
					ctx.textAlign = vm._footerAlign;
					ctx.textBaseline = 'top';
	
					ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
					ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
	
					helpers.each(footer, function(line) {
						ctx.fillText(line, pt.x, pt.y);
						pt.y += vm.footerFontSize + vm.footerSpacing;
					});
				}
			},
			drawBackground: function(pt, vm, ctx, tooltipSize, opacity) {
				ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
				helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
				ctx.fill();
			},
			draw: function() {
				var ctx = this._chart.ctx;
				var vm = this._view;
	
				if (vm.opacity === 0) {
					return;
				}
	
				var tooltipSize = {
					width: vm.width,
					height: vm.height
				};
				var pt = {
					x: vm.x,
					y: vm.y
				};
	
				// IE11/Edge does not like very small opacities, so snap to 0
				var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
	
				if (this._options.enabled) {
					// Draw Background
					this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
	
					// Draw Caret
					this.drawCaret(pt, tooltipSize, opacity);
	
					// Draw Title, Body, and Footer
					pt.x += vm.xPadding;
					pt.y += vm.yPadding;
	
					// Titles
					this.drawTitle(pt, vm, ctx, opacity);
	
					// Body
					this.drawBody(pt, vm, ctx, opacity);
	
					// Footer
					this.drawFooter(pt, vm, ctx, opacity);
				}
			},
	
			/**
			 * Handle an event
			 * @private
			 * @param {IEvent} event - The event to handle
			 * @returns {Boolean} true if the tooltip changed
			 */
			handleEvent: function(e) {
				var me = this;
				var options = me._options;
				var changed = false;
	
				me._lastActive = me._lastActive || [];
	
				// Find Active Elements for tooltips
				if (e.type === 'mouseout') {
					me._active = [];
				} else {
					me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
				}
	
				// Remember Last Actives
				changed = !helpers.arrayEquals(me._active, me._lastActive);
				me._lastActive = me._active;
	
				if (options.enabled || options.custom) {
					me._eventPosition = {
						x: e.x,
						y: e.y
					};
	
					var model = me._model;
					me.update(true);
					me.pivot();
	
					// See if our tooltip position changed
					changed |= (model.x !== me._model.x) || (model.y !== me._model.y);
				}
	
				return changed;
			}
		});
	
		/**
		 * @namespace Chart.Tooltip.positioners
		 */
		Chart.Tooltip.positioners = {
			/**
			 * Average mode places the tooltip at the average position of the elements shown
			 * @function Chart.Tooltip.positioners.average
			 * @param elements {ChartElement[]} the elements being displayed in the tooltip
			 * @returns {Point} tooltip position
			 */
			average: function(elements) {
				if (!elements.length) {
					return false;
				}
	
				var i, len;
				var x = 0;
				var y = 0;
				var count = 0;
	
				for (i = 0, len = elements.length; i < len; ++i) {
					var el = elements[i];
					if (el && el.hasValue()) {
						var pos = el.tooltipPosition();
						x += pos.x;
						y += pos.y;
						++count;
					}
				}
	
				return {
					x: Math.round(x / count),
					y: Math.round(y / count)
				};
			},
	
			/**
			 * Gets the tooltip position nearest of the item nearest to the event position
			 * @function Chart.Tooltip.positioners.nearest
			 * @param elements {Chart.Element[]} the tooltip elements
			 * @param eventPosition {Point} the position of the event in canvas coordinates
			 * @returns {Point} the tooltip position
			 */
			nearest: function(elements, eventPosition) {
				var x = eventPosition.x;
				var y = eventPosition.y;
	
				var nearestElement;
				var minDistance = Number.POSITIVE_INFINITY;
				var i, len;
				for (i = 0, len = elements.length; i < len; ++i) {
					var el = elements[i];
					if (el && el.hasValue()) {
						var center = el.getCenterPoint();
						var d = helpers.distanceBetweenPoints(eventPosition, center);
	
						if (d < minDistance) {
							minDistance = d;
							nearestElement = el;
						}
					}
				}
	
				if (nearestElement) {
					var tp = nearestElement.tooltipPosition();
					x = tp.x;
					y = tp.y;
				}
	
				return {
					x: x,
					y: y
				};
			}
		};
	};
	
	},{}],37:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			globalOpts = Chart.defaults.global;
	
		globalOpts.elements.arc = {
			backgroundColor: globalOpts.defaultColor,
			borderColor: '#fff',
			borderWidth: 2
		};
	
		Chart.elements.Arc = Chart.Element.extend({
			inLabelRange: function(mouseX) {
				var vm = this._view;
	
				if (vm) {
					return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
				}
				return false;
			},
			inRange: function(chartX, chartY) {
				var vm = this._view;
	
				if (vm) {
					var pointRelativePosition = helpers.getAngleFromPoint(vm, {
							x: chartX,
							y: chartY
						}),
						angle = pointRelativePosition.angle,
						distance = pointRelativePosition.distance;
	
					// Sanitise angle range
					var startAngle = vm.startAngle;
					var endAngle = vm.endAngle;
					while (endAngle < startAngle) {
						endAngle += 2.0 * Math.PI;
					}
					while (angle > endAngle) {
						angle -= 2.0 * Math.PI;
					}
					while (angle < startAngle) {
						angle += 2.0 * Math.PI;
					}
	
					// Check if within the range of the open/close angle
					var betweenAngles = (angle >= startAngle && angle <= endAngle),
						withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);
	
					return (betweenAngles && withinRadius);
				}
				return false;
			},
			getCenterPoint: function() {
				var vm = this._view;
				var halfAngle = (vm.startAngle + vm.endAngle) / 2;
				var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
				return {
					x: vm.x + Math.cos(halfAngle) * halfRadius,
					y: vm.y + Math.sin(halfAngle) * halfRadius
				};
			},
			getArea: function() {
				var vm = this._view;
				return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
			},
			tooltipPosition: function() {
				var vm = this._view;
	
				var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),
					rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
				return {
					x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
					y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
				};
			},
			draw: function() {
	
				var ctx = this._chart.ctx,
					vm = this._view,
					sA = vm.startAngle,
					eA = vm.endAngle;
	
				ctx.beginPath();
	
				ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
				ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
	
				ctx.closePath();
				ctx.strokeStyle = vm.borderColor;
				ctx.lineWidth = vm.borderWidth;
	
				ctx.fillStyle = vm.backgroundColor;
	
				ctx.fill();
				ctx.lineJoin = 'bevel';
	
				if (vm.borderWidth) {
					ctx.stroke();
				}
			}
		});
	};
	
	},{}],38:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var globalDefaults = Chart.defaults.global;
	
		Chart.defaults.global.elements.line = {
			tension: 0.4,
			backgroundColor: globalDefaults.defaultColor,
			borderWidth: 3,
			borderColor: globalDefaults.defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		};
	
		Chart.elements.Line = Chart.Element.extend({
			draw: function() {
				var me = this;
				var vm = me._view;
				var spanGaps = vm.spanGaps;
				var fillPoint = vm.scaleZero;
				var loop = me._loop;
	
				// Handle different fill modes for cartesian lines
				if (!loop) {
					if (vm.fill === 'top') {
						fillPoint = vm.scaleTop;
					} else if (vm.fill === 'bottom') {
						fillPoint = vm.scaleBottom;
					}
				}
	
				var ctx = me._chart.ctx;
				ctx.save();
	
				// Helper function to draw a line to a point
				function lineToPoint(previousPoint, point) {
					var pointVM = point._view;
					if (point._view.steppedLine === true) {
						ctx.lineTo(pointVM.x, previousPoint._view.y);
						ctx.lineTo(pointVM.x, pointVM.y);
					} else if (point._view.tension === 0) {
						ctx.lineTo(pointVM.x, pointVM.y);
					} else {
						ctx.bezierCurveTo(
							previousPoint._view.controlPointNextX,
							previousPoint._view.controlPointNextY,
							pointVM.controlPointPreviousX,
							pointVM.controlPointPreviousY,
							pointVM.x,
							pointVM.y
						);
					}
				}
	
				var points = me._children.slice(); // clone array
				var lastDrawnIndex = -1;
	
				// If we are looping, adding the first point again
				if (loop && points.length) {
					points.push(points[0]);
				}
	
				var index, current, previous, currentVM;
	
				// Fill Line
				if (points.length && vm.fill) {
					ctx.beginPath();
	
					for (index = 0; index < points.length; ++index) {
						current = points[index];
						previous = helpers.previousItem(points, index);
						currentVM = current._view;
	
						// First point moves to it's starting position no matter what
						if (index === 0) {
							if (loop) {
								ctx.moveTo(fillPoint.x, fillPoint.y);
							} else {
								ctx.moveTo(currentVM.x, fillPoint);
							}
	
							if (!currentVM.skip) {
								lastDrawnIndex = index;
								ctx.lineTo(currentVM.x, currentVM.y);
							}
						} else {
							previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
	
							if (currentVM.skip) {
								// Only do this if this is the first point that is skipped
								if (!spanGaps && lastDrawnIndex === (index - 1)) {
									if (loop) {
										ctx.lineTo(fillPoint.x, fillPoint.y);
									} else {
										ctx.lineTo(previous._view.x, fillPoint);
									}
								}
							} else {
								if (lastDrawnIndex !== (index - 1)) {
									// There was a gap and this is the first point after the gap. If we've never drawn a point, this is a special case.
									// If the first data point is NaN, then there is no real gap to skip
									if (spanGaps && lastDrawnIndex !== -1) {
										// We are spanning the gap, so simple draw a line to this point
										lineToPoint(previous, current);
									} else if (loop) {
										ctx.lineTo(currentVM.x, currentVM.y);
									} else {
										ctx.lineTo(currentVM.x, fillPoint);
										ctx.lineTo(currentVM.x, currentVM.y);
									}
								} else {
									// Line to next point
									lineToPoint(previous, current);
								}
								lastDrawnIndex = index;
							}
						}
					}
	
					if (!loop && lastDrawnIndex !== -1) {
						ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
					}
	
					ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
					ctx.closePath();
					ctx.fill();
				}
	
				// Stroke Line Options
				var globalOptionLineElements = globalDefaults.elements.line;
				ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
	
				// IE 9 and 10 do not support line dash
				if (ctx.setLineDash) {
					ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
				}
	
				ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
				ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
				ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
				ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
	
				// Stroke Line
				ctx.beginPath();
				lastDrawnIndex = -1;
	
				for (index = 0; index < points.length; ++index) {
					current = points[index];
					previous = helpers.previousItem(points, index);
					currentVM = current._view;
	
					// First point moves to it's starting position no matter what
					if (index === 0) {
						if (!currentVM.skip) {
							ctx.moveTo(currentVM.x, currentVM.y);
							lastDrawnIndex = index;
						}
					} else {
						previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
	
						if (!currentVM.skip) {
							if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
								// There was a gap and this is the first point after the gap
								ctx.moveTo(currentVM.x, currentVM.y);
							} else {
								// Line to next point
								lineToPoint(previous, current);
							}
							lastDrawnIndex = index;
						}
					}
				}
	
				ctx.stroke();
				ctx.restore();
			}
		});
	};
	
	},{}],39:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			globalOpts = Chart.defaults.global,
			defaultColor = globalOpts.defaultColor;
	
		globalOpts.elements.point = {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor,
			borderWidth: 1,
			borderColor: defaultColor,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		};
	
		function xRange(mouseX) {
			var vm = this._view;
			return vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
		}
	
		function yRange(mouseY) {
			var vm = this._view;
			return vm ? (Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
		}
	
		Chart.elements.Point = Chart.Element.extend({
			inRange: function(mouseX, mouseY) {
				var vm = this._view;
				return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
			},
	
			inLabelRange: xRange,
			inXRange: xRange,
			inYRange: yRange,
	
			getCenterPoint: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y
				};
			},
			getArea: function() {
				return Math.PI * Math.pow(this._view.radius, 2);
			},
			tooltipPosition: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y,
					padding: vm.radius + vm.borderWidth
				};
			},
			draw: function(chartArea) {
				var vm = this._view;
				var model = this._model;
				var ctx = this._chart.ctx;
				var pointStyle = vm.pointStyle;
				var radius = vm.radius;
				var x = vm.x;
				var y = vm.y;
				var color = Chart.helpers.color;
				var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)
				var ratio = 0;
	
				if (vm.skip) {
					return;
				}
	
				ctx.strokeStyle = vm.borderColor || defaultColor;
				ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
				ctx.fillStyle = vm.backgroundColor || defaultColor;
	
				// Cliping for Points.
				// going out from inner charArea?
				if ((chartArea !== undefined) && ((model.x < chartArea.left) || (chartArea.right*errMargin < model.x) || (model.y < chartArea.top) || (chartArea.bottom*errMargin < model.y))) {
					// Point fade out
					if (model.x < chartArea.left) {
						ratio = (x - model.x) / (chartArea.left - model.x);
					} else if (chartArea.right*errMargin < model.x) {
						ratio = (model.x - x) / (model.x - chartArea.right);
					} else if (model.y < chartArea.top) {
						ratio = (y - model.y) / (chartArea.top - model.y);
					} else if (chartArea.bottom*errMargin < model.y) {
						ratio = (model.y - y) / (model.y - chartArea.bottom);
					}
					ratio = Math.round(ratio*100) / 100;
					ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
					ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
				}
	
				Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
			}
		});
	};
	
	},{}],40:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var globalOpts = Chart.defaults.global;
	
		globalOpts.elements.rectangle = {
			backgroundColor: globalOpts.defaultColor,
			borderWidth: 0,
			borderColor: globalOpts.defaultColor,
			borderSkipped: 'bottom'
		};
	
		function isVertical(bar) {
			return bar._view.width !== undefined;
		}
	
		/**
		 * Helper function to get the bounds of the bar regardless of the orientation
		 * @private
		 * @param bar {Chart.Element.Rectangle} the bar
		 * @return {Bounds} bounds of the bar
		 */
		function getBarBounds(bar) {
			var vm = bar._view;
			var x1, x2, y1, y2;
	
			if (isVertical(bar)) {
				// vertical
				var halfWidth = vm.width / 2;
				x1 = vm.x - halfWidth;
				x2 = vm.x + halfWidth;
				y1 = Math.min(vm.y, vm.base);
				y2 = Math.max(vm.y, vm.base);
			} else {
				// horizontal bar
				var halfHeight = vm.height / 2;
				x1 = Math.min(vm.x, vm.base);
				x2 = Math.max(vm.x, vm.base);
				y1 = vm.y - halfHeight;
				y2 = vm.y + halfHeight;
			}
	
			return {
				left: x1,
				top: y1,
				right: x2,
				bottom: y2
			};
		}
	
		Chart.elements.Rectangle = Chart.Element.extend({
			draw: function() {
				var ctx = this._chart.ctx;
				var vm = this._view;
				var left, right, top, bottom, signX, signY, borderSkipped;
				var borderWidth = vm.borderWidth;
	
				if (!vm.horizontal) {
					// bar
					left = vm.x - vm.width / 2;
					right = vm.x + vm.width / 2;
					top = vm.y;
					bottom = vm.base;
					signX = 1;
					signY = bottom > top? 1: -1;
					borderSkipped = vm.borderSkipped || 'bottom';
				} else {
					// horizontal bar
					left = vm.base;
					right = vm.x;
					top = vm.y - vm.height / 2;
					bottom = vm.y + vm.height / 2;
					signX = right > left? 1: -1;
					signY = 1;
					borderSkipped = vm.borderSkipped || 'left';
				}
	
				// Canvas doesn't allow us to stroke inside the width so we can
				// adjust the sizes to fit if we're setting a stroke on the line
				if (borderWidth) {
					// borderWidth shold be less than bar width and bar height.
					var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
					borderWidth = borderWidth > barSize? barSize: borderWidth;
					var halfStroke = borderWidth / 2;
					// Adjust borderWidth when bar top position is near vm.base(zero).
					var borderLeft = left + (borderSkipped !== 'left'? halfStroke * signX: 0);
					var borderRight = right + (borderSkipped !== 'right'? -halfStroke * signX: 0);
					var borderTop = top + (borderSkipped !== 'top'? halfStroke * signY: 0);
					var borderBottom = bottom + (borderSkipped !== 'bottom'? -halfStroke * signY: 0);
					// not become a vertical line?
					if (borderLeft !== borderRight) {
						top = borderTop;
						bottom = borderBottom;
					}
					// not become a horizontal line?
					if (borderTop !== borderBottom) {
						left = borderLeft;
						right = borderRight;
					}
				}
	
				ctx.beginPath();
				ctx.fillStyle = vm.backgroundColor;
				ctx.strokeStyle = vm.borderColor;
				ctx.lineWidth = borderWidth;
	
				// Corner points, from bottom-left to bottom-right clockwise
				// | 1 2 |
				// | 0 3 |
				var corners = [
					[left, bottom],
					[left, top],
					[right, top],
					[right, bottom]
				];
	
				// Find first (starting) corner with fallback to 'bottom'
				var borders = ['bottom', 'left', 'top', 'right'];
				var startCorner = borders.indexOf(borderSkipped, 0);
				if (startCorner === -1) {
					startCorner = 0;
				}
	
				function cornerAt(index) {
					return corners[(startCorner + index) % 4];
				}
	
				// Draw rectangle from 'startCorner'
				var corner = cornerAt(0);
				ctx.moveTo(corner[0], corner[1]);
	
				for (var i = 1; i < 4; i++) {
					corner = cornerAt(i);
					ctx.lineTo(corner[0], corner[1]);
				}
	
				ctx.fill();
				if (borderWidth) {
					ctx.stroke();
				}
			},
			height: function() {
				var vm = this._view;
				return vm.base - vm.y;
			},
			inRange: function(mouseX, mouseY) {
				var inRange = false;
	
				if (this._view) {
					var bounds = getBarBounds(this);
					inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
				}
	
				return inRange;
			},
			inLabelRange: function(mouseX, mouseY) {
				var me = this;
				if (!me._view) {
					return false;
				}
	
				var inRange = false;
				var bounds = getBarBounds(me);
	
				if (isVertical(me)) {
					inRange = mouseX >= bounds.left && mouseX <= bounds.right;
				} else {
					inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
				}
	
				return inRange;
			},
			inXRange: function(mouseX) {
				var bounds = getBarBounds(this);
				return mouseX >= bounds.left && mouseX <= bounds.right;
			},
			inYRange: function(mouseY) {
				var bounds = getBarBounds(this);
				return mouseY >= bounds.top && mouseY <= bounds.bottom;
			},
			getCenterPoint: function() {
				var vm = this._view;
				var x, y;
				if (isVertical(this)) {
					x = vm.x;
					y = (vm.y + vm.base) / 2;
				} else {
					x = (vm.x + vm.base) / 2;
					y = vm.y;
				}
	
				return {x: x, y: y};
			},
			getArea: function() {
				var vm = this._view;
				return vm.width * Math.abs(vm.y - vm.base);
			},
			tooltipPosition: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y
				};
			}
		});
	
	};
	
	},{}],41:[function(require,module,exports){
	'use strict';
	
	// Chart.Platform implementation for targeting a web browser
	module.exports = function(Chart) {
		var helpers = Chart.helpers;
	
		// DOM event types -> Chart.js event types.
		// Note: only events with different types are mapped.
		// https://developer.mozilla.org/en-US/docs/Web/Events
		var eventTypeMap = {
			// Touch events
			touchstart: 'mousedown',
			touchmove: 'mousemove',
			touchend: 'mouseup',
	
			// Pointer events
			pointerenter: 'mouseenter',
			pointerdown: 'mousedown',
			pointermove: 'mousemove',
			pointerup: 'mouseup',
			pointerleave: 'mouseout',
			pointerout: 'mouseout'
		};
	
		/**
		 * The "used" size is the final value of a dimension property after all calculations have
		 * been performed. This method uses the computed style of `element` but returns undefined
		 * if the computed style is not expressed in pixels. That can happen in some cases where
		 * `element` has a size relative to its parent and this last one is not yet displayed,
		 * for example because of `display: none` on a parent node.
		 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
		 * @returns {Number} Size in pixels or undefined if unknown.
		 */
		function readUsedSize(element, property) {
			var value = helpers.getStyle(element, property);
			var matches = value && value.match(/(\d+)px/);
			return matches? Number(matches[1]) : undefined;
		}
	
		/**
		 * Initializes the canvas style and render size without modifying the canvas display size,
		 * since responsiveness is handled by the controller.resize() method. The config is used
		 * to determine the aspect ratio to apply in case no explicit height has been specified.
		 */
		function initCanvas(canvas, config) {
			var style = canvas.style;
	
			// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
			// returns null or '' if no explicit value has been set to the canvas attribute.
			var renderHeight = canvas.getAttribute('height');
			var renderWidth = canvas.getAttribute('width');
	
			// Chart.js modifies some canvas values that we want to restore on destroy
			canvas._chartjs = {
				initial: {
					height: renderHeight,
					width: renderWidth,
					style: {
						display: style.display,
						height: style.height,
						width: style.width
					}
				}
			};
	
			// Force canvas to display as block to avoid extra space caused by inline
			// elements, which would interfere with the responsive resize process.
			// https://github.com/chartjs/Chart.js/issues/2538
			style.display = style.display || 'block';
	
			if (renderWidth === null || renderWidth === '') {
				var displayWidth = readUsedSize(canvas, 'width');
				if (displayWidth !== undefined) {
					canvas.width = displayWidth;
				}
			}
	
			if (renderHeight === null || renderHeight === '') {
				if (canvas.style.height === '') {
					// If no explicit render height and style height, let's apply the aspect ratio,
					// which one can be specified by the user but also by charts as default option
					// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
					canvas.height = canvas.width / (config.options.aspectRatio || 2);
				} else {
					var displayHeight = readUsedSize(canvas, 'height');
					if (displayWidth !== undefined) {
						canvas.height = displayHeight;
					}
				}
			}
	
			return canvas;
		}
	
		function createEvent(type, chart, x, y, native) {
			return {
				type: type,
				chart: chart,
				native: native || null,
				x: x !== undefined? x : null,
				y: y !== undefined? y : null,
			};
		}
	
		function fromNativeEvent(event, chart) {
			var type = eventTypeMap[event.type] || event.type;
			var pos = helpers.getRelativePosition(event, chart);
			return createEvent(type, chart, pos.x, pos.y, event);
		}
	
		function createResizer(handler) {
			var iframe = document.createElement('iframe');
			iframe.className = 'chartjs-hidden-iframe';
			iframe.style.cssText =
				'display:block;'+
				'overflow:hidden;'+
				'border:0;'+
				'margin:0;'+
				'top:0;'+
				'left:0;'+
				'bottom:0;'+
				'right:0;'+
				'height:100%;'+
				'width:100%;'+
				'position:absolute;'+
				'pointer-events:none;'+
				'z-index:-1;';
	
			// Prevent the iframe to gain focus on tab.
			// https://github.com/chartjs/Chart.js/issues/3090
			iframe.tabIndex = -1;
	
			// If the iframe is re-attached to the DOM, the resize listener is removed because the
			// content is reloaded, so make sure to install the handler after the iframe is loaded.
			// https://github.com/chartjs/Chart.js/issues/3521
			helpers.addEvent(iframe, 'load', function() {
				helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);
	
				// The iframe size might have changed while loading, which can also
				// happen if the size has been changed while detached from the DOM.
				handler();
			});
	
			return iframe;
		}
	
		function addResizeListener(node, listener, chart) {
			var stub = node._chartjs = {
				ticking: false
			};
	
			// Throttle the callback notification until the next animation frame.
			var notify = function() {
				if (!stub.ticking) {
					stub.ticking = true;
					helpers.requestAnimFrame.call(window, function() {
						if (stub.resizer) {
							stub.ticking = false;
							return listener(createEvent('resize', chart));
						}
					});
				}
			};
	
			// Let's keep track of this added iframe and thus avoid DOM query when removing it.
			stub.resizer = createResizer(notify);
	
			node.insertBefore(stub.resizer, node.firstChild);
		}
	
		function removeResizeListener(node) {
			if (!node || !node._chartjs) {
				return;
			}
	
			var resizer = node._chartjs.resizer;
			if (resizer) {
				resizer.parentNode.removeChild(resizer);
				node._chartjs.resizer = null;
			}
	
			delete node._chartjs;
		}
	
		return {
			acquireContext: function(item, config) {
				if (typeof item === 'string') {
					item = document.getElementById(item);
				} else if (item.length) {
					// Support for array based queries (such as jQuery)
					item = item[0];
				}
	
				if (item && item.canvas) {
					// Support for any object associated to a canvas (including a context2d)
					item = item.canvas;
				}
	
				if (item instanceof HTMLCanvasElement) {
					// To prevent canvas fingerprinting, some add-ons undefine the getContext
					// method, for example: https://github.com/kkapsner/CanvasBlocker
					// https://github.com/chartjs/Chart.js/issues/2807
					var context = item.getContext && item.getContext('2d');
					if (context instanceof CanvasRenderingContext2D) {
						initCanvas(item, config);
						return context;
					}
				}
	
				return null;
			},
	
			releaseContext: function(context) {
				var canvas = context.canvas;
				if (!canvas._chartjs) {
					return;
				}
	
				var initial = canvas._chartjs.initial;
				['height', 'width'].forEach(function(prop) {
					var value = initial[prop];
					if (value === undefined || value === null) {
						canvas.removeAttribute(prop);
					} else {
						canvas.setAttribute(prop, value);
					}
				});
	
				helpers.each(initial.style || {}, function(value, key) {
					canvas.style[key] = value;
				});
	
				// The canvas render size might have been changed (and thus the state stack discarded),
				// we can't use save() and restore() to restore the initial state. So make sure that at
				// least the canvas context is reset to the default state by setting the canvas width.
				// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
				canvas.width = canvas.width;
	
				delete canvas._chartjs;
			},
	
			addEventListener: function(chart, type, listener) {
				var canvas = chart.chart.canvas;
				if (type === 'resize') {
					// Note: the resize event is not supported on all browsers.
					addResizeListener(canvas.parentNode, listener, chart.chart);
					return;
				}
	
				var stub = listener._chartjs || (listener._chartjs = {});
				var proxies = stub.proxies || (stub.proxies = {});
				var proxy = proxies[chart.id + '_' + type] = function(event) {
					listener(fromNativeEvent(event, chart.chart));
				};
	
				helpers.addEvent(canvas, type, proxy);
			},
	
			removeEventListener: function(chart, type, listener) {
				var canvas = chart.chart.canvas;
				if (type === 'resize') {
					// Note: the resize event is not supported on all browsers.
					removeResizeListener(canvas.parentNode, listener);
					return;
				}
	
				var stub = listener._chartjs || {};
				var proxies = stub.proxies || {};
				var proxy = proxies[chart.id + '_' + type];
				if (!proxy) {
					return;
				}
	
				helpers.removeEvent(canvas, type, proxy);
			}
		};
	};
	
	},{}],42:[function(require,module,exports){
	'use strict';
	
	// By default, select the browser (DOM) platform.
	// @TODO Make possible to select another platform at build time.
	var implementation = require(41);
	
	module.exports = function(Chart) {
		/**
		 * @namespace Chart.platform
		 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
		 * @since 2.4.0
		 */
		Chart.platform = {
			/**
			 * Called at chart construction time, returns a context2d instance implementing
			 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
			 * @param {*} item - The native item from which to acquire context (platform specific)
			 * @param {Object} options - The chart options
			 * @returns {CanvasRenderingContext2D} context2d instance
			 */
			acquireContext: function() {},
	
			/**
			 * Called at chart destruction time, releases any resources associated to the context
			 * previously returned by the acquireContext() method.
			 * @param {CanvasRenderingContext2D} context - The context2d instance
			 * @returns {Boolean} true if the method succeeded, else false
			 */
			releaseContext: function() {},
	
			/**
			 * Registers the specified listener on the given chart.
			 * @param {Chart} chart - Chart from which to listen for event
			 * @param {String} type - The ({@link IEvent}) type to listen for
			 * @param {Function} listener - Receives a notification (an object that implements
			 * the {@link IEvent} interface) when an event of the specified type occurs.
			 */
			addEventListener: function() {},
	
			/**
			 * Removes the specified listener previously registered with addEventListener.
			 * @param {Chart} chart -Chart from which to remove the listener
			 * @param {String} type - The ({@link IEvent}) type to remove
			 * @param {Function} listener - The listener function to remove from the event target.
			 */
			removeEventListener: function() {}
		};
	
		/**
		 * @interface IPlatform
		 * Allows abstracting platform dependencies away from the chart
		 * @borrows Chart.platform.acquireContext as acquireContext
		 * @borrows Chart.platform.releaseContext as releaseContext
		 * @borrows Chart.platform.addEventListener as addEventListener
		 * @borrows Chart.platform.removeEventListener as removeEventListener
		 */
	
		/**
		 * @interface IEvent
		 * @prop {String} type - The event type name, possible values are:
		 * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',
		 * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'
		 * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')
		 * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)
		 * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)
		 */
	
		Chart.helpers.extend(Chart.platform, implementation(Chart));
	};
	
	},{"41":41}],43:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		// Default config for a category scale
		var defaultConfig = {
			position: 'bottom'
		};
	
		var DatasetScale = Chart.Scale.extend({
			/**
			* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
			* else fall back to data.labels
			* @private
			*/
			getLabels: function() {
				var data = this.chart.data;
				return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
			},
			// Implement this so that
			determineDataLimits: function() {
				var me = this;
				var labels = me.getLabels();
				me.minIndex = 0;
				me.maxIndex = labels.length - 1;
				var findIndex;
	
				if (me.options.ticks.min !== undefined) {
					// user specified min value
					findIndex = helpers.indexOf(labels, me.options.ticks.min);
					me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
				}
	
				if (me.options.ticks.max !== undefined) {
					// user specified max value
					findIndex = helpers.indexOf(labels, me.options.ticks.max);
					me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
				}
	
				me.min = labels[me.minIndex];
				me.max = labels[me.maxIndex];
			},
	
			buildTicks: function() {
				var me = this;
				var labels = me.getLabels();
				// If we are viewing some subset of labels, slice the original array
				me.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
			},
	
			getLabelForIndex: function(index, datasetIndex) {
				var me = this;
				var data = me.chart.data;
				var isHorizontal = me.isHorizontal();
	
				if (data.yLabels && !isHorizontal) {
					return me.getRightValue(data.datasets[datasetIndex].data[index]);
				}
				return me.ticks[index - me.minIndex];
			},
	
			// Used to get data value locations.  Value can either be an index or a numerical value
			getPixelForValue: function(value, index, datasetIndex, includeOffset) {
				var me = this;
				// 1 is added because we need the length but we have the indexes
				var offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
	
				if (value !== undefined && isNaN(index)) {
					var labels = me.getLabels();
					var idx = labels.indexOf(value);
					index = idx !== -1 ? idx : index;
				}
	
				if (me.isHorizontal()) {
					var valueWidth = me.width / offsetAmt;
					var widthOffset = (valueWidth * (index - me.minIndex));
	
					if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
						widthOffset += (valueWidth / 2);
					}
	
					return me.left + Math.round(widthOffset);
				}
				var valueHeight = me.height / offsetAmt;
				var heightOffset = (valueHeight * (index - me.minIndex));
	
				if (me.options.gridLines.offsetGridLines && includeOffset) {
					heightOffset += (valueHeight / 2);
				}
	
				return me.top + Math.round(heightOffset);
			},
			getPixelForTick: function(index, includeOffset) {
				return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var value;
				var offsetAmt = Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
				var horz = me.isHorizontal();
				var valueDimension = (horz ? me.width : me.height) / offsetAmt;
	
				pixel -= horz ? me.left : me.top;
	
				if (me.options.gridLines.offsetGridLines) {
					pixel -= (valueDimension / 2);
				}
	
				if (pixel <= 0) {
					value = 0;
				} else {
					value = Math.round(pixel / valueDimension);
				}
	
				return value;
			},
			getBasePixel: function() {
				return this.bottom;
			}
		});
	
		Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
	
	};
	
	},{}],44:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		var defaultConfig = {
			position: 'left',
			ticks: {
				callback: Chart.Ticks.formatters.linear
			}
		};
	
		var LinearScale = Chart.LinearScaleBase.extend({
			determineDataLimits: function() {
				var me = this;
				var opts = me.options;
				var chart = me.chart;
				var data = chart.data;
				var datasets = data.datasets;
				var isHorizontal = me.isHorizontal();
	
				function IDMatches(meta) {
					return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
				}
	
				// First Calculate the range
				me.min = null;
				me.max = null;
	
				var hasStacks = opts.stacked;
				if (hasStacks === undefined) {
					helpers.each(datasets, function(dataset, datasetIndex) {
						if (hasStacks) {
							return;
						}
	
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
							meta.stack !== undefined) {
							hasStacks = true;
						}
					});
				}
	
				if (opts.stacked || hasStacks) {
					var valuesPerStack = {};
	
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						var key = [
							meta.type,
							// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
							((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
							meta.stack
						].join('.');
	
						if (valuesPerStack[key] === undefined) {
							valuesPerStack[key] = {
								positiveValues: [],
								negativeValues: []
							};
						}
	
						// Store these per type
						var positiveValues = valuesPerStack[key].positiveValues;
						var negativeValues = valuesPerStack[key].negativeValues;
	
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								positiveValues[index] = positiveValues[index] || 0;
								negativeValues[index] = negativeValues[index] || 0;
	
								if (opts.relativePoints) {
									positiveValues[index] = 100;
								} else if (value < 0) {
									negativeValues[index] += value;
								} else {
									positiveValues[index] += value;
								}
							});
						}
					});
	
					helpers.each(valuesPerStack, function(valuesForType) {
						var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
						var minVal = helpers.min(values);
						var maxVal = helpers.max(values);
						me.min = me.min === null ? minVal : Math.min(me.min, minVal);
						me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
					});
	
				} else {
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								if (me.min === null) {
									me.min = value;
								} else if (value < me.min) {
									me.min = value;
								}
	
								if (me.max === null) {
									me.max = value;
								} else if (value > me.max) {
									me.max = value;
								}
							});
						}
					});
				}
	
				// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
				this.handleTickRangeOptions();
			},
			getTickLimit: function() {
				var maxTicks;
				var me = this;
				var tickOpts = me.options.ticks;
	
				if (me.isHorizontal()) {
					maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
				} else {
					// The factor of 2 used to scale the font size has been experimentally determined.
					var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
					maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
				}
	
				return maxTicks;
			},
			// Called after the ticks are built. We need
			handleDirectionalChanges: function() {
				if (!this.isHorizontal()) {
					// We are in a vertical orientation. The top value is the highest. So reverse the array
					this.ticks.reverse();
				}
			},
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			// Utils
			getPixelForValue: function(value) {
				// This must be called after fit has been run so that
				// this.left, this.top, this.right, and this.bottom have been defined
				var me = this;
				var start = me.start;
	
				var rightValue = +me.getRightValue(value);
				var pixel;
				var range = me.end - start;
	
				if (me.isHorizontal()) {
					pixel = me.left + (me.width / range * (rightValue - start));
					return Math.round(pixel);
				}
	
				pixel = me.bottom - (me.height / range * (rightValue - start));
				return Math.round(pixel);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var isHorizontal = me.isHorizontal();
				var innerDimension = isHorizontal ? me.width : me.height;
				var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
				return me.start + ((me.end - me.start) * offset);
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.ticksAsNumbers[index]);
			}
		});
		Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
	
	};
	
	},{}],45:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers,
			noop = helpers.noop;
	
		Chart.LinearScaleBase = Chart.Scale.extend({
			handleTickRangeOptions: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
				// do nothing since that would make the chart weird. If the user really wants a weird chart
				// axis, they can manually override it
				if (tickOpts.beginAtZero) {
					var minSign = helpers.sign(me.min);
					var maxSign = helpers.sign(me.max);
	
					if (minSign < 0 && maxSign < 0) {
						// move the top up to 0
						me.max = 0;
					} else if (minSign > 0 && maxSign > 0) {
						// move the bottom down to 0
						me.min = 0;
					}
				}
	
				if (tickOpts.min !== undefined) {
					me.min = tickOpts.min;
				} else if (tickOpts.suggestedMin !== undefined) {
					me.min = Math.min(me.min, tickOpts.suggestedMin);
				}
	
				if (tickOpts.max !== undefined) {
					me.max = tickOpts.max;
				} else if (tickOpts.suggestedMax !== undefined) {
					me.max = Math.max(me.max, tickOpts.suggestedMax);
				}
	
				if (me.min === me.max) {
					me.max++;
	
					if (!tickOpts.beginAtZero) {
						me.min--;
					}
				}
			},
			getTickLimit: noop,
			handleDirectionalChanges: noop,
	
			buildTicks: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				// Figure out what the max number of ticks we can support it is based on the size of
				// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
				// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
				// the graph. Make sure we always have at least 2 ticks
				var maxTicks = me.getTickLimit();
				maxTicks = Math.max(2, maxTicks);
	
				var numericGeneratorOptions = {
					maxTicks: maxTicks,
					min: tickOpts.min,
					max: tickOpts.max,
					stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
				};
				var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
	
				me.handleDirectionalChanges();
	
				// At this point, we need to update our max and min given the tick values since we have expanded the
				// range of the scale
				me.max = helpers.max(ticks);
				me.min = helpers.min(ticks);
	
				if (tickOpts.reverse) {
					ticks.reverse();
	
					me.start = me.max;
					me.end = me.min;
				} else {
					me.start = me.min;
					me.end = me.max;
				}
			},
			convertTicksToLabels: function() {
				var me = this;
				me.ticksAsNumbers = me.ticks.slice();
				me.zeroLineIndex = me.ticks.indexOf(0);
	
				Chart.Scale.prototype.convertTicksToLabels.call(me);
			}
		});
	};
	
	},{}],46:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
	
		var defaultConfig = {
			position: 'left',
	
			// label settings
			ticks: {
				callback: Chart.Ticks.formatters.logarithmic
			}
		};
	
		var LogarithmicScale = Chart.Scale.extend({
			determineDataLimits: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
				var chart = me.chart;
				var data = chart.data;
				var datasets = data.datasets;
				var getValueOrDefault = helpers.getValueOrDefault;
				var isHorizontal = me.isHorizontal();
				function IDMatches(meta) {
					return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
				}
	
				// Calculate Range
				me.min = null;
				me.max = null;
				me.minNotZero = null;
	
				var hasStacks = opts.stacked;
				if (hasStacks === undefined) {
					helpers.each(datasets, function(dataset, datasetIndex) {
						if (hasStacks) {
							return;
						}
	
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
							meta.stack !== undefined) {
							hasStacks = true;
						}
					});
				}
	
				if (opts.stacked || hasStacks) {
					var valuesPerStack = {};
	
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						var key = [
							meta.type,
							// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
							((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
							meta.stack
						].join('.');
	
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							if (valuesPerStack[key] === undefined) {
								valuesPerStack[key] = [];
							}
	
							helpers.each(dataset.data, function(rawValue, index) {
								var values = valuesPerStack[key];
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								values[index] = values[index] || 0;
	
								if (opts.relativePoints) {
									values[index] = 100;
								} else {
									// Don't need to split positive and negative since the log scale can't handle a 0 crossing
									values[index] += value;
								}
							});
						}
					});
	
					helpers.each(valuesPerStack, function(valuesForType) {
						var minVal = helpers.min(valuesForType);
						var maxVal = helpers.max(valuesForType);
						me.min = me.min === null ? minVal : Math.min(me.min, minVal);
						me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
					});
	
				} else {
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}
	
								if (me.min === null) {
									me.min = value;
								} else if (value < me.min) {
									me.min = value;
								}
	
								if (me.max === null) {
									me.max = value;
								} else if (value > me.max) {
									me.max = value;
								}
	
								if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
									me.minNotZero = value;
								}
							});
						}
					});
				}
	
				me.min = getValueOrDefault(tickOpts.min, me.min);
				me.max = getValueOrDefault(tickOpts.max, me.max);
	
				if (me.min === me.max) {
					if (me.min !== 0 && me.min !== null) {
						me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
						me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
					} else {
						me.min = 1;
						me.max = 10;
					}
				}
			},
			buildTicks: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				var generationOptions = {
					min: tickOpts.min,
					max: tickOpts.max
				};
				var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);
	
				if (!me.isHorizontal()) {
					// We are in a vertical orientation. The top value is the highest. So reverse the array
					ticks.reverse();
				}
	
				// At this point, we need to update our max and min given the tick values since we have expanded the
				// range of the scale
				me.max = helpers.max(ticks);
				me.min = helpers.min(ticks);
	
				if (tickOpts.reverse) {
					ticks.reverse();
	
					me.start = me.max;
					me.end = me.min;
				} else {
					me.start = me.min;
					me.end = me.max;
				}
			},
			convertTicksToLabels: function() {
				this.tickValues = this.ticks.slice();
	
				Chart.Scale.prototype.convertTicksToLabels.call(this);
			},
			// Get the correct tooltip label
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.tickValues[index]);
			},
			getPixelForValue: function(value) {
				var me = this;
				var innerDimension;
				var pixel;
	
				var start = me.start;
				var newVal = +me.getRightValue(value);
				var range;
				var opts = me.options;
				var tickOpts = opts.ticks;
	
				if (me.isHorizontal()) {
					range = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0
					if (newVal === 0) {
						pixel = me.left;
					} else {
						innerDimension = me.width;
						pixel = me.left + (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
					}
				} else {
					// Bottom - top since pixels increase downward on a screen
					innerDimension = me.height;
					if (start === 0 && !tickOpts.reverse) {
						range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
						if (newVal === start) {
							pixel = me.bottom;
						} else if (newVal === me.minNotZero) {
							pixel = me.bottom - innerDimension * 0.02;
						} else {
							pixel = me.bottom - innerDimension * 0.02 - (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));
						}
					} else if (me.end === 0 && tickOpts.reverse) {
						range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
						if (newVal === me.end) {
							pixel = me.top;
						} else if (newVal === me.minNotZero) {
							pixel = me.top + innerDimension * 0.02;
						} else {
							pixel = me.top + innerDimension * 0.02 + (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));
						}
					} else {
						range = helpers.log10(me.end) - helpers.log10(start);
						innerDimension = me.height;
						pixel = me.bottom - (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
					}
				}
				return pixel;
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var range = helpers.log10(me.end) - helpers.log10(me.start);
				var value, innerDimension;
	
				if (me.isHorizontal()) {
					innerDimension = me.width;
					value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
				} else {  // todo: if start === 0
					innerDimension = me.height;
					value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
				}
				return value;
			}
		});
		Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
	
	};
	
	},{}],47:[function(require,module,exports){
	'use strict';
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var globalDefaults = Chart.defaults.global;
	
		var defaultConfig = {
			display: true,
	
			// Boolean - Whether to animate scaling the chart from the centre
			animate: true,
			lineArc: false,
			position: 'chartArea',
	
			angleLines: {
				display: true,
				color: 'rgba(0, 0, 0, 0.1)',
				lineWidth: 1
			},
	
			// label settings
			ticks: {
				// Boolean - Show a backdrop to the scale label
				showLabelBackdrop: true,
	
				// String - The colour of the label backdrop
				backdropColor: 'rgba(255,255,255,0.75)',
	
				// Number - The backdrop padding above & below the label in pixels
				backdropPaddingY: 2,
	
				// Number - The backdrop padding to the side of the label in pixels
				backdropPaddingX: 2,
	
				callback: Chart.Ticks.formatters.linear
			},
	
			pointLabels: {
				// Number - Point label font size in pixels
				fontSize: 10,
	
				// Function - Used to convert point labels
				callback: function(label) {
					return label;
				}
			}
		};
	
		function getValueCount(scale) {
			return !scale.options.lineArc ? scale.chart.data.labels.length : 0;
		}
	
		function getPointLabelFontOptions(scale) {
			var pointLabelOptions = scale.options.pointLabels;
			var fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
			var fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
			var fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
			var font = helpers.fontString(fontSize, fontStyle, fontFamily);
	
			return {
				size: fontSize,
				style: fontStyle,
				family: fontFamily,
				font: font
			};
		}
	
		function measureLabelSize(ctx, fontSize, label) {
			if (helpers.isArray(label)) {
				return {
					w: helpers.longestText(ctx, ctx.font, label),
					h: (label.length * fontSize) + ((label.length - 1) * 1.5 * fontSize)
				};
			}
	
			return {
				w: ctx.measureText(label).width,
				h: fontSize
			};
		}
	
		function determineLimits(angle, pos, size, min, max) {
			if (angle === min || angle === max) {
				return {
					start: pos - (size / 2),
					end: pos + (size / 2)
				};
			} else if (angle < min || angle > max) {
				return {
					start: pos - size - 5,
					end: pos
				};
			}
	
			return {
				start: pos,
				end: pos + size + 5
			};
		}
	
		/**
		 * Helper function to fit a radial linear scale with point labels
		 */
		function fitWithPointLabels(scale) {
			/*
			 * Right, this is really confusing and there is a lot of maths going on here
			 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
			 *
			 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
			 *
			 * Solution:
			 *
			 * We assume the radius of the polygon is half the size of the canvas at first
			 * at each index we check if the text overlaps.
			 *
			 * Where it does, we store that angle and that index.
			 *
			 * After finding the largest index and angle we calculate how much we need to remove
			 * from the shape radius to move the point inwards by that x.
			 *
			 * We average the left and right distances to get the maximum shape radius that can fit in the box
			 * along with labels.
			 *
			 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
			 * on each side, removing that from the size, halving it and adding the left x protrusion width.
			 *
			 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
			 * and position it in the most space efficient manner
			 *
			 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
			 */
	
			var plFont = getPointLabelFontOptions(scale);
	
			// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
			// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
			var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
			var furthestLimits = {
				l: scale.width,
				r: 0,
				t: scale.height,
				b: 0
			};
			var furthestAngles = {};
			var i;
			var textSize;
			var pointPosition;
	
			scale.ctx.font = plFont.font;
			scale._pointLabelSizes = [];
	
			var valueCount = getValueCount(scale);
			for (i = 0; i < valueCount; i++) {
				pointPosition = scale.getPointPosition(i, largestPossibleRadius);
				textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
				scale._pointLabelSizes[i] = textSize;
	
				// Add quarter circle to make degree 0 mean top of circle
				var angleRadians = scale.getIndexAngle(i);
				var angle = helpers.toDegrees(angleRadians) % 360;
				var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
				var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
	
				if (hLimits.start < furthestLimits.l) {
					furthestLimits.l = hLimits.start;
					furthestAngles.l = angleRadians;
				}
	
				if (hLimits.end > furthestLimits.r) {
					furthestLimits.r = hLimits.end;
					furthestAngles.r = angleRadians;
				}
	
				if (vLimits.start < furthestLimits.t) {
					furthestLimits.t = vLimits.start;
					furthestAngles.t = angleRadians;
				}
	
				if (vLimits.end > furthestLimits.b) {
					furthestLimits.b = vLimits.end;
					furthestAngles.b = angleRadians;
				}
			}
	
			scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
		}
	
		/**
		 * Helper function to fit a radial linear scale with no point labels
		 */
		function fit(scale) {
			var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
			scale.drawingArea = Math.round(largestPossibleRadius);
			scale.setCenterPoint(0, 0, 0, 0);
		}
	
		function getTextAlignForAngle(angle) {
			if (angle === 0 || angle === 180) {
				return 'center';
			} else if (angle < 180) {
				return 'left';
			}
	
			return 'right';
		}
	
		function fillText(ctx, text, position, fontSize) {
			if (helpers.isArray(text)) {
				var y = position.y;
				var spacing = 1.5 * fontSize;
	
				for (var i = 0; i < text.length; ++i) {
					ctx.fillText(text[i], position.x, y);
					y+= spacing;
				}
			} else {
				ctx.fillText(text, position.x, position.y);
			}
		}
	
		function adjustPointPositionForLabelHeight(angle, textSize, position) {
			if (angle === 90 || angle === 270) {
				position.y -= (textSize.h / 2);
			} else if (angle > 270 || angle < 90) {
				position.y -= textSize.h;
			}
		}
	
		function drawPointLabels(scale) {
			var ctx = scale.ctx;
			var getValueOrDefault = helpers.getValueOrDefault;
			var opts = scale.options;
			var angleLineOpts = opts.angleLines;
			var pointLabelOpts = opts.pointLabels;
	
			ctx.lineWidth = angleLineOpts.lineWidth;
			ctx.strokeStyle = angleLineOpts.color;
	
			var outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);
	
			// Point Label Font
			var plFont = getPointLabelFontOptions(scale);
	
			ctx.textBaseline = 'top';
	
			for (var i = getValueCount(scale) - 1; i >= 0; i--) {
				if (angleLineOpts.display) {
					var outerPosition = scale.getPointPosition(i, outerDistance);
					ctx.beginPath();
					ctx.moveTo(scale.xCenter, scale.yCenter);
					ctx.lineTo(outerPosition.x, outerPosition.y);
					ctx.stroke();
					ctx.closePath();
				}
				// Extra 3px out for some label spacing
				var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
	
				// Keep this in loop since we may support array properties here
				var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
				ctx.font = plFont.font;
				ctx.fillStyle = pointLabelFontColor;
	
				var angleRadians = scale.getIndexAngle(i);
				var angle = helpers.toDegrees(angleRadians);
				ctx.textAlign = getTextAlignForAngle(angle);
				adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
				fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
			}
		}
	
		function drawRadiusLine(scale, gridLineOpts, radius, index) {
			var ctx = scale.ctx;
			ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
			ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
	
			if (scale.options.lineArc) {
				// Draw circular arcs between the points
				ctx.beginPath();
				ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
				ctx.closePath();
				ctx.stroke();
			} else {
				// Draw straight lines connecting each index
				var valueCount = getValueCount(scale);
	
				if (valueCount === 0) {
					return;
				}
	
				ctx.beginPath();
				var pointPosition = scale.getPointPosition(0, radius);
				ctx.moveTo(pointPosition.x, pointPosition.y);
	
				for (var i = 1; i < valueCount; i++) {
					pointPosition = scale.getPointPosition(i, radius);
					ctx.lineTo(pointPosition.x, pointPosition.y);
				}
	
				ctx.closePath();
				ctx.stroke();
			}
		}
	
		function numberOrZero(param) {
			return helpers.isNumber(param) ? param : 0;
		}
	
		var LinearRadialScale = Chart.LinearScaleBase.extend({
			setDimensions: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
				// Set the unconstrained dimension before label rotation
				me.width = me.maxWidth;
				me.height = me.maxHeight;
				me.xCenter = Math.round(me.width / 2);
				me.yCenter = Math.round(me.height / 2);
	
				var minSize = helpers.min([me.height, me.width]);
				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				me.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);
			},
			determineDataLimits: function() {
				var me = this;
				var chart = me.chart;
				var min = Number.POSITIVE_INFINITY;
				var max = Number.NEGATIVE_INFINITY;
	
				helpers.each(chart.data.datasets, function(dataset, datasetIndex) {
					if (chart.isDatasetVisible(datasetIndex)) {
						var meta = chart.getDatasetMeta(datasetIndex);
	
						helpers.each(dataset.data, function(rawValue, index) {
							var value = +me.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}
	
							min = Math.min(value, min);
							max = Math.max(value, max);
						});
					}
				});
	
				me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
				me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);
	
				// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
				me.handleTickRangeOptions();
			},
			getTickLimit: function() {
				var tickOpts = this.options.ticks;
				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
			},
			convertTicksToLabels: function() {
				var me = this;
				Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
	
				// Point labels
				me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
			},
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			fit: function() {
				if (this.options.lineArc) {
					fit(this);
				} else {
					fitWithPointLabels(this);
				}
			},
			/**
			 * Set radius reductions and determine new radius and center point
			 * @private
			 */
			setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
				var me = this;
				var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
				var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
				var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
				var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
	
				radiusReductionLeft = numberOrZero(radiusReductionLeft);
				radiusReductionRight = numberOrZero(radiusReductionRight);
				radiusReductionTop = numberOrZero(radiusReductionTop);
				radiusReductionBottom = numberOrZero(radiusReductionBottom);
	
				me.drawingArea = Math.min(
					Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
					Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
				me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
			},
			setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
				var me = this;
				var maxRight = me.width - rightMovement - me.drawingArea,
					maxLeft = leftMovement + me.drawingArea,
					maxTop = topMovement + me.drawingArea,
					maxBottom = me.height - bottomMovement - me.drawingArea;
	
				me.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);
				me.yCenter = Math.round(((maxTop + maxBottom) / 2) + me.top);
			},
	
			getIndexAngle: function(index) {
				var angleMultiplier = (Math.PI * 2) / getValueCount(this);
				var startAngle = this.chart.options && this.chart.options.startAngle ?
					this.chart.options.startAngle :
					0;
	
				var startAngleRadians = startAngle * Math.PI * 2 / 360;
	
				// Start from the top instead of right, so remove a quarter of the circle
				return index * angleMultiplier + startAngleRadians;
			},
			getDistanceFromCenterForValue: function(value) {
				var me = this;
	
				if (value === null) {
					return 0; // null always in center
				}
	
				// Take into account half font size + the yPadding of the top value
				var scalingFactor = me.drawingArea / (me.max - me.min);
				if (me.options.reverse) {
					return (me.max - value) * scalingFactor;
				}
				return (value - me.min) * scalingFactor;
			},
			getPointPosition: function(index, distanceFromCenter) {
				var me = this;
				var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
				return {
					x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
					y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
				};
			},
			getPointPositionForValue: function(index, value) {
				return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
			},
	
			getBasePosition: function() {
				var me = this;
				var min = me.min;
				var max = me.max;
	
				return me.getPointPositionForValue(0,
					me.beginAtZero? 0:
					min < 0 && max < 0? max :
					min > 0 && max > 0? min :
					0);
			},
	
			draw: function() {
				var me = this;
				var opts = me.options;
				var gridLineOpts = opts.gridLines;
				var tickOpts = opts.ticks;
				var getValueOrDefault = helpers.getValueOrDefault;
	
				if (opts.display) {
					var ctx = me.ctx;
	
					// Tick Font
					var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
					var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
					var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
					var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
	
					helpers.each(me.ticks, function(label, index) {
						// Don't draw a centre value (if it is minimum)
						if (index > 0 || opts.reverse) {
							var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
							var yHeight = me.yCenter - yCenterOffset;
	
							// Draw circular lines around the scale
							if (gridLineOpts.display && index !== 0) {
								drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
							}
	
							if (tickOpts.display) {
								var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
								ctx.font = tickLabelFont;
	
								if (tickOpts.showLabelBackdrop) {
									var labelWidth = ctx.measureText(label).width;
									ctx.fillStyle = tickOpts.backdropColor;
									ctx.fillRect(
										me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX,
										yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY,
										labelWidth + tickOpts.backdropPaddingX * 2,
										tickFontSize + tickOpts.backdropPaddingY * 2
									);
								}
	
								ctx.textAlign = 'center';
								ctx.textBaseline = 'middle';
								ctx.fillStyle = tickFontColor;
								ctx.fillText(label, me.xCenter, yHeight);
							}
						}
					});
	
					if (!opts.lineArc) {
						drawPointLabels(me);
					}
				}
			}
		});
		Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
	
	};
	
	},{}],48:[function(require,module,exports){
	/* global window: false */
	'use strict';
	
	var moment = require(6);
	moment = typeof(moment) === 'function' ? moment : window.moment;
	
	module.exports = function(Chart) {
	
		var helpers = Chart.helpers;
		var time = {
			units: [{
				name: 'millisecond',
				steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
			}, {
				name: 'second',
				steps: [1, 2, 5, 10, 30]
			}, {
				name: 'minute',
				steps: [1, 2, 5, 10, 30]
			}, {
				name: 'hour',
				steps: [1, 2, 3, 6, 12]
			}, {
				name: 'day',
				steps: [1, 2, 5]
			}, {
				name: 'week',
				maxStep: 4
			}, {
				name: 'month',
				maxStep: 3
			}, {
				name: 'quarter',
				maxStep: 4
			}, {
				name: 'year',
				maxStep: false
			}]
		};
	
		var defaultConfig = {
			position: 'bottom',
	
			time: {
				parser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
				format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
				unit: false, // false == automatic or override with week, month, year, etc.
				round: false, // none, or override with week, month, year, etc.
				displayFormat: false, // DEPRECATED
				isoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
				minUnit: 'millisecond',
	
				// defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
				displayFormats: {
					millisecond: 'h:mm:ss.SSS a', // 11:20:01.123 AM,
					second: 'h:mm:ss a', // 11:20:01 AM
					minute: 'h:mm:ss a', // 11:20:01 AM
					hour: 'MMM D, hA', // Sept 4, 5PM
					day: 'll', // Sep 4 2015
					week: 'll', // Week 46, or maybe "[W]WW - YYYY" ?
					month: 'MMM YYYY', // Sept 2015
					quarter: '[Q]Q - YYYY', // Q3
					year: 'YYYY' // 2015
				}
			},
			ticks: {
				autoSkip: false
			}
		};
	
		var TimeScale = Chart.Scale.extend({
			initialize: function() {
				if (!moment) {
					throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
				}
	
				Chart.Scale.prototype.initialize.call(this);
			},
			getLabelMoment: function(datasetIndex, index) {
				if (datasetIndex === null || index === null) {
					return null;
				}
	
				if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
					return this.labelMoments[datasetIndex][index];
				}
	
				return null;
			},
			getLabelDiff: function(datasetIndex, index) {
				var me = this;
				if (datasetIndex === null || index === null) {
					return null;
				}
	
				if (me.labelDiffs === undefined) {
					me.buildLabelDiffs();
				}
	
				if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
					return me.labelDiffs[datasetIndex][index];
				}
	
				return null;
			},
			getMomentStartOf: function(tick) {
				var me = this;
				if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
					return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
				}
				return tick.clone().startOf(me.tickUnit);
			},
			determineDataLimits: function() {
				var me = this;
				me.labelMoments = [];
	
				// Only parse these once. If the dataset does not have data as x,y pairs, we will use
				// these
				var scaleLabelMoments = [];
				if (me.chart.data.labels && me.chart.data.labels.length > 0) {
					helpers.each(me.chart.data.labels, function(label) {
						var labelMoment = me.parseTime(label);
	
						if (labelMoment.isValid()) {
							if (me.options.time.round) {
								labelMoment.startOf(me.options.time.round);
							}
							scaleLabelMoments.push(labelMoment);
						}
					}, me);
	
					me.firstTick = moment.min.call(me, scaleLabelMoments);
					me.lastTick = moment.max.call(me, scaleLabelMoments);
				} else {
					me.firstTick = null;
					me.lastTick = null;
				}
	
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var momentsForDataset = [];
					var datasetVisible = me.chart.isDatasetVisible(datasetIndex);
	
					if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
						helpers.each(dataset.data, function(value) {
							var labelMoment = me.parseTime(me.getRightValue(value));
	
							if (labelMoment.isValid()) {
								if (me.options.time.round) {
									labelMoment.startOf(me.options.time.round);
								}
								momentsForDataset.push(labelMoment);
	
								if (datasetVisible) {
									// May have gone outside the scale ranges, make sure we keep the first and last ticks updated
									me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
									me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
								}
							}
						}, me);
					} else {
						// We have no labels. Use the ones from the scale
						momentsForDataset = scaleLabelMoments;
					}
	
					me.labelMoments.push(momentsForDataset);
				}, me);
	
				// Set these after we've done all the data
				if (me.options.time.min) {
					me.firstTick = me.parseTime(me.options.time.min);
				}
	
				if (me.options.time.max) {
					me.lastTick = me.parseTime(me.options.time.max);
				}
	
				// We will modify these, so clone for later
				me.firstTick = (me.firstTick || moment()).clone();
				me.lastTick = (me.lastTick || moment()).clone();
			},
			buildLabelDiffs: function() {
				var me = this;
				me.labelDiffs = [];
				var scaleLabelDiffs = [];
				// Parse common labels once
				if (me.chart.data.labels && me.chart.data.labels.length > 0) {
					helpers.each(me.chart.data.labels, function(label) {
						var labelMoment = me.parseTime(label);
	
						if (labelMoment.isValid()) {
							if (me.options.time.round) {
								labelMoment.startOf(me.options.time.round);
							}
							scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
						}
					}, me);
				}
	
				helpers.each(me.chart.data.datasets, function(dataset) {
					var diffsForDataset = [];
	
					if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
						helpers.each(dataset.data, function(value) {
							var labelMoment = me.parseTime(me.getRightValue(value));
	
							if (labelMoment.isValid()) {
								if (me.options.time.round) {
									labelMoment.startOf(me.options.time.round);
								}
								diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
							}
						}, me);
					} else {
						// We have no labels. Use common ones
						diffsForDataset = scaleLabelDiffs;
					}
	
					me.labelDiffs.push(diffsForDataset);
				}, me);
			},
			buildTicks: function() {
				var me = this;
	
				me.ctx.save();
				var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
				me.ctx.font = tickLabelFont;
	
				me.ticks = [];
				me.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step
				me.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)
	
				// Set unit override if applicable
				if (me.options.time.unit) {
					me.tickUnit = me.options.time.unit || 'day';
					me.displayFormat = me.options.time.displayFormats[me.tickUnit];
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
				} else {
					// Determine the smallest needed unit of the time
					var innerWidth = me.isHorizontal() ? me.width : me.height;
	
					// Crude approximation of what the label length might be
					var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
					var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
					var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
					var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
					tickLabelWidth = (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
					var labelCapacity = innerWidth / (tickLabelWidth);
	
					// Start as small as possible
					me.tickUnit = me.options.time.minUnit;
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					me.displayFormat = me.options.time.displayFormats[me.tickUnit];
	
					var unitDefinitionIndex = 0;
					var unitDefinition = time.units[unitDefinitionIndex];
	
					// While we aren't ideal and we don't have units left
					while (unitDefinitionIndex < time.units.length) {
						// Can we scale this unit. If `false` we can scale infinitely
						me.unitScale = 1;
	
						if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
							// Use one of the predefined steps
							for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
								if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
									me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
									break;
								}
							}
	
							break;
						} else if ((unitDefinition.maxStep === false) || (Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep)) {
							// We have a max step. Scale this unit
							me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
							break;
						} else {
							// Move to the next unit up
							++unitDefinitionIndex;
							unitDefinition = time.units[unitDefinitionIndex];
	
							me.tickUnit = unitDefinition.name;
							var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
							var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
							me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
							me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
						}
					}
				}
	
				var roundedStart;
	
				// Only round the first tick if we have no hard minimum
				if (!me.options.time.min) {
					me.firstTick = me.getMomentStartOf(me.firstTick);
					roundedStart = me.firstTick;
				} else {
					roundedStart = me.getMomentStartOf(me.firstTick);
				}
	
				// Only round the last tick if we have no hard maximum
				if (!me.options.time.max) {
					var roundedEnd = me.getMomentStartOf(me.lastTick);
					var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
					if (delta < 0) {
						// Do not use end of because we need me to be in the next time unit
						me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
					} else if (delta >= 0) {
						me.lastTick = roundedEnd;
					}
	
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
				}
	
				// Tick displayFormat override
				if (me.options.time.displayFormat) {
					me.displayFormat = me.options.time.displayFormat;
				}
	
				// first tick. will have been rounded correctly if options.time.min is not specified
				me.ticks.push(me.firstTick.clone());
	
				// For every unit in between the first and last moment, create a moment and add it to the ticks tick
				for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
					var newTick = roundedStart.clone().add(i, me.tickUnit);
	
					// Are we greater than the max time
					if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
						break;
					}
	
					me.ticks.push(newTick);
				}
	
				// Always show the right tick
				var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
				if (diff !== 0 || me.scaleSizeInUnits === 0) {
					// this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart
					// but the last tick was not rounded.
					if (me.options.time.max) {
						me.ticks.push(me.lastTick.clone());
						me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
					} else {
						me.ticks.push(me.lastTick.clone());
						me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					}
				}
	
				me.ctx.restore();
	
				// Invalidate label diffs cache
				me.labelDiffs = undefined;
			},
			// Get tooltip label
			getLabelForIndex: function(index, datasetIndex) {
				var me = this;
				var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
				var value = me.chart.data.datasets[datasetIndex].data[index];
	
				if (value !== null && typeof value === 'object') {
					label = me.getRightValue(value);
				}
	
				// Format nicely
				if (me.options.time.tooltipFormat) {
					label = me.parseTime(label).format(me.options.time.tooltipFormat);
				}
	
				return label;
			},
			// Function to format an individual tick mark
			tickFormatFunction: function(tick, index, ticks) {
				var formattedTick = tick.format(this.displayFormat);
				var tickOpts = this.options.ticks;
				var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);
	
				if (callback) {
					return callback(formattedTick, index, ticks);
				}
				return formattedTick;
			},
			convertTicksToLabels: function() {
				var me = this;
				me.tickMoments = me.ticks;
				me.ticks = me.ticks.map(me.tickFormatFunction, me);
			},
			getPixelForValue: function(value, index, datasetIndex) {
				var me = this;
				var offset = null;
				if (index !== undefined && datasetIndex !== undefined) {
					offset = me.getLabelDiff(datasetIndex, index);
				}
	
				if (offset === null) {
					if (!value || !value.isValid) {
						// not already a moment object
						value = me.parseTime(me.getRightValue(value));
					}
					if (value && value.isValid && value.isValid()) {
						offset = value.diff(me.firstTick, me.tickUnit, true);
					}
				}
	
				if (offset !== null) {
					var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;
	
					if (me.isHorizontal()) {
						var valueOffset = (me.width * decimal);
						return me.left + Math.round(valueOffset);
					}
	
					var heightOffset = (me.height * decimal);
					return me.top + Math.round(heightOffset);
				}
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.tickMoments[index], null, null);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var innerDimension = me.isHorizontal() ? me.width : me.height;
				var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
				offset *= me.scaleSizeInUnits;
				return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
			},
			parseTime: function(label) {
				var me = this;
				if (typeof me.options.time.parser === 'string') {
					return moment(label, me.options.time.parser);
				}
				if (typeof me.options.time.parser === 'function') {
					return me.options.time.parser(label);
				}
				// Date objects
				if (typeof label.getMonth === 'function' || typeof label === 'number') {
					return moment(label);
				}
				// Moment support
				if (label.isValid && label.isValid()) {
					return label;
				}
				// Custom parsing (return an instance of moment)
				if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
					console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
					return me.options.time.format(label);
				}
				// Moment format parsing
				return moment(label, me.options.time.format);
			}
		});
		Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
	
	};
	
	},{"6":6}]},{},[7])(7)
	});

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var entcore_1 = __webpack_require__(2);
	var eval_teacher_mdl_1 = __webpack_require__(9);
	var utils = __webpack_require__(10);
	var moment = __webpack_require__(5);
	exports.evalAcuTeacherController = entcore_1.ng.controller('EvalAcuTeacherController', [
	    '$scope', 'route', 'model',
	    function ($scope, route, model) {
	        // Méthode d'initialisation ou de réinitialisation du Controler : notamment lors du changement d'établissement
	        $scope.initControler = function (isChangementEtablissement) {
	            $scope.evaluations = eval_teacher_mdl_1.evaluations;
	            $scope.search = {
	                matiere: '*',
	                periode: undefined,
	                classe: '*',
	                sousmatiere: '*',
	                type: '*',
	                idEleve: '*',
	                name: ''
	            };
	            $scope.chartOptions = {
	                classes: {},
	                options: {
	                    tooltips: {
	                        callbacks: {
	                            label: function (tooltipItems, data) {
	                                return tooltipItems.yLabel + "%";
	                            }
	                        }
	                    },
	                    scales: {
	                        yAxes: [{
	                                ticks: {
	                                    size: 0,
	                                    max: 100,
	                                    min: 0,
	                                    stepSize: 20,
	                                },
	                            }],
	                        xAxes: [{
	                                display: false,
	                            }]
	                    }
	                },
	                colors: ['#4bafd5', '#46bfaf', '#ecbe30', '#FF8500', '#e13a3a', '#b930a2', '#763294', '#1a22a2']
	            };
	            $scope.showAutocomplete = false;
	            $scope.devoirsNotDone = [];
	            $scope.devoirsClasses = [];
	            $scope.periodes = eval_teacher_mdl_1.evaluations.periodes;
	            // Récupération des structures
	            $scope.structures = eval_teacher_mdl_1.evaluations.structures;
	            $scope.getDefaultPeriode = function () {
	                return utils.getDefaultPeriode($scope.periodes.all);
	            };
	            /**
	             * Retourne la période courante
	             * @returns {Promise<T>} Promesse retournant l'identifiant de la période courante
	             */
	            var setCurrentPeriode = function () {
	                return new Promise(function (resolve, reject) {
	                    var formatStr = "DD/MM/YYYY";
	                    var momentCurrDate = moment(moment().format(formatStr), formatStr);
	                    $scope.currentPeriodeId = -1;
	                    for (var i = 0; i < eval_teacher_mdl_1.evaluations.periodes.all.length; i++) {
	                        var momentCurrPeriodeDebut = moment(moment(eval_teacher_mdl_1.evaluations.periodes.all[i].timestamp_dt).format(formatStr), formatStr);
	                        var momentCurrPeriodeFin = moment(moment(eval_teacher_mdl_1.evaluations.periodes.all[i].timestamp_fn).format(formatStr), formatStr);
	                        if (momentCurrPeriodeDebut.diff(momentCurrDate) <= 0 && momentCurrDate.diff(momentCurrPeriodeFin) <= 0) {
	                            $scope.currentPeriodeId = eval_teacher_mdl_1.evaluations.periodes.all[i].id;
	                            if (resolve && typeof (resolve) === 'function') {
	                                resolve(eval_teacher_mdl_1.evaluations.periodes.all[i]);
	                            }
	                        }
	                    }
	                    if (resolve && typeof (resolve) === 'function') {
	                        resolve($scope.currentPeriodeId);
	                    }
	                });
	            };
	            $scope.getDevoirsNotDone = function (idDevoirs) {
	                return new Promise(function (resolve, reject) {
	                    var calcPercent = function () {
	                        if (!idDevoirs) {
	                            idDevoirs = _.pluck(_.where($scope.devoirs.all, { is_evaluated: true }), 'id');
	                        }
	                        eval_teacher_mdl_1.evaluations.structure.devoirs.getPercentDone(idDevoirs).then(function () {
	                            resolve($scope.devoirs.filter(function (devoir) {
	                                return (devoir.percent < 100 && _.contains(idDevoirs, devoir.id));
	                            }));
	                        });
	                    };
	                    if (!eval_teacher_mdl_1.evaluations.structure.synchronized.devoirs) {
	                        eval_teacher_mdl_1.evaluations.structure.devoirs.one('sync', function () {
	                            calcPercent();
	                        });
	                    }
	                    else {
	                        calcPercent();
	                    }
	                });
	            };
	            $scope.initChartListNotDone = function () {
	                $scope.getDevoirsNotDone().then(function (devoirs) {
	                    $scope.devoirsNotDone = devoirs;
	                    $scope.devoirsClasses = _.filter($scope.classes.all, function (classe) {
	                        return (_.find($scope.devoirs.all, { 'id_groupe': classe.id, is_evaluated: true }));
	                    });
	                    $scope.chartOptions.selectedClasse = _.first(_.sortBy(_.filter($scope.classes.all, function (classe) {
	                        return _.contains(_.pluck($scope.devoirs.all, 'id_groupe'), classe.id);
	                    }), 'name')).id;
	                    $scope.loadChart($scope.chartOptions.selectedClasse);
	                });
	            };
	        };
	        // Initialisation du Controler
	        if (eval_teacher_mdl_1.evaluations.structure !== undefined) {
	            $scope.initControler(false);
	        }
	        else {
	            console.log("Aucun établissement actif pour l'utilisateur");
	        }
	        $scope.getDateFormated = function (date) {
	            return utils.getFormatedDate(date, "DD/MM/YYYY");
	        };
	        $scope.loadChart = function (idClasse) {
	            var idDevoirs = _.pluck($scope.devoirs.where({ id_groupe: idClasse }), 'id');
	            $scope.getDevoirsNotDone(idDevoirs).then(function (devoirs) {
	                if (devoirs) {
	                    $scope.chartOptions.classes[idClasse] = {
	                        names: _.pluck(devoirs, 'name'),
	                        percents: _.pluck(devoirs, 'percent'),
	                        id: _.pluck(devoirs, 'id')
	                    };
	                }
	                utils.safeApply($scope);
	            });
	        };
	        /**
	         * ouvrir le suivi d'un eleve (utilisé dans la barre de recherche)
	         * @param Eleve
	         */
	        $scope.openSuiviEleve = function (Eleve) {
	            var path = '/competences/eleve';
	            var idOfpath = { idEleve: Eleve.id, idClasse: Eleve.idClasse };
	            $scope.goTo(path, idOfpath);
	        };
	        $scope.changeEtablissementAccueil = function () {
	            var switchEtab = function () {
	                $scope.initControler();
	                $scope.$parent.initReferences();
	                $scope.periodes = eval_teacher_mdl_1.evaluations.structure.periodes;
	                $scope.search = $scope.$parent.initSearch();
	                $scope.search.periode = $scope.getDefaultPeriode();
	                $scope.devoirs = eval_teacher_mdl_1.evaluations.structure.devoirs;
	                $scope.initChartListNotDone();
	                utils.safeApply($scope);
	            };
	            if (!eval_teacher_mdl_1.evaluations.structure.isSynchronized) {
	                eval_teacher_mdl_1.evaluations.structure.sync().then(function () {
	                    switchEtab();
	                });
	            }
	            switchEtab();
	        };
	        /**
	         * ouvrir la page de création devoir
	         */
	        $scope.openCreateEval = function () {
	            var path = '/devoir/create';
	            $scope.goTo(path);
	        };
	        $scope.FilterGroupEmpty = function (item) {
	            var nameofclasse = $scope.getClasseData(item.id_groupe, 'name');
	            if (item.id_groupe !== '' && nameofclasse !== undefined && nameofclasse !== '') {
	                return item;
	            }
	        };
	        eval_teacher_mdl_1.evaluations.devoirs.on('sync', function () {
	            $scope.initChartListNotDone();
	        });
	        if (eval_teacher_mdl_1.evaluations.structure.isSynchronized) {
	            $scope.initChartListNotDone();
	        }
	        eval_teacher_mdl_1.evaluations.periodes.on('sync', function () {
	            $scope.search = $scope.$parent.initSearch();
	            $scope.search.periode = $scope.getDefaultPeriode();
	        });
	        //permet de basculer sur l' écran de saisie de note en cliquant sur le diagramme
	        $scope.SaisieNote = function (points, evt) {
	            if (points.length > 0 && points !== undefined) {
	                var path = '/devoir/' +
	                    $scope.chartOptions.classes[$scope.chartOptions.selectedClasse].id[points[0]._index];
	                $scope.goTo(path);
	            }
	        };
	    }
	]);
	


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by ledunoiss on 27/10/2016.
	 */
	"use strict";
	var entcore_1 = __webpack_require__(2);
	var eval_teacher_mdl_1 = __webpack_require__(9);
	var utils = __webpack_require__(10);
	exports.evalSuiviCompetenceEleveCtl = entcore_1.ng.controller('EvalSuiviCompetenceEleveCtl', [
	    '$scope', 'route', '$rootScope', '$location', '$filter', '$route', '$timeout',
	    function ($scope, route, $rootScope, $location, $filter, $route, $timeout) {
	        //rajout de la periode Annee
	        if ($scope.periodes === undefined) {
	            $scope.periodes.sync();
	            $scope.periodes.on('sync', function () {
	                $scope.periodesList = {
	                    "type": "select",
	                    "name": "Service",
	                    "value": $scope.periodeParDefault(),
	                    "values": []
	                };
	                _.map($scope.periodes.all, function (periode) {
	                    $scope.periodesList.values.push(periode);
	                });
	                $scope.periodesList.values.push({ libelle: $scope.translate('viescolaire.utils.annee'), id: undefined });
	                entcore_1.template.open('container', '../templates/layouts/2_10_layout');
	                entcore_1.template.open('left-side', '../templates/evaluations/enseignants/suivi_competences_eleve/left_side');
	                entcore_1.template.open('content', '../templates/evaluations/enseignants/suivi_competences_eleve/content');
	                entcore_1.template.open('suivi-competence-content', '../templates/evaluations/enseignants/suivi_competences_eleve/content_vue_suivi_eleve');
	            });
	        }
	        else {
	            $scope.periodesList = {
	                "type": "select",
	                "name": "Service",
	                "value": $scope.periodeParDefault(),
	                "values": []
	            };
	            _.map($scope.periodes.all, function (periode) {
	                $scope.periodesList.values.push(periode);
	            });
	            if ($scope.displayFromClass) {
	                $scope.periodesList.value = $scope.search.periode;
	            }
	            $scope.periodesList.values.push({ libelle: $scope.translate('viescolaire.utils.annee'), id: undefined });
	            entcore_1.template.open('container', '../templates/layouts/2_10_layout');
	            entcore_1.template.open('left-side', '../templates/evaluations/enseignants/suivi_competences_eleve/left_side');
	            entcore_1.template.open('content', '../templates/evaluations/enseignants/suivi_competences_eleve/content');
	            entcore_1.template.open('suivi-competence-content', '../templates/evaluations/enseignants/suivi_competences_eleve/content_vue_suivi_eleve');
	        }
	        $scope.route = $route;
	        $scope.opened.lightboxEvalLibre = false;
	        /**
	         * Initialise d'une évaluation libre.
	         */
	        $scope.initEvaluationLibre = function () {
	            var today = new Date();
	            var evaluationLibre = new eval_teacher_mdl_1.Devoir({
	                date_publication: today,
	                date: today,
	                diviseur: 20,
	                coefficient: 1,
	                id_etablissement: $scope.evaluations.structure.id,
	                ramener_sur: false,
	                id_etat: 1,
	                owner: entcore_1.model.me.userId,
	                is_evaluated: false,
	                id_classe: null,
	                id_periode: $scope.search.periode.id,
	                id_type: 1,
	                id_matiere: "",
	                id_sousmatiere: null,
	                competences: [],
	                controlledDate: false
	            });
	            $scope.EvaluationLibreCharge = {
	                matieres: [_.findWhere(eval_teacher_mdl_1.evaluations.matieres.all, { idEtablissement: $scope.evaluations.structure.id })],
	                sousmatiere: [],
	                periode: $scope.search.periode
	            };
	            var competenceEvaluee = new eval_teacher_mdl_1.CompetenceNote({
	                evaluation: -1,
	                id_competence: $scope.detailCompetence.id,
	                id_eleve: $scope.informations.eleve.id,
	                owner: entcore_1.model.me.userId
	            });
	            evaluationLibre.competences.all.push($scope.detailCompetence.id);
	            evaluationLibre.competenceEvaluee = competenceEvaluee;
	            return evaluationLibre;
	        };
	        $scope.$watch(function () {
	            if ($scope.evaluationLibre != undefined)
	                return $scope.evaluationLibre.id_matiere;
	        }, function (newValue) {
	            if (newValue !== "" && newValue !== undefined && newValue !== null) {
	                var mamatiere = _.findWhere($scope.EvaluationLibreCharge.matieres, { id: $scope.evaluationLibre.id_matiere });
	                if (mamatiere != undefined)
	                    $scope.EvaluationLibreCharge.sousmatiere = mamatiere.sousMatieres.all;
	            }
	            else if (newValue === null) {
	                $scope.EvaluationLibreCharge.sousmatiere = [];
	            }
	        });
	        /**
	         * Ouvre la fenêtre de création d'une évaluation libre
	         */
	        $scope.createEvaluationLibre = function () {
	            $scope.messages.successEvalLibre = false;
	            $scope.evaluationLibre = $scope.initEvaluationLibre();
	            $scope.controleDate();
	            $scope.opened.lightboxEvalLibre = true;
	            entcore_1.template.open('lightboxContainerEvalLibre', '../templates/evaluations/enseignants/creation_devoir/display_creation_eval_libre');
	        };
	        /**
	         * Evaluation de la compétence sur laquelle on est lors d'une évaluation libre
	         */
	        $scope.switchColor = function () {
	            // recupération de la compétence (il n'y en a qu'une)
	            var competenceEvaluee = $scope.evaluationLibre.competenceEvaluee;
	            if (competenceEvaluee.evaluation === -1) {
	                competenceEvaluee.evaluation = 3;
	            }
	            else {
	                competenceEvaluee.evaluation = competenceEvaluee.evaluation - 1;
	            }
	        };
	        /**
	         *  Sauvegarde d'une évaluation libre
	         */
	        $scope.saveNewEvaluationLibre = function () {
	            $scope.evaluationLibre.date = $scope.getDateFormated($scope.evaluationLibre.dateDevoir);
	            $scope.evaluationLibre.date_publication = $scope.getDateFormated($scope.evaluationLibre.datePublication);
	            $scope.evaluationLibre.id_periode = $scope.EvaluationLibreCharge.periode.id;
	            // fermeture popup
	            $scope.opened.lightboxEvalLibre = false;
	            // message de succes
	            $scope.messages.successEvalLibre = true;
	            $scope.evaluationLibre.create().then(function (res) {
	                // refresh du suivi élève
	                $scope.suiviCompetence = new eval_teacher_mdl_1.SuiviCompetence($scope.search.eleve, $scope.search.periode, $scope.search.classe, $scope.evaluations.structure);
	                $scope.suiviCompetence.sync().then(function () {
	                    $scope.suiviCompetence.domaines.sync().then(function () {
	                        $scope.suiviCompetence.setMoyenneCompetences($scope.suiviFilter.mine);
	                        $scope.detailCompetence = $scope.suiviCompetence.findCompetence($scope.detailCompetence.id);
	                        $scope.initChartsEval();
	                        utils.safeApply($scope);
	                    });
	                });
	                $scope.initSliderBFC();
	                utils.safeApply($scope);
	            });
	        };
	        /**
	         * Controle que la date de publication du devoir n'est pas inférieur à la date du devoir.
	         * Et que la date de creation est comprise dans la période
	         */
	        $scope.controleDate = function () {
	            var current_periode = $scope.periodes.findWhere({ id: $scope.EvaluationLibreCharge.periode.id });
	            var start_datePeriode = current_periode.timestamp_dt;
	            var end_datePeriode = current_periode.timestamp_fn;
	            var date_saisie = current_periode.date_fin_saisie;
	            if (moment(date_saisie).diff(moment($scope.evaluationLibre.dateDevoir), "days") >= 0) {
	                $scope.endSaisieFree = false;
	                utils.safeApply($scope);
	            }
	            else {
	                $scope.endSaisieFree = true;
	                utils.safeApply($scope);
	            }
	            $scope.evaluationLibre.controlledDate = (moment($scope.evaluationLibre.datePublication).diff(moment($scope.evaluationLibre.dateDevoir), "days") >= 0)
	                && (moment($scope.evaluationLibre.dateDevoir).diff(moment(start_datePeriode), "days") >= 0)
	                && (moment(end_datePeriode).diff(moment($scope.evaluationLibre.dateDevoir), "days") >= 0)
	                && (moment(date_saisie).diff(moment($scope.evaluationLibre.dateDevoir), "days") >= 0);
	        };
	        /**
	         * Controle la validité du formulaire de création d'une évaluation libre.
	         * @returns {boolean} Validité du formulaire
	         */
	        $scope.controleNewEvaluationLibreForm = function () {
	            return $scope.evaluationLibre == undefined || !($scope.evaluationLibre.controlledDate
	                && $scope.evaluationLibre.name !== undefined
	                && $scope.evaluationLibre.id_periode !== null && $scope.evaluationLibre.id_periode !== undefined
	                && $scope.evaluationLibre.competenceEvaluee.evaluation !== -1);
	        };
	        $scope.suiviFilter = {
	            mine: 'false'
	        };
	        $scope.opened.detailCompetenceSuivi = false;
	        $scope.refreshSlider = function () {
	            $timeout(function () {
	                $scope.$broadcast('rzSliderForceRender');
	            });
	        };
	        /**
	         * Supprime un BFC créé par un chef d'établissement
	         */
	        $scope.deleteBFC = function () {
	            var _this = this;
	            this.domaine.bfc.deleteBilanFinDeCycle().then(function (res) {
	                if (res.rows === 1) {
	                    _this.domaine.bfc = undefined;
	                    _this.domaine.slider.value = parseInt(Math.round(_this.domaine.moyenne));
	                }
	                utils.safeApply($scope);
	            });
	        };
	        /**
	         *
	         * Affiche le domaine suivant (de niveau 0) et ses
	         * sous domaines.
	         *
	         */
	        /* Methode plus utilisée
	         $scope.afficherDomaineSuivant = function () {
	         for (var i = 0; i < $scope.suiviCompetence.domaines.all.length; i++) {
	         var domaine = $scope.suiviCompetence.domaines.all[i];
	         if (i > 0) {
	         var domainePrec = $scope.suiviCompetence.domaines.all[i - 1];
	         if (domainePrec.visible && !domaine.visible) {
	         domaine.visible = true;
	         domaine.setVisibleSousDomaines(true);
	         return;
	         }
	         }
	         }
	         };*/
	        /**
	         *
	         * Méthode qui n'affiche que le 1er domaine
	         *
	         */
	        /* Methode plus utilisée
	         $scope.initAffichageDomaines = function () {
	         for (var i = 0; i < $scope.suiviCompetence.domaines.all.length; i++) {
	         var domaine = $scope.suiviCompetence.domaines.all[i];
	         var bPremierDomaine = (i == 0);
	         domaine.visible = bPremierDomaine;
	         domaine.setVisibleSousDomaines(bPremierDomaine);
	         }
	         };*/
	        /**
	         * Créer une suivi de compétence
	         */
	        $scope.selectSuivi = function () {
	            $scope.selected.grey = true;
	            if ($scope.search.classe.eleves.findWhere({ id: $scope.search.eleve.id }) === undefined) {
	                $scope.search.eleve = "";
	                delete $scope.suiviCompetence;
	                return;
	            }
	            $scope.informations.eleve = $scope.search.eleve;
	            if ($scope.informations.eleve !== null && $scope.search.eleve !== "") {
	                $scope.suiviCompetence = new eval_teacher_mdl_1.SuiviCompetence($scope.search.eleve, $scope.search.periode, $scope.search.classe, $scope.evaluations.structure);
	                $scope.suiviCompetence.sync().then(function () {
	                    // On récupère d'abord les bilans de fin de cycle enregistrés par le chef d'établissement
	                    $scope.suiviCompetence.bilanFinDeCycles.all = [];
	                    $scope.suiviCompetence.bilanFinDeCycles.sync().then(function () {
	                        $scope.suiviCompetence.domaines.all = [];
	                        $scope.suiviCompetence.domaines.sync().then(function () {
	                            $scope.suiviCompetence.setMoyenneCompetences($scope.suiviFilter.mine);
	                            if ($scope.opened.detailCompetenceSuivi) {
	                                $scope.detailCompetence = $scope.suiviCompetence.findCompetence($scope.detailCompetence.id);
	                                if ($scope.detailCompetence) {
	                                    $scope.openDetailCompetence($scope.detailCompetence);
	                                }
	                                else {
	                                    $scope.backToSuivi();
	                                }
	                            }
	                        });
	                    });
	                    $scope.initSliderBFC();
	                    $scope.informations.eleve.suiviCompetences.push($scope.suiviCompetence);
	                    $scope.template.close('suivi-competence-content');
	                    utils.safeApply($scope);
	                    $scope.template.open('suivi-competence-content', '../templates/evaluations/enseignants/suivi_competences_eleve/content_vue_suivi_eleve');
	                    if ($scope.displayFromClass)
	                        delete $scope.displayFromClass;
	                    utils.safeApply($scope);
	                });
	            }
	        };
	        $scope.initSliderBFC = function () {
	            $scope.suiviCompetence.getConversionTable($scope.evaluations.structure.id, $scope.search.classe.id).then(function (data) {
	                return $scope.suiviCompetence.tableConversions;
	            });
	        };
	        $scope.updateSuiviEleve = function (Eleve) {
	            $scope.selected.grey = true;
	            $scope.search.classe = _.findWhere(eval_teacher_mdl_1.evaluations.classes.all, { 'id': Eleve.idClasse });
	            $scope.search.classe.eleves.sync().then(function () {
	                $scope.search.eleve = _.findWhere($scope.search.classe.eleves.all, { 'id': Eleve.id });
	                $scope.selectSuivi($scope.route.current.$$route.originalPath);
	                utils.safeApply($scope);
	            });
	        };
	        $scope.initSuivi = function () {
	            if ($scope.displayFromClass !== true) {
	                $scope.search.eleve = "";
	                delete $scope.informations.eleve;
	                delete $scope.suiviCompetence;
	            }
	            else {
	                $scope.selectSuivi($scope.route.current.$$route.originalPath);
	                $scope.displayFromEleve = true;
	                utils.safeApply($scope);
	            }
	        };
	        $scope.initSuivi();
	        $scope.$watch($scope.displayFromClass, function (newValue, oldValue) {
	            if (newValue !== oldValue) {
	                $scope.initSuivi();
	            }
	        });
	        $scope.pOFilterEval = {
	            limitTo: 2
	        };
	        /**
	         * Filtre permettant de retourner l'évaluation maximum en fonction du paramètre de recherche "Mes Evaluations"
	         * @param listeEvaluations Tableau d'évaluations de compétences
	         * @returns {(evaluation:any)=>(boolean|boolean)} Retourne true si la compétence courante est la plus haute du tableau listeEvaluations
	         */
	        $scope.isMaxEvaluation = function (listeEvaluations) {
	            return function (evaluation) {
	                var _t = listeEvaluations;
	                if ($scope.suiviFilter.mine === 'true' || $scope.suiviFilter.mine === true) {
	                    _t = _.filter(listeEvaluations, function (competence) {
	                        return competence.owner !== undefined && competence.owner === $scope.me.userId;
	                    });
	                }
	                var max = _.max(_t, function (competence) {
	                    return competence.evaluation;
	                });
	                if (typeof max === 'object') {
	                    return evaluation.id_competences_notes === max.id_competences_notes;
	                }
	                else {
	                    return false;
	                }
	            };
	        };
	        /**
	         * Retourne si l'utilisateur n'est pas le propriétaire de compétences
	         * @param listeEvaluations Tableau d'évaluations de compétences
	         * @returns {boolean} Retourne true si l'utilisateur n'est pas le propriétaire
	         */
	        $scope.notEvalutationOwner = function (listeEvaluations) {
	            if ($scope.suiviFilter.mine === 'false' || $scope.suiviFilter.mine === false) {
	                return false;
	            }
	            var _t = _.filter(listeEvaluations, function (competence) {
	                return competence.owner === undefined || competence.owner === $scope.me.userId;
	            });
	            return _t.length === 0;
	        };
	        /*
	         Listener sur le template suivi-competence-detail permettant la transition entre la vue détail
	         et la vue globale
	         */
	        entcore_1.template.watch("suivi-competence-detail", function () {
	            if (!$scope.opened.detailCompetenceSuivi) {
	                $scope.opened.detailCompetenceSuivi = true;
	            }
	        });
	        /**
	         * Lance la séquence d'ouverture du détail d'une compétence permettant d'accéder à la vue liste ou graph
	         * @param competence Compétence à ouvrir
	         */
	        $scope.openDetailCompetence = function (competence) {
	            $scope.detailCompetence = competence;
	            $scope.initChartsEval();
	            entcore_1.template.open("suivi-competence-detail", "../templates/evaluations/enseignants/suivi_competences_eleve/detail_vue_graph");
	            utils.scrollTo('top');
	        };
	        /**
	         * Lance la séquence de retour à la vue globale du suivi de compétence
	         */
	        $scope.backToSuivi = function () {
	            entcore_1.template.close("suivi-competence-detail");
	            $scope.opened.detailCompetenceSuivi = false;
	            $scope.detailCompetence = null;
	            $scope.messages.successEvalLibre = false;
	        };
	        /**
	         * Retourne si l'utilisateur est le propriétaire de l'évaluation
	         * @param evaluation Evaluation à afficher
	         * @returns {boolean} Retourne true si l'utilisateur est le propriétaire de l'évaluation
	         */
	        $scope.filterOwnerSuivi = function (evaluation) {
	            if ($scope.suiviFilter.mine === 'false' || $scope.suiviFilter.mine === false) {
	                return true;
	            }
	            return evaluation.owner === $scope.me.userId;
	        };
	        /**
	         * Recherche l'index de l'objet dans le tableau
	         * @param array tableau d'objets
	         * @param obj objet
	         * @returns {number} index de l'objet
	         */
	        var searchIndex = function (array, obj) {
	            return _.indexOf(array, obj);
	        };
	        $scope.EvaluationExiste = function (list) {
	            var ListOfOwner = _.map(list, function (item) {
	                if (item.owner === $scope.me.userId)
	                    return item;
	            });
	            if (ListOfOwner.length === 0) {
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        /**
	         * Remplace l'élève recherché par le nouveau suite à l'incrémentation de l'index
	         * @param num pas d'incrémentation. Peut être positif ou négatif
	         */
	        $scope.incrementEleve = function (num) {
	            $scope.selected.grey = true;
	            var index = searchIndex($scope.search.classe.eleves.all, $scope.search.eleve);
	            if (index !== -1 && (index + parseInt(num)) >= 0
	                && (index + parseInt(num)) < $scope.search.classe.eleves.all.length) {
	                $scope.search.eleve = $scope.search.classe.eleves.all[index + parseInt(num)];
	                $scope.selectSuivi();
	                utils.safeApply($scope);
	            }
	        };
	        $scope.textPeriode = "Hors periode scolaire";
	        /**
	         * Return la periode scolaire courante
	         * @returns {any}
	         */
	        $scope.periodeParDefault = function () {
	            var PeriodeParD = new Date().toISOString();
	            var PeriodeSet = false;
	            //let  PeriodeParD = new Date().getFullYear() +"-"+ new Date().getMonth() +1 +"-" +new Date().getDate();
	            for (var i = 0; i < $scope.periodes.all.length; i++) {
	                if (PeriodeParD >= $scope.periodes.all[i].timestamp_dt && PeriodeParD <= $scope.periodes.all[i].timestamp_fn) {
	                    PeriodeSet = true;
	                    return $scope.periodes.all[i];
	                }
	            }
	            if (PeriodeSet === false) {
	                return $scope.textPeriode;
	            }
	        };
	        $scope.search.periode = $scope.periodeParDefault();
	        $scope.chartOptionsEval = {
	            series: ['Evaluation'],
	            tooltipLabels: [],
	            options: {
	                tooltips: {
	                    callbacks: {
	                        label: function (tooltipItems, data) {
	                            return $scope.chartOptionsEval.tooltipLabels[tooltipItems.index];
	                        }
	                    }
	                },
	                elements: {
	                    point: {
	                        radius: 10,
	                    },
	                    line: {
	                        fill: false,
	                        borderDash: [0, 15]
	                    }
	                },
	                maintainAspectRatio: false,
	                scales: {
	                    responsive: true,
	                    yAxes: [{
	                            gridLines: { display: false,
	                                color: '#000000' },
	                            pointRadius: 10,
	                            type: 'linear',
	                            display: true,
	                            ticks: {
	                                max: 6,
	                                min: 0,
	                                fontColor: 'black',
	                                stepSize: 1,
	                                padding: 20,
	                                callback: function (value, index, values) {
	                                    if (value === 1) {
	                                        return "Compétence non évaluée";
	                                    }
	                                    else if (value === 2) {
	                                        return "Maîtrise insuffisante";
	                                    }
	                                    else if (value === 3) {
	                                        return "Maîtrise fragile";
	                                    }
	                                    else if (value === 4) {
	                                        return "Maîtrise satisfaisante";
	                                    }
	                                    else if (value === 5) {
	                                        return "Très bonne maîtrise";
	                                    }
	                                    else {
	                                        return " ";
	                                    }
	                                    // return parseFloat(value).toFixed(2) + '%';
	                                }
	                            },
	                        }],
	                    xAxes: [{
	                            type: 'category',
	                            display: true,
	                            responsive: false,
	                            gridLines: {
	                                display: false,
	                                offsetGridLines: false,
	                                color: '#000000'
	                            },
	                            ticks: {
	                                labelOffset: 30,
	                                minRotation: 20,
	                                autoSkip: true,
	                                maxTicksLimit: 20,
	                                fontColor: 'black'
	                            }
	                        }]
	                }
	            },
	            //les données des axes X: et Y:
	            datasets: {
	                labels: [],
	                data: []
	            },
	            //les couleurs des points
	            colors: []
	        };
	        /**
	         *
	         */
	        $scope.initChartsEval = function () {
	            if ($scope.detailCompetence !== undefined) {
	                var ListEval = _.map($scope.detailCompetence.competencesEvaluations, function (evalu) {
	                    if ($scope.filterOwnerSuivi(evalu)) {
	                        return evalu;
	                    }
	                });
	                //initialisation et rajout de la 1er colomn vide
	                $scope.chartOptionsEval.tooltipLabels = [];
	                $scope.chartOptionsEval.tooltipLabels.push(' ');
	                $scope.chartOptionsEval.datasets.data = [];
	                $scope.chartOptionsEval.datasets.data.push(-10);
	                $scope.chartOptionsEval.datasets.labels = [];
	                $scope.chartOptionsEval.datasets.labels.push(" ");
	                $scope.chartOptionsEval.colors = [];
	                $scope.chartOptionsEval.colors.push('#FFFFFF');
	                ListEval = _.sortBy(ListEval, function (evalu) { return evalu.evaluation_date; });
	                for (var i = 0; i < ListEval.length; i++) {
	                    $scope.chartOptionsEval.datasets.data.push(ListEval[i].evaluation + 2);
	                    $scope.chartOptionsEval.datasets.labels.push($scope.getDateFormated(ListEval[i].evaluation_date));
	                    var colorValue = void 0;
	                    if (ListEval[i].evaluation == 0) {
	                        colorValue = '#E13A3A';
	                    }
	                    else if (ListEval[i].evaluation == 1) {
	                        colorValue = '#FF8500';
	                    }
	                    else if (ListEval[i].evaluation == 2) {
	                        colorValue = '#ECBE30';
	                    }
	                    else if (ListEval[i].evaluation == 3) {
	                        colorValue = '#46BFAF';
	                    }
	                    else {
	                        colorValue = '#555555';
	                    }
	                    $scope.chartOptionsEval.colors.push(colorValue);
	                    $scope.chartOptionsEval.tooltipLabels.push(ListEval[i].evaluation_libelle + ' : ' + ListEval[i].owner_name);
	                }
	                //rajout de la dernière colomn vide
	                $scope.chartOptionsEval.datasets.data.push(-10);
	                $scope.chartOptionsEval.datasets.labels.push(" ");
	                $scope.chartOptionsEval.colors.push('#FFFFFF');
	                $scope.chartOptionsEval.tooltipLabels.push(' ');
	            }
	        };
	        $scope.$watch($scope.detailCompetence, function () {
	            $scope.initChartsEval();
	        });
	        $scope.selected.grey = true;
	        $scope.FilterNotEvaluated = function (MaCompetence) {
	            if ($scope.selected.grey === true) {
	                var _t = MaCompetence.competencesEvaluations;
	                if ($scope.suiviFilter.mine === 'true' || $scope.suiviFilter.mine === true) {
	                    _t = _.filter(MaCompetence.competencesEvaluations, function (evaluation) {
	                        if (evaluation.owner !== undefined && evaluation.owner === $scope.me.userId)
	                            return evaluation;
	                    });
	                }
	                var max = _.max(_t, function (evaluation) {
	                    return evaluation.evaluation;
	                });
	                if (typeof max === 'object') {
	                    return (!(max.evaluation == -1));
	                }
	                else {
	                    return false;
	                }
	            }
	            else {
	                return true;
	            }
	        };
	    }
	]);
	


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by ledunoiss on 27/10/2016.
	 */
	"use strict";
	var entcore_1 = __webpack_require__(2);
	var eval_teacher_mdl_1 = __webpack_require__(9);
	var utils = __webpack_require__(10);
	exports.evalSuiviCompetenceClasseCtl = entcore_1.ng.controller('EvalSuiviCompetenceClasseCtl', [
	    '$scope', 'route', '$rootScope', '$location', '$filter', '$route',
	    function ($scope, route, $rootScope, $location, $filter, $route) {
	        //rajout de la periode Annee
	        $scope.periodes.sync();
	        $scope.periodes.on('sync', function () {
	            //selection de la periode du suivi à l'initialisation du filtre par période
	            if ($route.current.params.idPeriode === undefined) {
	                $scope.periodesList = {
	                    "type": "select",
	                    "name": "Service",
	                    "value": $scope.periodeParDefault(),
	                    "values": []
	                };
	            }
	            else {
	                $scope.search.periode = $scope.periodes.findWhere({ id: parseInt($route.current.params.idPeriode) });
	                if ($scope.search.periode === undefined) {
	                    $scope.search.periode = $scope.periodeParDefault();
	                }
	                $scope.periodesList = {
	                    "type": "select",
	                    "name": "Service",
	                    "value": $scope.search.periode,
	                    "values": []
	                };
	            }
	            _.map($scope.periodes.all, function (periode) {
	                $scope.periodesList.values.push(periode);
	            });
	            $scope.periodesList.values.push({ libelle: $scope.translate('viescolaire.utils.annee'), id: undefined });
	            utils.safeApply($scope);
	            //sélection de la classe du suivi
	            if ($route.current.params.idClasse !== undefined) {
	                if ($scope.classes !== undefined) {
	                    $scope.search.classe = $scope.classes.findWhere({ id: $route.current.params.idClasse });
	                }
	                else {
	                    $scope.classes.sync();
	                    $scope.classes.on('classes-sync', function () {
	                        $scope.search.classe = $scope.classes.findWhere({ id: $route.current.params.idClasse });
	                    });
	                }
	            }
	            else {
	                $scope.search.classe = "";
	            }
	            delete $scope.informations.eleve;
	            $scope.route = $route;
	            $scope.suiviFilter = {
	                mine: 'false'
	            };
	            $scope.selected.colors = {
	                0: true,
	                1: true,
	                2: true,
	                3: true,
	                4: true
	            };
	            utils.safeApply($scope);
	            entcore_1.template.open('container', '../templates/layouts/2_10_layout');
	            entcore_1.template.open('left-side', '../templates/evaluations/enseignants/suivi_competences_eleve/left_side');
	            entcore_1.template.open('content', '../templates/evaluations/enseignants/suivi_competences_classe/content');
	            $scope.selectSuivi($scope.route.current.$$route.originalPath);
	            utils.safeApply($scope);
	        });
	        /**
	         * Créer une suivi de compétence
	         */
	        $scope.selectSuivi = function (state) {
	            $scope.Display = { EvaluatedCompetences: true };
	            $scope.informations.classe = $scope.search.classe;
	            if ($scope.informations.classe !== null && $scope.search.classe !== '' && $scope.search.classe !== '*') {
	                $scope.suiviCompetence = new eval_teacher_mdl_1.SuiviCompetenceClasse($scope.search.classe, $scope.search.periode);
	                //on met à jour le fil d'ariane
	                var updatedUrl = '/competences/classe?idClasse=' + $scope.search.classe.id + '&idPeriode=' + $scope.search.periode.id;
	                $rootScope.$broadcast('change-params', updatedUrl);
	                $scope.suiviCompetence.sync().then(function () {
	                    $scope.suiviCompetence.domaines.sync();
	                    if ($scope.opened.detailCompetenceSuivi) {
	                        $scope.detailCompetence = $scope.suiviCompetence.findCompetence($scope.detailCompetence.id);
	                        if (!$scope.detailCompetence)
	                            $scope.backToSuivi();
	                    }
	                    // On stocke l'ensemble des élèves de la classe dan une Map
	                    var mapEleves = {};
	                    for (var i = 0; i < $scope.search.classe.eleves.all.length; i++) {
	                        mapEleves[$scope.search.classe.eleves.all[i].id] = $scope.search.classe.eleves.all[i];
	                    }
	                    $scope.search.classe.mapEleves = mapEleves;
	                    utils.safeApply($scope);
	                    if ($scope.displayFromEleve)
	                        delete $scope.displayFromEleve;
	                    entcore_1.template.close('suivi-competence-content');
	                    utils.safeApply($scope);
	                    entcore_1.template.open('suivi-competence-content', '../templates/evaluations/enseignants/suivi_competences_classe/content_vue_suivi_classe');
	                    utils.safeApply($scope);
	                });
	            }
	        };
	        $scope.getMaxEvaluations = function (idEleve) {
	            if ($scope.detailCompetence === undefined) {
	                return;
	            }
	            var evaluations = $scope.suiviFilter.mine == 'true'
	                ? _.where($scope.detailCompetence.competencesEvaluations, { id_eleve: idEleve, owner: entcore_1.model.me.userId })
	                : _.where($scope.detailCompetence.competencesEvaluations, { id_eleve: idEleve });
	            if (evaluations.length > 0) {
	                return _.max(evaluations, function (evaluation) { return evaluation.evaluation; });
	            }
	        };
	        $scope.pOFilterEval = {
	            limitTo: 2
	        };
	        /**
	         * Retourne la classe en fonction de l'évaluation obtenue pour la compétence donnée
	         * @param eleveId identifiant de l'élève
	         * @returns {String} Nom de la classe
	         */
	        $scope.getEvaluationResult = function (eleveId) {
	            var evaluation = $scope.getMaxEvaluations(eleveId);
	            if (evaluation !== -Infinity) {
	                switch (evaluation.evaluation) {
	                    case 0: return "border-red";
	                    case 1: return "border-orange";
	                    case 2: return "border-yellow";
	                    case 3: return "border-green";
	                    default: return "border-grey";
	                }
	            }
	        };
	        $scope.FilterColor = function (item) {
	            var evaluation = $scope.getMaxEvaluations(item.id);
	            if (evaluation === undefined) {
	                return;
	            }
	            else if (evaluation !== -Infinity)
	                return $scope.selected.colors[evaluation.evaluation + 1];
	        };
	        /**
	         * Retourne si l'utilisateur n'est pas le propriétaire de compétences
	         * @param listeEvaluations Tableau d'évaluations de compétences
	         * @returns {boolean} Retourne true si l'utilisateur n'est pas le propriétaire
	         */
	        $scope.notEvalutationOwner = function (listeEvaluations) {
	            if ($scope.suiviFilter.mine === 'false' || $scope.suiviFilter.mine === false) {
	                return false;
	            }
	            var _t = _.filter(listeEvaluations, function (competence) {
	                return competence.owner === undefined || competence.owner === $scope.me.userId;
	            });
	            return _t.length === 0;
	        };
	        /*
	         Listener sur le template suivi-competence-detail permettant la transition entre la vue détail
	         et la vue globale
	         */
	        entcore_1.template.watch("suivi-competence-detail", function () {
	            if (!$scope.opened.detailCompetenceSuivi) {
	                $scope.opened.detailCompetenceSuivi = true;
	            }
	        });
	        /**
	         * Lance la séquence d'ouverture du détail d'une compétence
	         * @param competence Compétence à ouvrir
	         */
	        $scope.openDetailCompetence = function (competence) {
	            $scope.detailCompetence = competence;
	            entcore_1.template.open("suivi-competence-detail", "../templates/evaluations/enseignants/suivi_competences_classe/detail_vue_classe");
	            utils.scrollTo('top');
	        };
	        /**
	         * Lance la séquence de retour à la vue globale du suivi de compétence
	         */
	        $scope.backToSuivi = function () {
	            entcore_1.template.close("suivi-competence-detail");
	            $scope.opened.detailCompetenceSuivi = false;
	            $scope.detailCompetence = null;
	        };
	        /**
	         * Retourne si l'utilisateur est le propriétaire de l'évaluation
	         * @param evaluation Evaluation à afficher
	         * @returns {boolean} Retourne true si l'utilisateur est le propriétaire de l'évaluation
	         */
	        $scope.filterOwnerSuivi = function (evaluation) {
	            if ($scope.suiviFilter.mine === 'false' || $scope.suiviFilter.mine === false) {
	                return true;
	            }
	            return evaluation.owner === $scope.me.userId;
	        };
	        /**
	         * Recherche l'index de l'objet dans le tableau
	         * @param array tableau d'objets
	         * @param obj objet
	         * @returns {number} index de l'objet
	         */
	        var searchIndex = function (array, obj) {
	            return _.indexOf(array, obj);
	        };
	        /**
	         * Return la periode scolaire courante
	         * @returns {any}
	         */
	        $scope.periodeParDefault = function () {
	            var PeriodeParD = new Date().toISOString();
	            var PeriodeSet = false;
	            //let  PeriodeParD = new Date().getFullYear() +"-"+ new Date().getMonth() +1 +"-" +new Date().getDate();
	            for (var i = 0; i < $scope.periodes.all.length; i++) {
	                if (PeriodeParD >= $scope.periodes.all[i].timestamp_dt && PeriodeParD <= $scope.periodes.all[i].timestamp_fn) {
	                    PeriodeSet = true;
	                    return $scope.periodes.all[i];
	                }
	            }
	            if (PeriodeSet === false) {
	                return $scope.textPeriode;
	            }
	        };
	        /**
	         * Remplace l'élève recherché par le nouveau suite à l'incrémentation de l'index
	         * @param num pas d'incrémentation. Peut être positif ou négatif
	         */
	        $scope.incrementClasse = function (num) {
	            $scope.Display = { EvaluatedCompetences: true };
	            var index = searchIndex($scope.classes.all, $scope.search.classe);
	            if (index !== -1 && (index + parseInt(num)) >= 0
	                && (index + parseInt(num)) < $scope.classes.all.length) {
	                $scope.search.classe = $scope.classes.all[index + parseInt(num)];
	                $scope.selectSuivi('/competences/classe');
	                utils.safeApply($scope);
	            }
	        };
	        $scope.Display = { EvaluatedCompetences: true };
	        $scope.ClasseFilterNotEvaluated = function (MaCompetence) {
	            if ($scope.Display.EvaluatedCompetences === true) {
	                var _t = MaCompetence.competencesEvaluations;
	                if ($scope.suiviFilter.mine === 'true' || $scope.suiviFilter.mine === true) {
	                    _t = _.filter(MaCompetence.competencesEvaluations, function (evaluation) {
	                        if (evaluation.owner !== undefined && evaluation.owner === $scope.me.userId)
	                            return evaluation;
	                    });
	                }
	                var EvaluatedOK_1 = false;
	                _.map(_t, function (competenceNote) {
	                    if (competenceNote.evaluation != -1) {
	                        EvaluatedOK_1 = true;
	                    }
	                });
	                return EvaluatedOK_1;
	            }
	            else {
	                return true;
	            }
	        };
	        $scope.selectSuivi();
	    }
	]);
	


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 16/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.uniqueFilter = entcore_1.ng.filter('unique', function () {
	    return function (collection, keyname) {
	        var output = [], keys = [];
	        angular.forEach(collection, function (item) {
	            var key = item[keyname];
	            if (keys.indexOf(key) === -1) {
	                keys.push(key);
	                output.push(item);
	            }
	        });
	        return output;
	    };
	});
	


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 20/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	var moment = __webpack_require__(5);
	exports.customSearchFilter = entcore_1.ng.filter('customSearchFilters', function () {
	    return function (devoirs, searchParams) {
	        var output = devoirs;
	        var tempTable = [];
	        if (searchParams.classe !== '*' && searchParams.classe !== null) {
	            tempTable = _.where(output, { id_groupe: searchParams.classe.id });
	            output = tempTable;
	        }
	        if (searchParams.matiere !== '*' && searchParams.matiere !== null) {
	            tempTable = _.where(output, { id_matiere: searchParams.matiere.id });
	            output = tempTable;
	        }
	        if (searchParams.sousmatiere !== '*' && searchParams.sousmatiere !== null) {
	            tempTable = _.where(output, { id_sousmatiere: parseInt(searchParams.sousmatiere.id) });
	            output = tempTable;
	        }
	        if (searchParams.type !== '*' && searchParams.type !== null) {
	            tempTable = _.where(output, { id_type: parseInt(searchParams.type.id) });
	            output = tempTable;
	        }
	        if (searchParams.periode !== undefined && searchParams.periode !== '*' && searchParams.periode !== null) {
	            if (searchParams.periode.id !== undefined) {
	                tempTable = _.where(output, { id_periode: parseInt(searchParams.periode.id) });
	                output = tempTable;
	            }
	        }
	        if (searchParams.name !== "" && searchParams.name !== null) {
	            tempTable = _.filter(output, function (devoir) {
	                var reg = new RegExp(searchParams.name.toUpperCase());
	                return devoir.name.toUpperCase().match(reg) !== null;
	            });
	            output = tempTable;
	        }
	        return output;
	    };
	});
	


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 20/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.customSearchCompetencesFilter = entcore_1.ng.filter('customSearchCompetencesFilter', function () {
	    return function (enseignements, enseignementsAfiltrer) {
	        var output = enseignements;
	        var tempTable = [];
	        // on ne prend que le enseignements selectionnes
	        var enseignementsAfiltrer = _.where(enseignementsAfiltrer.all, { selected: true });
	        // filtre sur la liste des enseignements dans l'arbre
	        if (enseignementsAfiltrer != undefined && enseignementsAfiltrer.length > 0) {
	            for (var i = 0; i < enseignementsAfiltrer.length; i++) {
	                var enseignementAajouter = _.findWhere(enseignements.all, { id: enseignementsAfiltrer[i].id });
	                if (enseignementAajouter != undefined) {
	                    tempTable.push(enseignementAajouter);
	                }
	            }
	            output = tempTable;
	        }
	        return output;
	    };
	});
	


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 20/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.getMatiereClasseFilter = entcore_1.ng.filter('getMatiereClasse', function () {
	    return function (matieres, idClasse, classes, search) {
	        // if (idClasse === '*' || idClasse === undefined) return matieres;
	        // if (classes.all.length > 0) {
	        //     var currentClasse = _.findWhere(classes.all, {id : idClasse});
	        //     if(currentClasse !== undefined) {
	        //         var libelleClasse =currentClasse.name;
	        //         if (libelleClasse !== undefined) {
	        //             var listMatieresOfClasse = _.where(listeMatiere.all, {libelleClasse: libelleClasse});
	        //             if(listMatieresOfClasse === undefined || listMatieresOfClasse.length == 0 ){
	        //                 return listeMatiere.all;
	        //             }else{
	        //                 return listMatieresOfClasse;
	        //             }
	        //         }
	        //     }
	        // }
	        if (idClasse === '*' || idClasse === undefined)
	            return matieres;
	        if (classes.all.length > 0) {
	            var classe_1 = classes.findWhere({ id: idClasse });
	            if (classe_1 !== undefined) {
	                var matieresClasse = matieres.filter(function (matiere) {
	                    return (matiere.libelleClasses.indexOf(classe_1.externalId) !== -1);
	                });
	                if (matieresClasse.length > 0) {
	                    return matieresClasse;
	                }
	                return matieres;
	            }
	        }
	    };
	});
	


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.cFilAriane = entcore_1.ng.directive("cFilAriane", ["$location", "route", "$rootScope", "$route", function ($location, routes, $rootScope, $route) {
	        return {
	            templateUrl: "/" + entcore_1.appPrefix + "/public/components/ariane.html",
	            restrict: "E",
	            link: function ($scope, element, attrs) {
	                /**boolean si vrai alors l'état d'avant était création de devoir
	                 * @type {boolean}
	                 */
	                $scope.checkIfIsTodelete;
	                /**
	                 * les URLS suprimé du fil d'ariane just après les avoir quitter
	                 * @type {[string]}
	                 */
	                $scope.$location = $location;
	                $scope.ToDelete = [
	                    "/devoir/create"
	                ];
	                if ($scope.ariane === undefined && $route.current.originalPath !== $route.routes.null.redirectTo) {
	                    var initFilNonAcceuil = true;
	                }
	                $scope.ariane = [];
	                var getSize = function (obj) {
	                    var size = 0, key;
	                    for (key in obj) {
	                        if (obj.hasOwnProperty(key))
	                            size++;
	                    }
	                    return size;
	                };
	                $scope.ariane.push({ stateName: entcore_1.appPrefix + ".title", url: $route.routes.null.redirectTo });
	                if (initFilNonAcceuil === true) {
	                    var state = {
	                        stateName: "ariane." + entcore_1.appPrefix + "." + $route.current.action,
	                        url: ""
	                    };
	                    if (getSize($route.current.params) > 0) {
	                        // state.url = $route.current.originalPath.replace($route.current.regexp.exec($route.current.originalPath)[1], $route.current.params[$route.current.regexp.exec($route.current.originalPath)[1].substring(1)]);
	                        var url = $route.current.originalPath + '?';
	                        for (var key in $route.current.params) {
	                            url += key + '=' + $route.current.params[key] + '&';
	                        }
	                        state.url = url.slice(0, -1);
	                    }
	                    else {
	                        state.url = $route.current.originalPath;
	                    }
	                    $scope.ariane.push(state);
	                }
	                $rootScope.$on("$routeChangeSuccess", function ($currentRoute, $previousRoute, $location) {
	                    if ($route.current.originalPath === $route.routes.null.redirectTo || $route.current.action === undefined) {
	                        $scope.ariane.splice(1, $scope.ariane.length - 1);
	                    }
	                    else {
	                        /**
	                         * si l'état précédent est à suprimé
	                         */
	                        if ($scope.checkIfIsTodelete === true && $scope.ariane.length > 1) {
	                            $scope.ariane.splice($scope.ariane.length - 1, 1);
	                            $scope.checkIfIsTodelete = undefined;
	                        }
	                        /**
	                         * si l'état actuelle est à suprimé
	                         */
	                        if (_.contains($scope.ToDelete, $route.current.originalPath)) {
	                            $scope.checkIfIsTodelete = true;
	                        }
	                        /**
	                         * si l'état existe déja
	                         * @type {Eleve|T|any}
	                         */
	                        var o = _.findWhere($scope.ariane, { stateName: "ariane." + entcore_1.appPrefix + "." + $route.current.action, });
	                        if (o !== undefined) {
	                            var i = $scope.ariane.indexOf(o);
	                        }
	                        else {
	                            i = -1;
	                        }
	                        if (i !== -1) {
	                            $scope.ariane.splice(i + 1, $scope.ariane.length - 1);
	                        }
	                        else {
	                            var state = {
	                                stateName: "ariane." + entcore_1.appPrefix + "." + $route.current.action,
	                                url: ""
	                            };
	                            if (getSize($route.current.params) > 0) {
	                                state.url = $route.current.originalPath + '?';
	                                for (var i_1 = 0; i_1 <= getSize($route.current.params); i_1++) {
	                                    if (i_1 === 0) {
	                                        var key = Object.keys($route.current.params)[i_1];
	                                        state.url += key + '=' + $route.current.params[key];
	                                    }
	                                    else {
	                                        var key = Object.keys($route.current.params)[i_1];
	                                        state.url += '&' + key + '=' + $route.current.params[key];
	                                    }
	                                }
	                            }
	                            else {
	                                state.url = $route.current.originalPath;
	                            }
	                            $scope.ariane.push(state);
	                        }
	                    }
	                });
	                $scope.isLast = function (state) {
	                    return $scope.ariane.indexOf(state) + 1 === $scope.ariane.length;
	                };
	                $scope.getI18nValue = function (i18nKey) {
	                    return entcore_1.idiom.translate(i18nKey);
	                };
	                $scope.$on('change-params', function (event, updatedUrl) {
	                    var o = _.findWhere($scope.ariane, { stateName: "ariane." + entcore_1.appPrefix + "." + $route.current.action, });
	                    if (o !== undefined) {
	                        var i = $scope.ariane.indexOf(o);
	                    }
	                    else {
	                        i = -1;
	                    }
	                    if (i !== -1) {
	                        o.url = updatedUrl;
	                    }
	                });
	            }
	        };
	    }]);
	


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.$ = __webpack_require__(18);
	exports.navigable = entcore_1.ng.directive('cNavigable', function () {
	    return {
	        restrict: 'A',
	        link: function (scope, element, attrs) {
	            scope.getNext = function (obj) {
	                var row = obj.closest('.navigable-inputs-row');
	            };
	            scope.findAncestor = function (el, cls) {
	                while ((el = el.parentElement) && !el.classList.contains(cls))
	                    ;
	                return el;
	            };
	            scope.findChildren = function (el, cls) {
	                var children = [];
	                for (var i = 0; i < el.children.length; i++) {
	                    if (scope.hasClass(el.children[i], cls)) {
	                        children.push(el.children[i]);
	                    }
	                }
	                return children;
	            };
	            scope.hasClass = function (el, cls) {
	                return el.className.indexOf(cls) > -1;
	            };
	            scope.findIndex = function (el, row) {
	                var i;
	                for (i = 0; i < row.length; i++) {
	                    if (row[i] === el) {
	                        return i;
	                    }
	                }
	                return -1;
	            };
	            scope.findInput = function (row) {
	                for (var i = 0; i < row.children.length; i++) {
	                    if (row.children[i].tagName === 'INPUT') {
	                        return row.children[i];
	                    }
	                }
	                return null;
	            };
	            scope.findInputs = function (row) {
	                var inputs = [];
	                for (var i = 0; i < row.children.length; i++) {
	                    if (row.children[i].tagName === 'INPUT') {
	                        inputs.push(row.children[i]);
	                    }
	                }
	                return inputs;
	            };
	            scope.findNavigableRow = function (row) {
	                return (scope.findChildren(row, 'navigable-inputs-row'))[0];
	            };
	            element.bind('keydown', function (event) {
	                var keys = {
	                    enter: 13,
	                    arrow: { left: 37, up: 38, right: 39, down: 40 }
	                };
	                var key = event.which;
	                if (exports.$.inArray(key, [keys.arrow.left, keys.arrow.up, keys.arrow.right, keys.arrow.down, keys.enter]) < 0) {
	                    return;
	                }
	                var input = event.target;
	                var td = scope.findAncestor(event.target, 'navigable-cell');
	                var row = scope.findAncestor(td, 'navigable-inputs-row');
	                var children = scope.findChildren(row, 'navigable-cell');
	                var index = scope.findIndex(td, children);
	                var moveTo = null;
	                switch (key) {
	                    case keys.arrow.left: {
	                        if (input.selectionStart === 0) {
	                            if (index > 0) {
	                                moveTo = children[index - 1];
	                            }
	                        }
	                        break;
	                    }
	                    case keys.arrow.right: {
	                        if (input.selectionEnd == input.value.length) {
	                            if (index < row.children.length) {
	                                moveTo = children[index + 1];
	                            }
	                        }
	                        break;
	                    }
	                    case keys.arrow.up:
	                    case keys.enter:
	                    case keys.arrow.down: {
	                        var tr = scope.findAncestor(td, 'navigable-row');
	                        var pos = scope.findIndex(td, children);
	                        var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                        var trIndex = scope.findIndex(tr, expandChildren);
	                        var moveToRow = null;
	                        if (key == keys.arrow.down || key == keys.enter) {
	                            if (trIndex < expandChildren.length - 1) {
	                                moveToRow = expandChildren[trIndex + 1];
	                            }
	                        }
	                        else if (key == keys.arrow.up) {
	                            if (trIndex > 0) {
	                                moveToRow = expandChildren[trIndex - 1];
	                            }
	                        }
	                        if (moveToRow !== null) {
	                            if (moveToRow.children.length) {
	                                var targets = [];
	                                var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                for (var i = 0; i < navigableCells.length; i++) {
	                                    targets.push(scope.findInput(navigableCells[i]));
	                                }
	                                moveTo = navigableCells[pos];
	                            }
	                        }
	                        break;
	                    }
	                }
	                if (moveTo) {
	                    event.preventDefault();
	                    input = scope.findInput(moveTo);
	                    input.focus();
	                    input.select();
	                }
	            });
	        }
	    };
	});
	


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by ledunoiss on 26/10/2016.
	 */
	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.$ = __webpack_require__(18);
	exports.navigableCompetences = entcore_1.ng.directive('cNavigableCompetences', function () {
	    return {
	        restrict: 'A',
	        link: function (scope, element, attrs) {
	            scope.getNext = function (obj) {
	                var row = obj.closest('.navigable-inputs-row');
	            };
	            scope.findAncestor = function (el, cls) {
	                while ((el = el.parentElement) && !el.classList.contains(cls))
	                    ;
	                return el;
	            };
	            scope.findChildren = function (el, cls) {
	                return exports.$(el).find('.' + cls);
	            };
	            scope.hasClass = function (el, cls) {
	                return el.className.indexOf(cls) > -1;
	            };
	            scope.findIndex = function (el, row) {
	                var i;
	                for (i = 0; i < row.length; i++) {
	                    if (row[i] === el) {
	                        return i;
	                    }
	                }
	                return -1;
	            };
	            scope.findInput = function (row) {
	                for (var i = 0; i < row.children.length; i++) {
	                    if (row.children[i].tagName === 'INPUT') {
	                        return row.children[i];
	                    }
	                }
	                return null;
	            };
	            scope.findInputs = function (row) {
	                var inputs = [];
	                for (var i = 0; i < row.children.length; i++) {
	                    if (row.children[i].tagName === 'INPUT') {
	                        inputs.push(row.children[i]);
	                    }
	                }
	                return inputs;
	            };
	            scope.isCompetenceCell = function (cell) {
	                return scope.hasClass(cell, 'competences-cell');
	            };
	            scope.isCompetence = function (input) {
	                return scope.hasClass(input, 'competence-eval');
	            };
	            scope.findNavigableRow = function (row) {
	                return (scope.findChildren(row, 'navigable-inputs-row'))[0];
	            };
	            scope.findCompetence = function (cell) {
	                return exports.$(cell).find('.competence-eval')[0];
	            };
	            element.bind('keydown', function (event) {
	                var keys = {
	                    enter: 13,
	                    arrow: { left: 37, up: 38, right: 39, down: 40 },
	                    numbers: { zero: 96, one: 97, two: 98, three: 99, four: 100 },
	                    shiftNumbers: { zero: 48, one: 49, two: 50, three: 51, four: 52 }
	                };
	                var key = event.which | event.keyCode;
	                if (exports.$.inArray(key, [keys.arrow.left, keys.arrow.up, keys.arrow.right, keys.arrow.down, keys.enter,
	                    keys.numbers.zero, keys.numbers.one, keys.numbers.two, keys.numbers.three, keys.numbers.four,
	                    keys.shiftNumbers.zero, keys.shiftNumbers.one, keys.shiftNumbers.two, keys.shiftNumbers.three, keys.shiftNumbers.four]) < 0) {
	                    return;
	                }
	                var input = event.target;
	                var td = scope.findAncestor(event.target, 'navigable-cell');
	                var row = scope.findAncestor(td, 'navigable-inputs-row');
	                var children = scope.findChildren(row, 'navigable-cell');
	                var index = scope.findIndex(td, children);
	                var moveTo = null;
	                switch (key) {
	                    case keys.arrow.left:
	                        {
	                            var moveToRow = null;
	                            // si champs de type input
	                            if (!scope.isCompetence(input)) {
	                                // si on est en debut de champs au passe au champs précédent
	                                if (input.selectionStart === 0) {
	                                    // si on est pas en debut de ligne, on passe à la cellule précédente
	                                    if (index > 0) {
	                                        moveTo = children[index - 1];
	                                    }
	                                    else {
	                                        // sinon on est en debut de ligne, on doit remonter au dernier element de la ligne précédente
	                                        var tr = scope.findAncestor(td, 'navigable-row');
	                                        var pos = scope.findIndex(td, children);
	                                        var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                                        var trIndex = scope.findIndex(tr, expandChildren);
	                                        var moveToRow = expandChildren[trIndex - 1];
	                                        if (moveToRow !== null) {
	                                            var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                            moveTo = navigableCells[navigableCells.length - 1];
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                // si on est pas en debut de ligne, on passe à la cellule précédente
	                                if (index > 0) {
	                                    moveTo = children[index - 1];
	                                }
	                                else {
	                                    // si on est en debut de ligne, on doit remonter au dernier element de la ligne précédente
	                                    var tr = scope.findAncestor(td, 'navigable-row');
	                                    var pos = scope.findIndex(td, children);
	                                    var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                                    var trIndex = scope.findIndex(tr, expandChildren);
	                                    var moveToRow = expandChildren[trIndex - 1];
	                                    if (moveToRow !== null) {
	                                        var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                        moveTo = navigableCells[navigableCells.length - 1];
	                                    }
	                                }
	                            }
	                        }
	                        break;
	                    case keys.numbers.zero:
	                    case keys.numbers.one:
	                    case keys.numbers.two:
	                    case keys.numbers.three:
	                    case keys.numbers.four:
	                    case keys.shiftNumbers.zero:
	                    case keys.shiftNumbers.one:
	                    case keys.shiftNumbers.two:
	                    case keys.shiftNumbers.three:
	                    case keys.shiftNumbers.four:
	                        {
	                            if (scope.isCompetence(input)) {
	                                // si pas en fin de ligne on passe à la cellule suivante
	                                if ((index + 1) < children.length) {
	                                    moveTo = children[index + 1];
	                                }
	                                else {
	                                    var tr = scope.findAncestor(td, 'navigable-row');
	                                    var pos = scope.findIndex(td, children);
	                                    var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                                    var trIndex = scope.findIndex(tr, expandChildren);
	                                    var moveToRow = expandChildren[trIndex + 1];
	                                    if (moveToRow !== null) {
	                                        var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                        moveTo = navigableCells[0];
	                                    }
	                                }
	                            }
	                        }
	                        break;
	                    case keys.arrow.right:
	                        {
	                            // si champs de type input
	                            if (!scope.isCompetence(input)) {
	                                // seulement si on est a la fin de l 'input text on passe au champ suivant
	                                if (input.selectionStart === input.value.length) {
	                                    // si pas en fin de ligne on passe à la cellule suivante
	                                    if ((index + 1) < children.length) {
	                                        moveTo = children[index + 1];
	                                    }
	                                    else {
	                                        var tr = scope.findAncestor(td, 'navigable-row');
	                                        var pos = scope.findIndex(td, children);
	                                        var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                                        var trIndex = scope.findIndex(tr, expandChildren);
	                                        var moveToRow = expandChildren[trIndex + 1];
	                                        if (moveToRow !== null) {
	                                            var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                            moveTo = navigableCells[0];
	                                        }
	                                    }
	                                }
	                            }
	                            else {
	                                // si pas en fin de ligne on passe à la cellule suivante
	                                if ((index + 1) < children.length) {
	                                    moveTo = children[index + 1];
	                                }
	                                else {
	                                    var tr = scope.findAncestor(td, 'navigable-row');
	                                    var pos = scope.findIndex(td, children);
	                                    var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                                    var trIndex = scope.findIndex(tr, expandChildren);
	                                    var moveToRow = expandChildren[trIndex + 1];
	                                    if (moveToRow !== null) {
	                                        var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                        moveTo = navigableCells[0];
	                                    }
	                                }
	                            }
	                        }
	                        break;
	                    case keys.arrow.up:
	                    case keys.enter:
	                    case keys.arrow.down:
	                        {
	                            var tr = scope.findAncestor(td, 'navigable-row');
	                            var pos = scope.findIndex(td, children);
	                            var expandChildren = scope.findChildren(scope.findAncestor(tr, 'expandable-liste'), 'navigable-row');
	                            var trIndex = scope.findIndex(tr, expandChildren);
	                            var moveToRow = null;
	                            if (key == keys.arrow.down || key == keys.enter) {
	                                if (trIndex < expandChildren.length - 1) {
	                                    moveToRow = expandChildren[trIndex + 1];
	                                }
	                            }
	                            else if (key == keys.arrow.up) {
	                                if (trIndex > 0) {
	                                    moveToRow = expandChildren[trIndex - 1];
	                                }
	                            }
	                            if (moveToRow !== null) {
	                                if (moveToRow.children.length) {
	                                    var targets = [];
	                                    var navigableCells = scope.findChildren(scope.findNavigableRow(moveToRow), 'navigable-cell');
	                                    for (var i = 0; i < navigableCells.length; i++) {
	                                        targets.push(scope.findInput(navigableCells[i]));
	                                    }
	                                    // s'il l'on essaie de remonter/descendre sur une ligne avec plus ou moins de cellules
	                                    // alors on effectue un traitement particulier
	                                    if (children.length !== navigableCells.length) {
	                                        // si la ligne n'a qu'un cellule on se positionne sur celle ci
	                                        if (navigableCells.length === 1) {
	                                            moveTo = navigableCells[0];
	                                        }
	                                        else {
	                                            // sinon on se positionne sur la dernière si l'on remonte
	                                            if (key == keys.arrow.up) {
	                                                moveTo = navigableCells[navigableCells.length - 1];
	                                            }
	                                            else {
	                                                // la première si l'on descends
	                                                moveTo = navigableCells[0];
	                                            }
	                                        }
	                                    }
	                                    else {
	                                        moveTo = navigableCells[pos];
	                                    }
	                                }
	                            }
	                        }
	                        break;
	                }
	                if (moveTo) {
	                    event.preventDefault();
	                    if (scope.isCompetenceCell(moveTo)) {
	                        input = scope.findCompetence(moveTo);
	                    }
	                    else {
	                        input = scope.findInput(moveTo);
	                    }
	                    input.classList.remove("display-none");
	                    input.focus();
	                    if (!scope.isCompetenceCell(moveTo)) {
	                        input.select();
	                    }
	                }
	            });
	        }
	    };
	});
	


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.$ = __webpack_require__(18);
	exports.navigatable = entcore_1.ng.directive('cNavigaTable', function () {
	    return {
	        restrict: 'A',
	        link: function (scope, element, attrs) {
	            element.bind('keydown', function (event) {
	                var keys = {
	                    enter: 13,
	                    arrow: { left: 37, up: 38, right: 39, down: 40 }
	                };
	                var key = event.which;
	                if (exports.$.inArray(key, [keys.arrow.left, keys.arrow.up, keys.arrow.right, keys.arrow.down, keys.enter]) < 0) {
	                    return;
	                }
	                var input = event.target;
	                var td = exports.$(event.target).closest('td');
	                var moveTo = null;
	                switch (key) {
	                    case keys.arrow.left: {
	                        if (input.selectionStart === 0) {
	                            moveTo = td.prevAll('td.nav-input')[0];
	                        }
	                        break;
	                    }
	                    case keys.arrow.right: {
	                        if (input.selectionEnd == input.value.length) {
	                            moveTo = td.nextAll('td.nav-input')[0];
	                        }
	                        break;
	                    }
	                    case keys.arrow.up:
	                    case keys.enter:
	                    case keys.arrow.down: {
	                        var tr = td.closest('tr');
	                        var pos = td[0].cellIndex;
	                        var moveToRow = null;
	                        if (key == keys.arrow.down || key == keys.enter) {
	                            moveToRow = tr.next('tr');
	                        }
	                        else if (key == keys.arrow.up) {
	                            moveToRow = tr.prev('tr');
	                        }
	                        if (moveToRow.length) {
	                            moveTo = exports.$(moveToRow[0].cells[pos]);
	                        }
	                        break;
	                    }
	                }
	                if (moveTo) {
	                    if (moveTo.length) {
	                        event.preventDefault();
	                        moveTo.find('input,textarea').each(function (i, input) {
	                            input.focus();
	                            input.select();
	                        });
	                    }
	                    else {
	                        var input = moveTo.getElementsByClassName("input-note")[0];
	                        if (input) {
	                            input.focus();
	                            input.select();
	                        }
	                    }
	                }
	            });
	        }
	    };
	});
	


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.tabs = entcore_1.ng.directive('tabs', function () {
	    return {
	        restrict: 'E',
	        transclude: true,
	        scope: {},
	        controller: ["$scope", function ($scope) {
	                var panes = $scope.panes = [];
	                $scope.select = function (pane) {
	                    angular.forEach(panes, function (pane) {
	                        pane.selected = false;
	                    });
	                    pane.selected = true;
	                };
	                this.addPane = function (pane) {
	                    if (panes.length === 0)
	                        $scope.select(pane);
	                    panes.push(pane);
	                };
	            }],
	        template: '<div class="tabbable">' +
	            '<ul class="nav nav-tabs">' +
	            '<li ng-repeat="pane in panes" ng-click="select(pane)" ng-class="{active:pane.selected}" class="six">' +
	            '<a href=""">{{pane.title}}</a>' +
	            '</li>' +
	            '</ul>' +
	            '<div class="tab-content twelve-mobile" ng-transclude></div>' +
	            '</div>',
	        replace: true
	    };
	});
	


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.pane = entcore_1.ng.directive('pane', function () {
	    return {
	        require: '^tabs',
	        restrict: 'E',
	        transclude: true,
	        scope: { title: '@' },
	        link: function (scope, element, attrs, tabsCtrl) {
	            tabsCtrl.addPane(scope);
	        },
	        template: '<div class="tab-pane twelve-mobile" ng-class="{active: selected}" ng-transclude>' +
	            '</div>',
	        replace: true
	    };
	});
	


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.$ = __webpack_require__(18);
	exports.cSkillNoteDevoir = entcore_1.ng.directive('cSkillNoteDevoir', function ($compile) {
	    return {
	        restrict: 'E',
	        scope: {
	            competence: '=',
	            nbEleve: '=',
	            nbCompetencesDevoir: '=',
	            currentDevoir: '=',
	            disabled: '=?',
	            focus: '=',
	            blur: '=',
	            indexRow: '=',
	            indexColumn: '=',
	            eleve: '=',
	            eleves: '=',
	            getEleveInfo: '=',
	            selectedCompetences: '='
	        },
	        template: '<span autofocus ng-if="indexRow === 0 && indexColumn ===0 && !currentDevoir.is_evaluated && !currentDevoir.endSaisie" ng-disabled="currentDevoir.endSaisie" ng-click="switchColor()" tabindex="0" ng-focus="focus(competence.id_competence, true);getEleveInfo(eleve);" ng-blur="blur(competence.id_competence, false); saveCompetence()" ng-keydown="keyColor($event)"  ng-mouseleave="saveCompetence()" ng-blur="saveCompetence()" ng-init="init()"  class="competence-eval rounded" ng-class="{compselected : highlightCompetenceNote(), grey : competence.evaluation == -1, red : competence.evaluation == 0, orange : competence.evaluation == 1, yellow : competence.evaluation == 2, green : competence.evaluation == 3}"></span> ' +
	            '<span ng-if="(indexRow !== 0 || indexColumn !==0 || currentDevoir.is_evaluated) && !currentDevoir.endSaisie" ng-disabled="currentDevoir.endSaisie" ng-click="switchColor()" tabindex="0" ng-focus="focus(competence.id_competence, true);getEleveInfo(eleve);" ng-blur="blur(competence.id_competence, false); saveCompetence()" ng-keydown="keyColor($event)"  ng-mouseleave="saveCompetence()" ng-blur="saveCompetence()" ng-init="init()"  class="competence-eval rounded" ng-class="{compselected : highlightCompetenceNote(), grey : competence.evaluation == -1, red : competence.evaluation == 0, orange : competence.evaluation == 1, yellow : competence.evaluation == 2, green : competence.evaluation == 3}"></span>' +
	            '<span autofocus ng-if="indexRow === 0 && indexColumn ===0 && !currentDevoir.is_evaluated && currentDevoir.endSaisie"  tabindex="0" ng-focus="focus(competence.id_competence, true);getEleveInfo(eleve);" ng-blur="blur(competence.id_competence, false); " ng-keydown="keyColor($event)"   ng-init="init()"  class="competence-eval rounded" ng-class="{compselected : highlightCompetenceNote(), grey : competence.evaluation == -1, red : competence.evaluation == 0, orange : competence.evaluation == 1, yellow : competence.evaluation == 2, green : competence.evaluation == 3}"></span> ' +
	            '<span ng-if="(indexRow !== 0 || indexColumn !==0 || currentDevoir.is_evaluated) && currentDevoir.endSaisie "  tabindex="0" ng-focus="focus(competence.id_competence, true);getEleveInfo(eleve);" ng-blur="blur(competence.id_competence, false); " ng-keydown="keyColor($event)"    ng-init="init()"  class="competence-eval rounded" ng-class="{compselected : highlightCompetenceNote(), grey : competence.evaluation == -1, red : competence.evaluation == 0, orange : competence.evaluation == 1, yellow : competence.evaluation == 2, green : competence.evaluation == 3}"></span>',
	        controller: ['$scope', function ($scope) {
	                $scope.color = -1;
	                $scope.modified = false;
	                $scope.compteur = 0;
	                $scope.switchColor = function () {
	                    if (!$scope.disabled) {
	                        if ($scope.competence.evaluation === -1) {
	                            $scope.competence.evaluation = 3;
	                        }
	                        else {
	                            $scope.competence.evaluation = $scope.competence.evaluation - 1;
	                        }
	                        $scope.$emit('majHeaderColumn', $scope.competence);
	                        $scope.modified = $scope.competence.oldValeur !== $scope.competence.evaluation;
	                    }
	                };
	                $scope.isCompetenceHeaderSelected = function () {
	                    return _.where($scope.selectedCompetences, { id_competence: $scope.competence.id_competence }).length > 0;
	                };
	                $scope.getNbElevesSelected = function () {
	                    return _.where($scope.eleves, { selected: true }).length;
	                };
	                $scope.highlightCompetenceNote = function () {
	                    var nbColumnSelected = $scope.selectedCompetences.length;
	                    var eleveSelected = $scope.eleve.selected;
	                    var nbElevesSelected = $scope.getNbElevesSelected();
	                    // cas 1 : aucune colonne sélectionnée et élève sélectionné
	                    if (nbColumnSelected === 0 && eleveSelected) {
	                        return true;
	                    }
	                    // cas 2 : au moins 1 colonne sélectionnée
	                    if (nbColumnSelected > 0) {
	                        // si l'élève est sélectionné alors dans ce cas on met en évidence que si on est sur la colonne sélectionnée
	                        if (eleveSelected && $scope.isCompetenceHeaderSelected()) {
	                            return true;
	                        }
	                        // si aucun élève est sélectionné, alors, on met en évidence toute la colonne (si celle ci est sélectionnée)
	                        if (nbElevesSelected === 0 && $scope.isCompetenceHeaderSelected()) {
	                            return true;
	                        }
	                    }
	                    // dans tous les autres cas on ne met rien en évidence
	                    return false;
	                };
	                $scope.keys = {
	                    numbers: { zero: 96, one: 97, two: 98, three: 99, four: 100 },
	                    shiftNumbers: { zero: 48, one: 49, two: 50, three: 51, four: 52 }
	                };
	                $scope.init = function () {
	                    $scope.disabled = $scope.disabled !== undefined ? $scope.disabled : false;
	                    $scope.competence.oldValeur = $scope.competence.evaluation;
	                };
	                $scope.keyColor = function ($event) {
	                    if (!$scope.disabled) {
	                        var key = $event.keyCode | $event.which;
	                        switch (key) {
	                            case $scope.keys.numbers.zero:
	                            case $scope.keys.shiftNumbers.zero:
	                                {
	                                    $scope.competence.evaluation = -1;
	                                }
	                                break;
	                            case $scope.keys.numbers.one:
	                            case $scope.keys.shiftNumbers.one:
	                                {
	                                    $scope.competence.evaluation = 0;
	                                }
	                                break;
	                            case $scope.keys.numbers.two:
	                            case $scope.keys.shiftNumbers.two:
	                                {
	                                    $scope.competence.evaluation = 1;
	                                }
	                                break;
	                            case $scope.keys.numbers.three:
	                            case $scope.keys.shiftNumbers.three:
	                                {
	                                    $scope.competence.evaluation = 2;
	                                }
	                                break;
	                            case $scope.keys.numbers.four:
	                            case $scope.keys.shiftNumbers.four:
	                                {
	                                    $scope.competence.evaluation = 3;
	                                }
	                                break;
	                        }
	                        $scope.$emit('majHeaderColumn', $scope.competence);
	                        $scope.modified = $scope.competence.oldValeur !== $scope.competence.evaluation;
	                    }
	                };
	                $scope.saveCompetence = function () {
	                    if (!$scope.disabled) {
	                        if ($scope.modified === true) {
	                            $scope.competence.save();
	                            $scope.modified = false;
	                        }
	                    }
	                };
	            }]
	    };
	});
	


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.cSkillsColorColumn = entcore_1.ng.directive("cSkillsColorColumn", function () {
	    return {
	        restrict: 'E',
	        scope: {
	            devoir: '=',
	            nameFunction: '=',
	            selectedEleves: '=',
	            selectedCompetences: '=',
	            check: '='
	        },
	        templateUrl: "/" + entcore_1.appPrefix + "/public/components/cSkillsColorColumn.html",
	        controller: ['$scope', function ($scope) {
	                $scope.compteur = 0;
	                $scope.selectCompetences = function (competenceHeader) {
	                    _.each($scope.eleves, function (eleve) {
	                        var competencesNotesEleve = eleve.competencesNotesEleve;
	                        var competenceEleve = _.findWhere(competencesNotesEleve, { id_competence: competenceHeader.id_competence });
	                        competenceEleve.evaluation = competenceHeader.evaluation;
	                    });
	                    $scope.safeApply();
	                };
	                $scope.safeApply = function (fn) {
	                    var phase = this.$root.$$phase;
	                    if (phase === '$apply' || phase === '$digest') {
	                        if (fn && (typeof (fn) === 'function'))
	                            fn();
	                    }
	                    else
	                        this.$apply(fn);
	                };
	                $scope.saveCompetences = function (competenceHeader) {
	                    if (competenceHeader.modified) {
	                        var _data = [];
	                        var range = $scope.selectedEleves.length > 0 ? $scope.selectedEleves : $scope.devoir.eleves.all;
	                        for (var i = 0; i < range.length; i++) {
	                            var competence = range[i].evaluation.competenceNotes.findWhere({ id_competence: competenceHeader.id_competence });
	                            if (competence !== undefined) {
	                                competence.evaluation = competenceHeader.evaluation;
	                                _data.push(competence);
	                            }
	                        }
	                        $scope.devoir.saveCompetencesNotes(_data);
	                        competenceHeader.modified = false;
	                    }
	                };
	                $scope.init = function (competenceHeader) {
	                    competenceHeader.selected = false;
	                    $scope.$on('initHeaderColumn', function () {
	                        competenceHeader.evaluation = -1;
	                        competenceHeader.modified = false;
	                        competenceHeader.nomAvecDomaine = $scope.nameFunction(competenceHeader);
	                        $scope.majHeaderColor(competenceHeader);
	                    });
	                };
	                $scope.switchColor = function (competenceHeader) {
	                    if (competenceHeader.evaluation === -1) {
	                        competenceHeader.evaluation = 3;
	                    }
	                    else {
	                        competenceHeader.evaluation = competenceHeader.evaluation - 1;
	                    }
	                    competenceHeader.modified = true;
	                    $scope.selectCompetences(competenceHeader);
	                };
	                $scope.$on('changeHeaderColumn', function (event, competence) {
	                    var competenceHeader = $scope.devoir.competences.findWhere({ id_competence: competence.id_competence });
	                    $scope.majHeaderColor(competenceHeader);
	                });
	                $scope.majHeaderColor = function (competenceHeader) {
	                    // recuperation de la competence pour chaque eleve
	                    var allCompetencesElevesColumn = [];
	                    _.each($scope.devoir.eleves.all, function (eleve) {
	                        if (eleve.evaluation.competenceNotes !== undefined && eleve.evaluation.competenceNotes.all.length > 0) {
	                            var competenceEleve = eleve.evaluation.competenceNotes.findWhere({ id_competence: competenceHeader.id_competence });
	                            allCompetencesElevesColumn.push(competenceEleve);
	                        }
	                    });
	                    if (allCompetencesElevesColumn !== undefined && allCompetencesElevesColumn.length > 0) {
	                        // si toutes les competences ont la même note on colore evaluation de la même couleur
	                        if (_.every(allCompetencesElevesColumn, function (competence) {
	                            return (competence.evaluation === allCompetencesElevesColumn[0].evaluation);
	                        })) {
	                            competenceHeader.evaluation = allCompetencesElevesColumn[0].evaluation;
	                        }
	                        else {
	                            competenceHeader.evaluation = -1;
	                        }
	                    }
	                    $scope.safeApply();
	                };
	            }]
	    };
	});
	


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.cSkillsColorPage = entcore_1.ng.directive("cSkillsColorPage", function () {
	    return {
	        restrict: 'E',
	        scope: {
	            devoir: '=',
	            selectedEleves: '=',
	            selectedCompetences: '='
	        },
	        templateUrl: "/" + entcore_1.appPrefix + "/public/components/cSkillsColorPage.html",
	        controller: ['$scope', function ($scope) {
	                $scope.selectColor = function () {
	                    //  if(confirm(text) === true){
	                    var evaluation = $scope.eval;
	                    var _datas = [];
	                    var _range = $scope.selectedEleves.list.length > 0 ? $scope.selectedEleves.list
	                        : $scope.devoir.eleves.all;
	                    // Boucle sur les élèves
	                    for (var i = 0; i < _range.length; i++) {
	                        // On récupère l'évaluation de l'élève sur le devoir
	                        var _eval = _range[i].evaluation;
	                        if ($scope.selectedCompetences.length > 0) {
	                            // Si on a des compétences de sélectionnées, on les récupère
	                            var ids = [];
	                            for (var g = 0; g < $scope.selectedCompetences.length; g++) {
	                                ids.push($scope.selectedCompetences[g].id_competence);
	                            }
	                            // Pour chaque compétences Notes de l'élève
	                            for (var j = 0; j < _eval.competenceNotes.all.length; j++) {
	                                if (ids.indexOf(_eval.competenceNotes.all[j].id_competence) !== -1) {
	                                    // Si la compétence est sélectionnée, on l'ajoute
	                                    _eval.competenceNotes.all[j].evaluation = evaluation;
	                                    _datas.push(_eval.competenceNotes.all[j]);
	                                }
	                            }
	                        }
	                        else {
	                            for (var j = 0; j < _eval.competenceNotes.all.length; j++) {
	                                _eval.competenceNotes.all[j].evaluation = evaluation;
	                                _datas.push(_eval.competenceNotes.all[j]);
	                            }
	                        }
	                    }
	                    _.map($scope.selectedCompetences, function (comp) {
	                        $scope.$emit('majHeaderColumn', comp);
	                        comp.selected = false;
	                    });
	                    $scope.selectedCompetences = [];
	                    _.map($scope.selectedEleves.list, function (eleve) {
	                        eleve.selected = false;
	                    });
	                    $scope.selectedEleves.list = [];
	                    $scope.selectedEleves.all = false;
	                    $scope.devoir.saveCompetencesNotes(_datas);
	                    $scope.annuler();
	                    //}
	                };
	                $scope.text = "Cette action va initialiser l'ensemble des compétences à la valeur sélectionnée.\n\n Souhaitez vous continuer ?\n";
	                $scope.eval = "";
	                $scope.opened = {
	                    lightbox: false
	                };
	                $scope.confirme = function (evaluation) {
	                    if ($scope.devoir.endSaisie) {
	                        $scope.text = entcore_1.idiom.translate('evaluations.devoir.uncancelable');
	                    } // des élèves et des compétences sélectionnées
	                    else if ($scope.selectedEleves.list.length > 0 && $scope.selectedCompetences.length > 0) {
	                        $scope.text = "Cette action va évaluer les élèves sélectionnés pour les compétences choisies.";
	                    }
	                    else if ($scope.selectedEleves.list.length > 0 && $scope.selectedCompetences.length === 0) {
	                        $scope.text = "Cette action va évaluer les élèves sélectionnés pour l'ensemble des compétences.";
	                    }
	                    else if ($scope.selectedEleves.list.length === 0 && $scope.selectedCompetences.length === 0) {
	                        $scope.text = "Cette action va évaluer l'ensemble des élèves pour les compétences choisies.";
	                    }
	                    $scope.eval = evaluation;
	                    $scope.opened.lightbox = true;
	                };
	                $scope.annuler = function () {
	                    $scope.text = "Cette action va initialiser l'ensemble des compétences à la valeur sélectionnée.";
	                    $scope.eval = "";
	                    $scope.opened.lightbox = false;
	                };
	            }]
	    };
	});
	


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Created by ledunoiss on 21/09/2016.
	 */
	var entcore_1 = __webpack_require__(2);
	/**
	 * function-filter : méthode qui va checker si l'enseignement parcouru doit être affiché ou non
	 * function-search : méthode qui va déplier les enseignements/compétences qui matche le mot clef recherché. Cette méthode surligne
	 * également les mots recherchés
	 * data : les enseignements parcourus
	 * enseignements-filter : objet où l'on stocke si un enseignement est sélectionné ou non
	 * competences-filter : objet où l'on stocke les noms au format html des compétences (pour le surlignement lors d'une recherche)
	 * search : objet concernant la recherche
	 */
	exports.cSkillsList = entcore_1.ng.directive("cSkillsList", function () {
	    return {
	        restrict: 'E',
	        scope: {
	            data: '=',
	            devoir: '=',
	            functionFilter: '=',
	            functionSearch: '=',
	            enseignementsFilter: '=',
	            competencesFilter: '=',
	            search: '='
	        },
	        templateUrl: "/" + entcore_1.appPrefix + "/public/components/cSkillsList.html",
	        controller: ['$scope', '$sce', '$timeout', function ($scope, $sce, $timeout) {
	                $scope.initCheckBox = function (item, parentItem) {
	                    //item.nomHtml = item.nom;
	                    // on regarde sur l'objet competencesLastDevoirList pour detecter quand il est charge
	                    // et pouvoir deplier l'arbre des competences selectionnees lors du dernier devoir
	                    $scope.$watch('devoir.competencesLastDevoirList', function (newValue, oldValue) {
	                        if (newValue !== oldValue) {
	                            $scope.initCheckBox(item, parentItem);
	                        }
	                    }, true);
	                    var bLastCompetence = (_.findWhere($scope.devoir.competencesLastDevoirList, { id_competence: item.id }) !== undefined);
	                    if (bLastCompetence) {
	                        item.open = true;
	                        var parent = item.composer;
	                        while (parent !== undefined) {
	                            parent.open = true;
	                            parent = parent.composer;
	                        }
	                        $scope.safeApply();
	                    }
	                    return (item.selected = parentItem.enseignement && parentItem.enseignement.selected || item.selected || false);
	                };
	                $scope.initHeader = function (item) {
	                    return (item.open = false);
	                };
	                $scope.safeApply = function (fn) {
	                    var phase = this.$root.$$phase;
	                    if (phase == '$apply' || phase == '$digest') {
	                        if (fn && (typeof (fn) === 'function')) {
	                            fn();
	                        }
	                    }
	                    else {
	                        this.$apply(fn);
	                    }
	                };
	                $scope.doNotApplySearchFilter = function () {
	                    $scope.search.haschange = false;
	                };
	                $scope.toggleCheckbox = function (item, parentItem) {
	                    $scope.emitToggleCheckbox(item, parentItem);
	                    var items = document.getElementsByClassName("competence_" + item.id);
	                    if (items != null && items !== undefined) {
	                        for (var i = 0; i < items.length; i++) {
	                            var sIdCompetence = items[i].getAttribute("id");
	                            // on coche également les compétences similaires à item qui sont dans d'autres enseignements
	                            if ($scope.competencesFilter[item.id + "_" + item.id_enseignement].isSelected !== $scope.competencesFilter[sIdCompetence].isSelected) {
	                                var competenceSimilaire = $scope.competencesFilter[sIdCompetence];
	                                // simulation click
	                                competenceSimilaire.isSelected = $scope.competencesFilter[item.id + "_" + item.id_enseignement].isSelected;
	                                // appel de lamethode toggleCheckBox pour cocher les éventuelles sous competences et le parent
	                                //$scope.toggleCheckbox(competenceSimilaire.data, competenceSimilaire.data.composer)
	                                // si la competence a des sous competences
	                                if (item.competences != undefined && item.competences.all.length > 0) {
	                                    if (competenceSimilaire.data.competences != undefined && competenceSimilaire.data.competences.all.length) {
	                                        // on coche toutes ces sous competences dans l'arbre de la competence similaire
	                                        competenceSimilaire.data.competences.each(function (sousCompSimilaire) {
	                                            // on ne coche QUE ces sous competences par les autres s'il y en a
	                                            // car l'arbre de la competence similaire peut potentiellement contenir d'autres sous compétences
	                                            var bSousCompetenceSimilaireInSousCompetenceOriginal = _.findWhere(item.competences.all, { id: sousCompSimilaire.id }) !== undefined;
	                                            if (bSousCompetenceSimilaireInSousCompetenceOriginal) {
	                                                $scope.competencesFilter[sousCompSimilaire.id + "_" + sousCompSimilaire.id_enseignement].isSelected = competenceSimilaire.isSelected;
	                                            }
	                                        });
	                                    }
	                                }
	                                else {
	                                    $scope.$emit('checkParent', competenceSimilaire.data.composer, competenceSimilaire.data);
	                                }
	                            }
	                        }
	                    }
	                };
	                $scope.emitToggleCheckbox = function (item, parentItem) {
	                    if (item.competences !== undefined && item.competences.all.length > 0) {
	                        $scope.$emit('checkConnaissances', item);
	                    }
	                    else {
	                        $scope.$emit('checkParent', parentItem, item);
	                    }
	                };
	                $scope.$on('checkConnaissances', function (event, parentItem) {
	                    return (parentItem.competences.each(function (e) {
	                        $scope.competencesFilter[e.id + "_" + e.id_enseignement].isSelected = $scope.competencesFilter[parentItem.id + "_" + parentItem.id_enseignement].isSelected;
	                    }));
	                });
	                // item pas utilise ici mais utilise dans la creation d'un devoir
	                $scope.$on('checkParent', function (event, parentItem, item) {
	                    return ($scope.competencesFilter[parentItem.id + "_" + parentItem.id_enseignement].isSelected = parentItem.competences.every(function (e) { return $scope.competencesFilter[e.id + "_" + e.id_enseignement].isSelected === true; }));
	                });
	                // start with the div hidden
	                $scope.hovering = false;
	                // create the timer variable
	                var timer;
	                // mouseenter event
	                $scope.showIt = function (item) {
	                    timer = $timeout(function () {
	                        item.hovering = true;
	                    }, 350);
	                };
	                // mouseleave event
	                $scope.hideIt = function (item) {
	                    $timeout.cancel(timer);
	                    item.hovering = false;
	                };
	            }]
	    };
	});
	


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by ledunoiss on 26/10/2016.
	 */
	"use strict";
	var entcore_1 = __webpack_require__(2);
	exports.autofocus = entcore_1.ng.directive('autofocus', ['$timeout',
	    function ($timeout) {
	        return {
	            restrict: 'A',
	            link: function ($scope, $element) {
	                $timeout(function () {
	                    $element[0].focus();
	                });
	            }
	        };
	    }
	]);
	


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var entcore_1 = __webpack_require__(2);
	var utils = __webpack_require__(10);
	exports.sticky = entcore_1.ng.directive('sticky', ['$window', '$timeout', function ($window, $timeout) {
	        return {
	            restrict: 'A',
	            scope: false,
	            link: function linkFn($scope, $elem, $attrs) {
	                // Initial scope
	                var scrollableNodeTagName = 'sticky-scroll';
	                var initialPosition = $elem.css('position');
	                var initialStyle = $elem.attr('style') || '';
	                var stickyBottomLine = 0;
	                var isSticking = false;
	                var onStickyHeighUnbind;
	                var originalInitialCSS;
	                var originalOffset;
	                var placeholder;
	                var stickyLine;
	                var initialCSS;
	                // Optional Classes
	                var stickyClass = $attrs.stickyClass || '';
	                var unstickyClass = $attrs.unstickyClass || '';
	                var bodyClass = $attrs.bodyClass || '';
	                var bottomClass = $attrs.bottomClass || '';
	                // Find scrollbar
	                var scrollbar = deriveScrollingViewport($elem);
	                // Define elements
	                var windowElement = angular.element($window);
	                var scrollbarElement = angular.element(scrollbar);
	                var $body = angular.element(document.body);
	                // Resize callback
	                var $onResize = function () {
	                    if ($scope.$root && !$scope.$root.$$phase) {
	                        utils.safeApply($scope);
	                    }
	                    else {
	                        onResize();
	                    }
	                };
	                angular.element($elem).ready(function () {
	                    utils.safeApply($scope);
	                });
	                // Define options
	                var usePlaceholder = ($attrs.usePlaceholder !== 'false');
	                var anchor = $attrs.anchor === 'bottom' ? 'bottom' : 'top';
	                var confine = ($attrs.confine === 'true');
	                $scope.disabled = ($attrs.disabled === 'true');
	                // flag: can react to recalculating the initial CSS dimensions later
	                // as link executes prematurely. defaults to immediate checking
	                var isStickyLayoutDeferred = $attrs.isStickyLayoutDeferred !== undefined
	                    ? ($attrs.isStickyLayoutDeferred === 'true')
	                    : false;
	                // flag: is sticky content constantly observed for changes.
	                // Should be true if content uses ngBind to show text
	                // that may vary in size over time
	                var isStickyLayoutWatched = $attrs.isStickyLayoutWatched !== undefined
	                    ? ($attrs.isStickyLayoutWatched === 'true')
	                    : true;
	                var offset = $attrs.offset
	                    ? parseInt($attrs.offset.replace(/px;?/, ''))
	                    : 0;
	                /**
	                 * Trigger to initialize the sticky
	                 * Because of the `timeout()` method for the call of
	                 * @type {Boolean}
	                 */
	                var shouldInitialize = true;
	                /**
	                 * Initialize Sticky
	                 */
	                function initSticky() {
	                    // Listeners
	                    scrollbarElement.on('scroll', checkIfShouldStick);
	                    windowElement.on('resize', $onResize);
	                    memorizeDimensions(); // remember sticky's layout dimensions
	                    setTimeout(function () {
	                        memorizeDimensions();
	                    }, 1000);
	                    checkIfShouldStick();
	                    // Setup watcher on digest and change
	                    $scope.$watch(onDigest, onChange);
	                    // Clean up
	                    $scope.$on('$destroy', onDestroy);
	                    shouldInitialize = false;
	                }
	                ;
	                /**
	                 * need to recall sticky's DOM attributes (make sure layout has occured)
	                 */
	                function memorizeDimensions() {
	                    // immediate assignment, but there is the potential for wrong values if content not ready
	                    initialCSS = $scope.getInitialDimensions();
	                    // option to calculate the dimensions when layout is 'ready'
	                    if (isStickyLayoutDeferred) {
	                        // logic: when this directive link() runs before the content has had a chance to layout on browser, height could be 0
	                        if (!$elem[0].getBoundingClientRect().height) {
	                            onStickyHeighUnbind = $scope.$watch(function () {
	                                return $elem.height();
	                            }, 
	                            // state change: sticky content's height set
	                            function onStickyContentLayoutInitialHeightSet(newValue, oldValue) {
	                                if (newValue > 0) {
	                                    // now can memorize
	                                    initialCSS = $scope.getInitialDimensions();
	                                    if (!isStickyLayoutWatched) {
	                                        // preference was to do just a one-time async watch on the sticky's content; now stop watching
	                                        onStickyHeighUnbind();
	                                    }
	                                }
	                            });
	                        }
	                    }
	                }
	                /**
	                 * Determine if the element should be sticking or not.
	                 */
	                var checkIfShouldStick = function () {
	                    if ($scope.disabled === true || mediaQueryMatches()) {
	                        if (isSticking)
	                            unStickElement();
	                        return false;
	                    }
	                    // What's the document client top for?
	                    var scrollbarPosition = scrollbarYPos();
	                    var shouldStick;
	                    if (anchor === 'top') {
	                        if (confine === true) {
	                            shouldStick = scrollbarPosition > stickyLine && scrollbarPosition <= stickyBottomLine;
	                        }
	                        else {
	                            shouldStick = scrollbarPosition > stickyLine;
	                        }
	                    }
	                    else {
	                        shouldStick = scrollbarPosition <= stickyLine;
	                    }
	                    // Switch the sticky mode if the element crosses the sticky line
	                    // $attrs.stickLimit - when it's equal to true it enables the user
	                    // to turn off the sticky function when the elem height is
	                    // bigger then the viewport
	                    var closestLine = getClosest(scrollbarPosition, stickyLine, stickyBottomLine);
	                    if (shouldStick && !shouldStickWithLimit($attrs.stickLimit) && !isSticking) {
	                        stickElement(closestLine);
	                    }
	                    else if (!shouldStick && isSticking) {
	                        unStickElement(closestLine, scrollbarPosition);
	                    }
	                    else if (confine && !shouldStick) {
	                        // If we are confined to the parent, refresh, and past the stickyBottomLine
	                        // We should 'remember' the original offset and unstick the element which places it at the stickyBottomLine
	                        originalOffset = elementsOffsetFromTop($elem[0]);
	                        unStickElement(closestLine, scrollbarPosition);
	                    }
	                };
	                /**
	                 * determine the respective node that handles scrolling, defaulting to browser window
	                 */
	                function deriveScrollingViewport(stickyNode) {
	                    // derive relevant scrolling by ascending the DOM tree
	                    var match = findAncestorTag(scrollableNodeTagName, stickyNode);
	                    return (match.length === 1) ? match[0] : $window;
	                }
	                /**
	                 * since jqLite lacks closest(), this is a pseudo emulator (by tag name)
	                 */
	                function findAncestorTag(tag, context) {
	                    var m = []; // nodelist container
	                    var n = context.parent(); // starting point
	                    var p;
	                    do {
	                        var node = n[0]; // break out of jqLite
	                        // limit DOM territory
	                        if (node.nodeType !== 1) {
	                            break;
	                        }
	                        // success
	                        if (node.tagName.toUpperCase() === tag.toUpperCase()) {
	                            return n;
	                        }
	                        p = n.parent();
	                        n = p; // set to parent
	                    } while (p.length !== 0);
	                    return m; // empty set
	                }
	                /**
	                 * Seems to be undocumented functionality
	                 */
	                function shouldStickWithLimit(shouldApplyWithLimit) {
	                    return shouldApplyWithLimit === 'true'
	                        ? ($window.innerHeight - ($elem[0].offsetHeight + parseInt(offset)) < 0)
	                        : false;
	                }
	                /**
	                 * Finds the closest value from a set of numbers in an array.
	                 */
	                function getClosest(scrollTop, stickyLine, stickyBottomLine) {
	                    var closest = 'top';
	                    var topDistance = Math.abs(scrollTop - stickyLine);
	                    var bottomDistance = Math.abs(scrollTop - stickyBottomLine);
	                    if (topDistance > bottomDistance) {
	                        closest = 'bottom';
	                    }
	                    return closest;
	                }
	                /**
	                 * Unsticks the element
	                 */
	                function unStickElement(fromDirection, scrollbarPosition) {
	                    if (initialStyle) {
	                        $elem.attr('style', initialStyle);
	                    }
	                    isSticking = false;
	                    initialCSS.width = $scope.getInitialDimensions().width;
	                    $body.removeClass(bodyClass);
	                    $elem.removeClass(stickyClass);
	                    $elem.addClass(unstickyClass);
	                    if (fromDirection === 'top') {
	                        $elem.removeClass(bottomClass);
	                        $elem
	                            .css('z-index', 10)
	                            .css('width', initialCSS.width)
	                            .css('top', initialCSS.top)
	                            .css('position', initialCSS.position)
	                            .css('left', initialCSS.cssLeft)
	                            .css('margin-top', initialCSS.marginTop)
	                            .css('height', initialCSS.height);
	                    }
	                    else if (fromDirection === 'bottom' && confine === true) {
	                        $elem.addClass(bottomClass);
	                        // It's possible to page down page and skip the 'stickElement'.
	                        // In that case we should create a placeholder so the offsets don't get off.
	                        createPlaceholder();
	                        $elem
	                            .css('z-index', 10)
	                            .css('width', initialCSS.width)
	                            .css('top', '')
	                            .css('bottom', 0)
	                            .css('position', 'absolute')
	                            .css('left', initialCSS.cssLeft)
	                            .css('margin-top', initialCSS.marginTop)
	                            .css('margin-bottom', initialCSS.marginBottom)
	                            .css('height', initialCSS.height);
	                    }
	                    if (placeholder && fromDirection === anchor) {
	                        placeholder.remove();
	                    }
	                }
	                /**
	                 * Sticks the element
	                 */
	                function stickElement(closestLine) {
	                    // Set sticky state
	                    isSticking = true;
	                    $timeout(function () {
	                        initialCSS.offsetWidth = $elem[0].offsetWidth;
	                    }, 0);
	                    $body.addClass(bodyClass);
	                    $elem.removeClass(unstickyClass);
	                    $elem.removeClass(bottomClass);
	                    $elem.addClass(stickyClass);
	                    createPlaceholder();
	                    $elem
	                        .css('z-index', '10')
	                        .css('width', $elem[0].offsetWidth + 'px')
	                        .css('position', 'fixed')
	                        .css('left', $elem.css('left').replace('px', '') + 'px')
	                        .css(anchor, (offset + elementsOffsetFromTop(scrollbar)) + 'px')
	                        .css('margin-top', 0);
	                    if (anchor === 'bottom') {
	                        $elem.css('margin-bottom', 0);
	                    }
	                }
	                /**
	                 * Clean up directive
	                 */
	                var onDestroy = function () {
	                    scrollbarElement.off('scroll', checkIfShouldStick);
	                    windowElement.off('resize', $onResize);
	                    $onResize = null;
	                    $body.removeClass(bodyClass);
	                    if (placeholder) {
	                        placeholder.remove();
	                    }
	                };
	                /**
	                 * Updates on resize.
	                 */
	                function onResize() {
	                    unStickElement(anchor);
	                    checkIfShouldStick();
	                }
	                /**
	                 * Triggered on load / digest cycle
	                 * return `0` if the DOM element is hidden
	                 */
	                var onDigest = function () {
	                    if ($scope.disabled === true) {
	                        return unStickElement();
	                    }
	                    var offsetFromTop = elementsOffsetFromTop($elem[0]);
	                    if (offsetFromTop === 0) {
	                        return offsetFromTop;
	                    }
	                    if (anchor === 'top') {
	                        return (originalOffset || offsetFromTop) - elementsOffsetFromTop(scrollbar) + scrollbarYPos();
	                    }
	                    else {
	                        return offsetFromTop - scrollbarHeight() + $elem[0].offsetHeight + scrollbarYPos();
	                    }
	                };
	                /**
	                 * Triggered on change
	                 */
	                var onChange = function (newVal, oldVal) {
	                    /**
	                     * Indicate if the DOM element is showed, or not
	                     * @type {boolean}
	                     */
	                    var elemIsShowed = !!newVal;
	                    /**
	                     * Indicate if the DOM element was showed, or not
	                     * @type {boolean}
	                     */
	                    var elemWasHidden = !oldVal;
	                    var valChange = (newVal !== oldVal || typeof stickyLine === 'undefined');
	                    var notSticking = (!isSticking && !isBottomedOut());
	                    if (valChange && notSticking && newVal > 0 && elemIsShowed) {
	                        stickyLine = newVal - offset;
	                        //Update dimensions of sticky element when is showed
	                        if (elemIsShowed && elemWasHidden) {
	                            $scope.updateStickyContentUpdateDimensions($elem[0].offsetWidth, $elem[0].offsetHeight);
	                        }
	                        // IF the sticky is confined, we want to make sure the parent is relatively positioned,
	                        // otherwise it won't bottom out properly
	                        if (confine) {
	                            $elem.parent().css({
	                                'position': 'relative'
	                            });
	                        }
	                        // Get Parent height, so we know when to bottom out for confined stickies
	                        var parent = $elem.parent()[0];
	                        // Offset parent height by the elements height, if we're not using a placeholder
	                        var parentHeight = parseInt(parent.offsetHeight) - (usePlaceholder ? 0 : $elem[0].offsetHeight);
	                        // and now lets ensure we adhere to the bottom margins
	                        // TODO: make this an attribute? Maybe like ignore-margin?
	                        var marginBottom = parseInt($elem.css('margin-bottom').replace(/px;?/, '')) || 0;
	                        // specify the bottom out line for the sticky to unstick
	                        var elementsDistanceFromTop = elementsOffsetFromTop($elem[0]);
	                        var parentsDistanceFromTop = elementsOffsetFromTop(parent);
	                        var scrollbarDistanceFromTop = elementsOffsetFromTop(scrollbar);
	                        var elementsDistanceFromScrollbarStart = elementsDistanceFromTop - scrollbarDistanceFromTop;
	                        var elementsDistanceFromBottom = parentsDistanceFromTop + parentHeight - elementsDistanceFromTop;
	                        stickyBottomLine = elementsDistanceFromScrollbarStart
	                            + elementsDistanceFromBottom
	                            - $elem[0].offsetHeight
	                            - marginBottom
	                            - offset
	                            + +scrollbarYPos();
	                        checkIfShouldStick();
	                    }
	                };
	                /**
	                 * Helper Functions
	                 */
	                /**
	                 * Create a placeholder
	                 */
	                function createPlaceholder() {
	                    if (usePlaceholder) {
	                        // Remove the previous placeholder
	                        if (placeholder) {
	                            placeholder.remove();
	                        }
	                        placeholder = angular.element('<div>');
	                        var elementsHeight = $elem[0].offsetHeight;
	                        var computedStyle = $elem[0].currentStyle || window.getComputedStyle($elem[0]);
	                        elementsHeight += parseInt(computedStyle.marginTop, 10);
	                        elementsHeight += parseInt(computedStyle.marginBottom, 10);
	                        elementsHeight += parseInt(computedStyle.borderTopWidth, 10);
	                        elementsHeight += parseInt(computedStyle.borderBottomWidth, 10);
	                        placeholder.css('height', $elem[0].offsetHeight + 'px');
	                        $elem.after(placeholder);
	                    }
	                }
	                /**
	                 * Are we bottomed out of the parent element?
	                 */
	                function isBottomedOut() {
	                    if (confine && scrollbarYPos() > stickyBottomLine) {
	                        return true;
	                    }
	                    return false;
	                }
	                /**
	                 * Fetch top offset of element
	                 */
	                function elementsOffsetFromTop(element) {
	                    var offset = 0;
	                    if (element.getBoundingClientRect) {
	                        offset = element.getBoundingClientRect().top;
	                    }
	                    return offset;
	                }
	                /**
	                 * Retrieves top scroll distance
	                 */
	                function scrollbarYPos() {
	                    var position;
	                    if (typeof scrollbar.scrollTop !== 'undefined') {
	                        position = scrollbar.scrollTop;
	                    }
	                    else if (typeof scrollbar.pageYOffset !== 'undefined') {
	                        position = scrollbar.pageYOffset;
	                    }
	                    else {
	                        position = document.documentElement.scrollTop;
	                    }
	                    return position;
	                }
	                /**
	                 * Determine scrollbar's height
	                 */
	                function scrollbarHeight() {
	                    var height;
	                    if (scrollbarElement[0] instanceof HTMLElement) {
	                        // isn't bounding client rect cleaner than insane regex mess?
	                        height = $window.getComputedStyle(scrollbarElement[0], null)
	                            .getPropertyValue('height')
	                            .replace(/px;?/, '');
	                    }
	                    else {
	                        height = $window.innerHeight;
	                    }
	                    return parseInt(height) || 0;
	                }
	                /**
	                 * Checks if the media matches
	                 */
	                function mediaQueryMatches() {
	                    var mediaQuery = $attrs.mediaQuery || false;
	                    var matchMedia = $window.matchMedia;
	                    return mediaQuery && !(matchMedia('(' + mediaQuery + ')').matches || matchMedia(mediaQuery).matches);
	                }
	                /**
	                 * Get more accurate CSS values
	                 */
	                function getCSS($el, prop) {
	                    var el = $el[0], computed = window.getComputedStyle(el), prevDisplay = computed.display, val;
	                    // hide the element so that we can get original css
	                    // values instead of computed values
	                    el.style.display = "none";
	                    // NOTE - computed style declaration object is a reference
	                    // to the element's CSSStyleDeclaration, so it will always
	                    // reflect the current style of the element
	                    val = computed[prop];
	                    // restore previous display value
	                    el.style.display = prevDisplay;
	                    return val;
	                }
	                // public accessors for the controller to hitch into. Helps with external API access
	                $scope.getElement = function () { return $elem; };
	                $scope.getScrollbar = function () { return scrollbar; };
	                $scope.getInitialCSS = function () { return initialCSS; };
	                $scope.getAnchor = function () { return anchor; };
	                $scope.isSticking = function () { return isSticking; };
	                $scope.getOriginalInitialCSS = function () { return originalInitialCSS; };
	                // pass through aliases
	                $scope.processUnStickElement = function (anchor) { unStickElement(anchor); };
	                $scope.processCheckIfShouldStick = function () { checkIfShouldStick(); };
	                /**
	                 * set the dimensions for the defaults of the content block occupied by the sticky element
	                 */
	                $scope.getInitialDimensions = function () {
	                    return {
	                        zIndex: $elem.css('z-index'),
	                        top: $elem.css('top'),
	                        position: initialPosition,
	                        marginTop: $elem.css('margin-top'),
	                        marginBottom: $elem.css('margin-bottom'),
	                        cssLeft: getCSS($elem, 'left'),
	                        width: $elem.css('width'),
	                        height: $elem.css('height')
	                    };
	                };
	                /**
	                 * only change content box dimensions
	                 */
	                $scope.updateStickyContentUpdateDimensions = function (width, height) {
	                    if (width && height) {
	                        initSticky();
	                        initialCSS.width = width + 'px';
	                        initialCSS.height = height + 'px';
	                    }
	                };
	                // ----------- configuration -----------
	                $timeout(function () {
	                    originalInitialCSS = $scope.getInitialDimensions(); // preserve a copy
	                    // Init the directive
	                    initSticky();
	                }, 0);
	            },
	            /**
	             * +++++++++ public APIs+++++++++++++
	             */
	            controller: ['$scope', '$window', function ($scope, $window) {
	                    /**
	                     * integration method allows for an outside client to reset the pinned state back to unpinned.
	                     * Useful for when refreshing the scrollable DIV content completely
	                     * if newWidth and newHeight integer values are not supplied then function will make a best guess
	                     */
	                    this.resetLayout = function (newWidth, newHeight) {
	                        var scrollbar = $scope.getScrollbar(), initialCSS = $scope.getInitialCSS(), anchor = $scope.getAnchor();
	                        function _resetScrollPosition() {
	                            // reset means content is scrolled to anchor position
	                            if (anchor === 'top') {
	                                // window based scroller
	                                if (scrollbar === $window) {
	                                    $window.scrollTo(0, 0);
	                                }
	                                else {
	                                    if (scrollbar.scrollTop > 0) {
	                                        scrollbar.scrollTop = 0;
	                                    }
	                                }
	                            }
	                            // todo: need bottom use case
	                        }
	                        // only if pinned, force unpinning, otherwise height is inadvertently reset to 0
	                        if ($scope.isSticking()) {
	                            $scope.processUnStickElement(anchor);
	                            $scope.processCheckIfShouldStick();
	                        }
	                        // remove layout-affecting attribures that were modified by this sticky
	                        $scope.getElement().css({ 'width': '', 'height': '', 'position': '', 'top': '', zIndex: '' });
	                        // model resets
	                        initialCSS.position = $scope.getOriginalInitialCSS().position; // revert to original state
	                        delete initialCSS.offsetWidth; // stickElement affected
	                        // use this directive element's as default, if no measurements passed in
	                        if (newWidth === undefined && newHeight === undefined) {
	                            var e_bcr = $scope.getElement()[0].getBoundingClientRect();
	                            newWidth = e_bcr.width;
	                            newHeight = e_bcr.height;
	                        }
	                        // update model with new dimensions (if supplied from client's own measurement)
	                        $scope.updateStickyContentUpdateDimensions(newWidth, newHeight); // update layout dimensions only
	                        _resetScrollPosition();
	                    };
	                    /**
	                     * return a reference to the scrolling element (window or DIV with overflow)
	                     */
	                    this.getScrollbar = function () {
	                        return $scope.getScrollbar();
	                    };
	                }]
	        };
	    }]);
	


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by ledunoiss on 09/11/2016.
	 */
	"use strict";
	var entcore_1 = __webpack_require__(2);
	var utils = __webpack_require__(10);
	/**
	 * Directive de proportions de compétences
	 */
	exports.proportionSuiviCompetence = entcore_1.ng.directive('proportionSuiviCompetence', function () {
	    return {
	        restrict: 'E',
	        scope: {
	            evaluations: '=',
	            filter: '=',
	            user: '=',
	            isClasse: '='
	        },
	        templateUrl: "/" + entcore_1.appPrefix + "/public/components/cProportionSuiviCompetence.html",
	        controller: ['$scope', function ($scope) {
	                $scope.isClasse = $scope.isClasse !== undefined ? $scope.isClasse : false;
	                /**
	                 * Listener sur la variable filter. Si modification de la variable, recalcule des proportions
	                 */
	                $scope.$watch('filter', function (newValue, oldValue) {
	                    if (newValue !== oldValue) {
	                        $scope.calculProportion();
	                    }
	                }, true);
	                $scope.$watch('majProportions', function () {
	                    $scope.calculProportion();
	                }, true);
	                /**
	                 * Retourne la valeur d'une clé i18n passées en paramètres
	                 * @param key clé i18n
	                 * @returns {String} valeur i18n
	                 */
	                $scope.translate = function (key) {
	                    return utils.translate(key);
	                };
	                /**
	                 * Calcul la proportion d'évaluations pour une compétence
	                 */
	                $scope.calculProportion = function () {
	                    $scope.competencesEvaluations = $scope.evaluations;
	                    $scope.proportion = [];
	                    for (var i = -1; i < 4; i++) {
	                        $scope.proportion.push({
	                            eval: i,
	                            percent: 0,
	                            nb: 0
	                        });
	                    }
	                    if ($scope.filter.mine === 'true' || $scope.filter.mine === true) {
	                        $scope.competencesEvaluations = _.filter($scope.evaluations, function (evaluation) {
	                            return evaluation.owner === $scope.user.userId;
	                        });
	                    }
	                    if ($scope.competencesEvaluations.length > 0 /*&& !_.every($scope.competencesEvaluations, function (competence) { return competence.evaluation === -1})*/) {
	                        var nbEleves = 0;
	                        if ($scope.isClasse == true) {
	                            var elevesMap = {};
	                            var nbCompetencesEvaluations = $scope.competencesEvaluations.length;
	                            for (var i = 0; i < nbCompetencesEvaluations; ++i) {
	                                var competencesEval = $scope.competencesEvaluations[i];
	                                if (!elevesMap.hasOwnProperty(competencesEval.id_eleve)) {
	                                    elevesMap[competencesEval.id_eleve] = competencesEval;
	                                    $scope.proportion[(competencesEval.evaluation) + 1].nb++;
	                                    nbEleves++;
	                                }
	                                else if (parseInt(elevesMap[competencesEval.id_eleve].evaluation) < parseInt(competencesEval.evaluation)) {
	                                    $scope.proportion[(elevesMap[competencesEval.id_eleve].evaluation) + 1].nb--;
	                                    elevesMap[competencesEval.id_eleve] = competencesEval;
	                                    $scope.proportion[parseInt(competencesEval.evaluation) + 1].nb++;
	                                }
	                            }
	                        }
	                        var nbProportion = $scope.proportion.length;
	                        for (var i = 0; i < nbProportion; ++i) {
	                            if ($scope.isClasse == true) {
	                                // si aucune competence evaluee on n'affiche pas la proportion
	                                if ($scope.proportion[0].percent === 100) {
	                                    $scope.proportion[0].percent = 0;
	                                    $scope.proportion[0].nb = 0;
	                                }
	                                else {
	                                    var nb = $scope.proportion[i].nb;
	                                    $scope.proportion[i].percent = (nb / nbEleves) * 100;
	                                    $scope.proportion[i].nb = nb;
	                                }
	                            }
	                            else {
	                                var nb = _.where($scope.competencesEvaluations, { evaluation: parseInt($scope.proportion[i].eval) });
	                                $scope.proportion[i].percent = (nb.length / $scope.competencesEvaluations.length) * 100;
	                                $scope.proportion[i].nb = nb.length;
	                            }
	                        }
	                    }
	                };
	                $scope.calculProportion();
	            }]
	    };
	});
	


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) Région Hauts-de-France, Département 77, CGI, 2017.
	 *
	 * This file is part of OPEN ENT NG. OPEN ENT NG is a versatile ENT Project based on the JVM and ENT Core Project.
	 *
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU Affero General Public License as
	 * published by the Free Software Foundation (version 3 of the License).
	 * For the sake of explanation, any module that communicate over native
	 * Web protocols, such as HTTP, with OPEN ENT NG is outside the scope of this
	 * license and could be license under its own terms. This is merely considered
	 * normal use of OPEN ENT NG, and does not fall under the heading of "covered work".
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	 *
	 */
	"use strict";
	/**
	 * Angular JS slider directive
	 *
	 * (c) Rafal Zajac <rzajac@gmail.com>
	 * http://github.com/rzajac/angularjs-slider
	 *
	 * Licensed under the MIT license
	 */
	/**
	 * Created by ledunoiss on 09/01/2017.
	 */
	var entcore_1 = __webpack_require__(2);
	exports.rzslider = entcore_1.ng.directive('rzslider', ['$window', '$timeout', '$document',
	    function ($window, $timeout, $document) {
	        return {
	            restrict: 'AE',
	            replace: true,
	            scope: {
	                rzSliderModel: '=?',
	                rzSliderHigh: '=?',
	                rzSliderOptions: '&?',
	                rzSliderTplUrl: '@'
	            },
	            /**
	             * Return template URL
	             *
	             * @param {jqLite} elem
	             * @param {Object} attrs
	             * @return {string}
	             */
	            templateUrl: "/" + entcore_1.appPrefix + "/public/components/slider.html",
	            link: function (scope, elem) {
	                var rzThrottle = function (func, wait, options) {
	                    'use strict';
	                    /* istanbul ignore next */
	                    var getTime = (Date.now || function () {
	                        return new Date().getTime();
	                    });
	                    var context, args, result;
	                    var timeout = null;
	                    var previous = 0;
	                    options = options || {};
	                    var later = function () {
	                        previous = getTime();
	                        timeout = null;
	                        result = func.apply(context, args);
	                        context = args = null;
	                    };
	                    return function () {
	                        var now = getTime();
	                        var remaining = wait - (now - previous);
	                        context = this;
	                        args = arguments;
	                        if (remaining <= 0) {
	                            $timeout.cancel(timeout);
	                            timeout = null;
	                            previous = now;
	                            result = func.apply(context, args);
	                            context = args = null;
	                        }
	                        else if (!timeout && options.trailing !== false) {
	                            timeout = $timeout(later, remaining);
	                        }
	                        return result;
	                    };
	                };
	                var RzSliderOptions = {
	                    defaultOptions: {
	                        floor: 0,
	                        ceil: null,
	                        step: 1,
	                        precision: 0,
	                        minRange: null,
	                        maxRange: null,
	                        pushRange: false,
	                        minLimit: null,
	                        maxLimit: null,
	                        id: null,
	                        translate: null,
	                        getLegend: null,
	                        stepsArray: null,
	                        bindIndexForStepsArray: false,
	                        draggableRange: false,
	                        draggableRangeOnly: false,
	                        showSelectionBar: false,
	                        showSelectionBarEnd: false,
	                        showSelectionBarFromValue: null,
	                        hidePointerLabels: false,
	                        hideLimitLabels: false,
	                        autoHideLimitLabels: true,
	                        readOnly: false,
	                        disabled: false,
	                        interval: 350,
	                        showTicks: false,
	                        showTicksValues: false,
	                        ticksArray: null,
	                        ticksTooltip: null,
	                        ticksValuesTooltip: null,
	                        vertical: false,
	                        getSelectionBarClass: null,
	                        getTickColor: null,
	                        getPointerColor: null,
	                        keyboardSupport: true,
	                        scale: 1,
	                        enforceStep: true,
	                        enforceRange: false,
	                        noSwitching: false,
	                        onlyBindHandles: false,
	                        onStart: null,
	                        onChange: null,
	                        onEnd: null,
	                        rightToLeft: false,
	                        boundPointerLabels: true,
	                        mergeRangeLabelsIfSame: false,
	                        customTemplateScope: null,
	                        logScale: false,
	                        customValueToPosition: null,
	                        customPositionToValue: null,
	                        selectionBarGradient: null
	                    },
	                    globalOptions: {},
	                    options: function (value) {
	                        angular.extend(this.globalOptions, value);
	                    },
	                    getOptions: function (options) {
	                        return angular.extend({}, this.defaultOptions, this.globalOptions, options);
	                    }
	                };
	                // RzSliderOptions.prototype = {
	                //     options : function (value) {
	                //         angular.extend(this.globalOptions, value);
	                //     },
	                //     getOptions : function (options) {
	                //         return angular.extend({}, this.defaultOptions, this.globalOptions, options);
	                //     }
	                // }
	                var RzSlider = function (scope, sliderElem) {
	                    /**
	                     * The slider's scope
	                     *
	                     * @type {ngScope}
	                     */
	                    this.scope = scope;
	                    /**
	                     * The slider inner low value (linked to rzSliderModel)
	                     * @type {number}
	                     */
	                    this.lowValue = 0;
	                    /**
	                     * The slider inner high value (linked to rzSliderHigh)
	                     * @type {number}
	                     */
	                    this.highValue = 0;
	                    /**
	                     * Slider element wrapped in jqLite
	                     *
	                     * @type {jqLite}
	                     */
	                    this.sliderElem = sliderElem;
	                    /**
	                     * Slider type
	                     *
	                     * @type {boolean} Set to true for range slider
	                     */
	                    this.range = this.scope.rzSliderModel !== undefined && this.scope.rzSliderHigh !== undefined;
	                    /**
	                     * Values recorded when first dragging the bar
	                     *
	                     * @type {Object}
	                     */
	                    this.dragging = {
	                        active: false,
	                        value: 0,
	                        difference: 0,
	                        position: 0,
	                        lowLimit: 0,
	                        highLimit: 0
	                    };
	                    /**
	                     * property that handle position (defaults to left for horizontal)
	                     * @type {string}
	                     */
	                    this.positionProperty = 'left';
	                    /**
	                     * property that handle dimension (defaults to width for horizontal)
	                     * @type {string}
	                     */
	                    this.dimensionProperty = 'width';
	                    /**
	                     * Half of the width or height of the slider handles
	                     *
	                     * @type {number}
	                     */
	                    this.handleHalfDim = 0;
	                    /**
	                     * Maximum position the slider handle can have
	                     *
	                     * @type {number}
	                     */
	                    this.maxPos = 0;
	                    /**
	                     * Precision
	                     *
	                     * @type {number}
	                     */
	                    this.precision = 0;
	                    /**
	                     * Step
	                     *
	                     * @type {number}
	                     */
	                    this.step = 1;
	                    /**
	                     * The name of the handle we are currently tracking
	                     *
	                     * @type {string}
	                     */
	                    this.tracking = '';
	                    /**
	                     * Minimum value (floor) of the model
	                     *
	                     * @type {number}
	                     */
	                    this.minValue = 0;
	                    /**
	                     * Maximum value (ceiling) of the model
	                     *
	                     * @type {number}
	                     */
	                    this.maxValue = 0;
	                    /**
	                     * The delta between min and max value
	                     *
	                     * @type {number}
	                     */
	                    this.valueRange = 0;
	                    /**
	                     * If showTicks/showTicksValues options are number.
	                     * In this case, ticks values should be displayed below the slider.
	                     * @type {boolean}
	                     */
	                    this.intermediateTicks = false;
	                    /**
	                     * Set to true if init method already executed
	                     *
	                     * @type {boolean}
	                     */
	                    this.initHasRun = false;
	                    /**
	                     * Used to call onStart on the first keydown event
	                     *
	                     * @type {boolean}
	                     */
	                    this.firstKeyDown = false;
	                    /**
	                     * Internal flag to prevent watchers to be called when the sliders value are modified internally.
	                     * @type {boolean}
	                     */
	                    this.internalChange = false;
	                    /**
	                     * Internal flag to keep track of the visibility of combo label
	                     * @type {boolean}
	                     */
	                    this.cmbLabelShown = false;
	                    /**
	                     * Internal variable to keep track of the focus element
	                     */
	                    this.currentFocusElement = null;
	                    // Slider DOM elements wrapped in jqLite
	                    this.fullBar = null; // The whole slider bar
	                    this.selBar = null; // Highlight between two handles
	                    this.minH = null; // Left slider handle
	                    this.maxH = null; // Right slider handle
	                    this.flrLab = null; // Floor label
	                    this.ceilLab = null; // Ceiling label
	                    this.minLab = null; // Label above the low value
	                    this.maxLab = null; // Label above the high value
	                    this.cmbLab = null; // Combined label
	                    this.ticks = null; // The ticks
	                    // Initialize slider
	                    this.init();
	                };
	                RzSlider.prototype = {
	                    /**
	                     * Initialize slider
	                     *
	                     * @returns {undefined}
	                     */
	                    init: function () {
	                        var thrLow, thrHigh, self = this;
	                        var calcDimFn = function () {
	                            self.calcViewDimensions();
	                        };
	                        this.applyOptions();
	                        this.syncLowValue();
	                        if (this.range)
	                            this.syncHighValue();
	                        this.initElemHandles();
	                        this.manageElementsStyle();
	                        this.setDisabledState();
	                        this.calcViewDimensions();
	                        this.setMinAndMax();
	                        this.addAccessibility();
	                        this.updateCeilLab();
	                        this.updateFloorLab();
	                        this.initHandles();
	                        this.manageEventsBindings();
	                        // Recalculate slider view dimensions
	                        this.scope.$on('reCalcViewDimensions', calcDimFn);
	                        // Recalculate stuff if view port dimensions have changed
	                        angular.element($window).on('resize', calcDimFn);
	                        this.initHasRun = true;
	                        // Watch for changes to the model
	                        thrLow = rzThrottle(function () {
	                            self.onLowHandleChange();
	                        }, self.options.interval);
	                        thrHigh = rzThrottle(function () {
	                            self.onHighHandleChange();
	                        }, self.options.interval);
	                        this.scope.$on('rzSliderForceRender', function () {
	                            self.resetLabelsValue();
	                            thrLow();
	                            if (self.range) {
	                                thrHigh();
	                            }
	                            self.resetSlider();
	                        });
	                        // Watchers (order is important because in case of simultaneous change,
	                        // watchers will be called in the same order)
	                        this.scope.$watch('rzSliderOptions()', function (newValue, oldValue) {
	                            if (newValue === oldValue)
	                                return;
	                            self.applyOptions(); // need to be called before synchronizing the values
	                            self.syncLowValue();
	                            if (self.range)
	                                self.syncHighValue();
	                            self.resetSlider();
	                        }, true);
	                        this.scope.$watch('rzSliderModel', function (newValue, oldValue) {
	                            if (self.internalChange)
	                                return;
	                            if (newValue === oldValue)
	                                return;
	                            thrLow();
	                        });
	                        this.scope.$watch('rzSliderHigh', function (newValue, oldValue) {
	                            if (self.internalChange)
	                                return;
	                            if (newValue === oldValue)
	                                return;
	                            if (newValue != null)
	                                thrHigh();
	                            if (self.range && newValue == null || !self.range && newValue != null) {
	                                self.applyOptions();
	                                self.resetSlider();
	                            }
	                        });
	                        this.scope.$on('$destroy', function () {
	                            self.unbindEvents();
	                            angular.element($window).off('resize', calcDimFn);
	                            self.currentFocusElement = null;
	                        });
	                    },
	                    findStepIndex: function (modelValue) {
	                        var index = 0;
	                        for (var i = 0; i < this.options.stepsArray.length; i++) {
	                            var step = this.options.stepsArray[i];
	                            if (step === modelValue) {
	                                index = i;
	                                break;
	                            }
	                            else if (angular.isDate(step)) {
	                                if (step.getTime() === modelValue.getTime()) {
	                                    index = i;
	                                    break;
	                                }
	                            }
	                            else if (angular.isObject(step)) {
	                                if (angular.isDate(step.value) && step.value.getTime() === modelValue.getTime() || step.value === modelValue) {
	                                    index = i;
	                                    break;
	                                }
	                            }
	                        }
	                        return index;
	                    },
	                    syncLowValue: function () {
	                        if (this.options.stepsArray) {
	                            if (!this.options.bindIndexForStepsArray)
	                                this.lowValue = this.findStepIndex(this.scope.rzSliderModel);
	                            else
	                                this.lowValue = this.scope.rzSliderModel;
	                        }
	                        else
	                            this.lowValue = this.scope.rzSliderModel;
	                    },
	                    syncHighValue: function () {
	                        if (this.options.stepsArray) {
	                            if (!this.options.bindIndexForStepsArray)
	                                this.highValue = this.findStepIndex(this.scope.rzSliderHigh);
	                            else
	                                this.highValue = this.scope.rzSliderHigh;
	                        }
	                        else
	                            this.highValue = this.scope.rzSliderHigh;
	                    },
	                    getStepValue: function (sliderValue) {
	                        var step = this.options.stepsArray[sliderValue];
	                        if (angular.isDate(step))
	                            return step;
	                        if (angular.isObject(step))
	                            return step.value;
	                        return step;
	                    },
	                    applyLowValue: function () {
	                        if (this.options.stepsArray) {
	                            if (!this.options.bindIndexForStepsArray)
	                                this.scope.rzSliderModel = this.getStepValue(this.lowValue);
	                            else
	                                this.scope.rzSliderModel = this.lowValue;
	                        }
	                        else
	                            this.scope.rzSliderModel = this.lowValue;
	                    },
	                    applyHighValue: function () {
	                        if (this.options.stepsArray) {
	                            if (!this.options.bindIndexForStepsArray)
	                                this.scope.rzSliderHigh = this.getStepValue(this.highValue);
	                            else
	                                this.scope.rzSliderHigh = this.highValue;
	                        }
	                        else
	                            this.scope.rzSliderHigh = this.highValue;
	                    },
	                    /*
	                     * Reflow the slider when the low handle changes (called with throttle)
	                     */
	                    onLowHandleChange: function () {
	                        this.syncLowValue();
	                        if (this.range)
	                            this.syncHighValue();
	                        this.setMinAndMax();
	                        this.updateLowHandle(this.valueToPosition(this.lowValue));
	                        this.updateSelectionBar();
	                        this.updateTicksScale();
	                        this.updateAriaAttributes();
	                        if (this.range) {
	                            this.updateCmbLabel();
	                        }
	                    },
	                    /*
	                     * Reflow the slider when the high handle changes (called with throttle)
	                     */
	                    onHighHandleChange: function () {
	                        this.syncLowValue();
	                        this.syncHighValue();
	                        this.setMinAndMax();
	                        this.updateHighHandle(this.valueToPosition(this.highValue));
	                        this.updateSelectionBar();
	                        this.updateTicksScale();
	                        this.updateCmbLabel();
	                        this.updateAriaAttributes();
	                    },
	                    /**
	                     * Read the user options and apply them to the slider model
	                     */
	                    applyOptions: function () {
	                        var sliderOptions;
	                        if (this.scope.rzSliderOptions)
	                            sliderOptions = this.scope.rzSliderOptions();
	                        else
	                            sliderOptions = {};
	                        this.options = RzSliderOptions.getOptions(sliderOptions);
	                        if (this.options.step <= 0)
	                            this.options.step = 1;
	                        this.range = this.scope.rzSliderModel !== undefined && this.scope.rzSliderHigh !== undefined;
	                        this.options.draggableRange = this.range && this.options.draggableRange;
	                        this.options.draggableRangeOnly = this.range && this.options.draggableRangeOnly;
	                        if (this.options.draggableRangeOnly) {
	                            this.options.draggableRange = true;
	                        }
	                        this.options.showTicks = this.options.showTicks || this.options.showTicksValues || !!this.options.ticksArray;
	                        this.scope.showTicks = this.options.showTicks; //scope is used in the template
	                        if (angular.isNumber(this.options.showTicks) || this.options.ticksArray)
	                            this.intermediateTicks = true;
	                        this.options.showSelectionBar = this.options.showSelectionBar || this.options.showSelectionBarEnd
	                            || this.options.showSelectionBarFromValue !== null;
	                        if (this.options.stepsArray) {
	                            this.parseStepsArray();
	                        }
	                        else {
	                            if (this.options.translate)
	                                this.customTrFn = this.options.translate;
	                            else
	                                this.customTrFn = function (value) {
	                                    return String(value);
	                                };
	                            this.getLegend = this.options.getLegend;
	                        }
	                        if (this.options.vertical) {
	                            this.positionProperty = 'bottom';
	                            this.dimensionProperty = 'height';
	                        }
	                        if (this.options.customTemplateScope)
	                            this.scope.custom = this.options.customTemplateScope;
	                    },
	                    parseStepsArray: function () {
	                        this.options.floor = 0;
	                        this.options.ceil = this.options.stepsArray.length - 1;
	                        this.options.step = 1;
	                        if (this.options.translate) {
	                            this.customTrFn = this.options.translate;
	                        }
	                        else {
	                            this.customTrFn = function (modelValue) {
	                                if (this.options.bindIndexForStepsArray)
	                                    return this.getStepValue(modelValue);
	                                return modelValue;
	                            };
	                        }
	                        this.getLegend = function (index) {
	                            var step = this.options.stepsArray[index];
	                            if (angular.isObject(step))
	                                return step.legend;
	                            return null;
	                        };
	                    },
	                    /**
	                     * Resets slider
	                     *
	                     * @returns {undefined}
	                     */
	                    resetSlider: function () {
	                        this.manageElementsStyle();
	                        this.addAccessibility();
	                        this.setMinAndMax();
	                        this.updateCeilLab();
	                        this.updateFloorLab();
	                        this.unbindEvents();
	                        this.manageEventsBindings();
	                        this.setDisabledState();
	                        this.calcViewDimensions();
	                        this.refocusPointerIfNeeded();
	                    },
	                    refocusPointerIfNeeded: function () {
	                        if (this.currentFocusElement) {
	                            this.onPointerFocus(this.currentFocusElement.pointer, this.currentFocusElement.ref);
	                            this.focusElement(this.currentFocusElement.pointer);
	                        }
	                    },
	                    /**
	                     * Set the slider children to variables for easy access
	                     *
	                     * Run only once during initialization
	                     *
	                     * @returns {undefined}
	                     */
	                    initElemHandles: function () {
	                        // Assign all slider elements to object properties for easy access
	                        angular.forEach(this.sliderElem.children(), function (elem, index) {
	                            var jElem = angular.element(elem);
	                            switch (index) {
	                                case 0:
	                                    this.fullBar = jElem;
	                                    break;
	                                case 1:
	                                    this.selBar = jElem;
	                                    break;
	                                case 2:
	                                    this.minH = jElem;
	                                    break;
	                                case 3:
	                                    this.maxH = jElem;
	                                    break;
	                                case 4:
	                                    this.flrLab = jElem;
	                                    break;
	                                case 5:
	                                    this.ceilLab = jElem;
	                                    break;
	                                case 6:
	                                    this.minLab = jElem;
	                                    break;
	                                case 7:
	                                    this.maxLab = jElem;
	                                    break;
	                                case 8:
	                                    this.cmbLab = jElem;
	                                    break;
	                                case 10:
	                                    this.ticks = jElem;
	                                    break;
	                            }
	                        }, this);
	                        // Initialize position cache properties
	                        this.selBar.rzsp = 0;
	                        this.minH.rzsp = 0;
	                        this.maxH.rzsp = 0;
	                        this.flrLab.rzsp = 0;
	                        this.ceilLab.rzsp = 0;
	                        this.minLab.rzsp = 0;
	                        this.maxLab.rzsp = 0;
	                        this.cmbLab.rzsp = 0;
	                    },
	                    /**
	                     * Update each elements style based on options
	                     */
	                    manageElementsStyle: function () {
	                        if (!this.range)
	                            this.maxH.css('display', 'none');
	                        else
	                            this.maxH.css('display', '');
	                        this.alwaysHide(this.flrLab, this.options.showTicksValues || this.options.hideLimitLabels);
	                        this.alwaysHide(this.ceilLab, this.options.showTicksValues || this.options.hideLimitLabels);
	                        var hideLabelsForTicks = this.options.showTicksValues && !this.intermediateTicks;
	                        this.alwaysHide(this.minLab, hideLabelsForTicks || this.options.hidePointerLabels);
	                        this.alwaysHide(this.maxLab, hideLabelsForTicks || !this.range || this.options.hidePointerLabels);
	                        this.alwaysHide(this.cmbLab, hideLabelsForTicks || !this.range || this.options.hidePointerLabels);
	                        this.alwaysHide(this.selBar, !this.range && !this.options.showSelectionBar);
	                        if (this.options.vertical)
	                            this.sliderElem.addClass('rz-vertical');
	                        if (this.options.draggableRange)
	                            this.selBar.addClass('rz-draggable');
	                        else
	                            this.selBar.removeClass('rz-draggable');
	                        if (this.intermediateTicks && this.options.showTicksValues)
	                            this.ticks.addClass('rz-ticks-values-under');
	                    },
	                    alwaysHide: function (el, hide) {
	                        el.rzAlwaysHide = hide;
	                        if (hide)
	                            this.hideEl(el);
	                        else
	                            this.showEl(el);
	                    },
	                    /**
	                     * Manage the events bindings based on readOnly and disabled options
	                     *
	                     * @returns {undefined}
	                     */
	                    manageEventsBindings: function () {
	                        if (this.options.disabled || this.options.readOnly)
	                            this.unbindEvents();
	                        else
	                            this.bindEvents();
	                    },
	                    /**
	                     * Set the disabled state based on rzSliderDisabled
	                     *
	                     * @returns {undefined}
	                     */
	                    setDisabledState: function () {
	                        if (this.options.disabled) {
	                            this.sliderElem.attr('disabled', 'disabled');
	                        }
	                        else {
	                            this.sliderElem.attr('disabled', null);
	                        }
	                    },
	                    /**
	                     * Reset label values
	                     *
	                     * @return {undefined}
	                     */
	                    resetLabelsValue: function () {
	                        this.minLab.rzsv = undefined;
	                        this.maxLab.rzsv = undefined;
	                    },
	                    /**
	                     * Initialize slider handles positions and labels
	                     *
	                     * Run only once during initialization and every time view port changes size
	                     *
	                     * @returns {undefined}
	                     */
	                    initHandles: function () {
	                        this.updateLowHandle(this.valueToPosition(this.lowValue));
	                        /*
	                         the order here is important since the selection bar should be
	                         updated after the high handle but before the combined label
	                         */
	                        if (this.range)
	                            this.updateHighHandle(this.valueToPosition(this.highValue));
	                        this.updateSelectionBar();
	                        if (this.range)
	                            this.updateCmbLabel();
	                        this.updateTicksScale();
	                    },
	                    /**
	                     * Translate value to human readable format
	                     *
	                     * @param {number|string} value
	                     * @param {jqLite} label
	                     * @param {String} which
	                     * @param {boolean} [useCustomTr]
	                     * @returns {undefined}
	                     */
	                    translateFn: function (value, label, which, useCustomTr) {
	                        useCustomTr = useCustomTr === undefined ? true : useCustomTr;
	                        var valStr = '', getDimension = false, noLabelInjection = label.hasClass('no-label-injection');
	                        if (useCustomTr) {
	                            if (this.options.stepsArray && !this.options.bindIndexForStepsArray)
	                                value = this.getStepValue(value);
	                            valStr = String(this.customTrFn(value, this.options.id, which));
	                        }
	                        else {
	                            valStr = String(value);
	                        }
	                        if (label.rzsv === undefined || label.rzsv.length !== valStr.length || (label.rzsv.length > 0 && label.rzsd === 0)) {
	                            getDimension = true;
	                            label.rzsv = valStr;
	                        }
	                        if (!noLabelInjection) {
	                            label.html(valStr);
	                        }
	                        ;
	                        this.scope[which + 'Label'] = valStr;
	                        // Update width only when length of the label have changed
	                        if (getDimension) {
	                            this.getDimension(label);
	                        }
	                    },
	                    /**
	                     * Set maximum and minimum values for the slider and ensure the model and high
	                     * value match these limits
	                     * @returns {undefined}
	                     */
	                    setMinAndMax: function () {
	                        this.step = +this.options.step;
	                        this.precision = +this.options.precision;
	                        this.minValue = this.options.floor;
	                        if (this.options.logScale && this.minValue === 0)
	                            throw Error("Can't use floor=0 with logarithmic scale");
	                        if (this.options.enforceStep) {
	                            this.lowValue = this.roundStep(this.lowValue);
	                            if (this.range)
	                                this.highValue = this.roundStep(this.highValue);
	                        }
	                        if (this.options.ceil != null)
	                            this.maxValue = this.options.ceil;
	                        else
	                            this.maxValue = this.options.ceil = this.range ? this.highValue : this.lowValue;
	                        if (this.options.enforceRange) {
	                            this.lowValue = this.sanitizeValue(this.lowValue);
	                            if (this.range)
	                                this.highValue = this.sanitizeValue(this.highValue);
	                        }
	                        this.applyLowValue();
	                        if (this.range)
	                            this.applyHighValue();
	                        this.valueRange = this.maxValue - this.minValue;
	                    },
	                    /**
	                     * Adds accessibility attributes
	                     *
	                     * Run only once during initialization
	                     *
	                     * @returns {undefined}
	                     */
	                    addAccessibility: function () {
	                        this.minH.attr('role', 'slider');
	                        this.updateAriaAttributes();
	                        if (this.options.keyboardSupport && !(this.options.readOnly || this.options.disabled))
	                            this.minH.attr('tabindex', '0');
	                        else
	                            this.minH.attr('tabindex', '');
	                        if (this.options.vertical)
	                            this.minH.attr('aria-orientation', 'vertical');
	                        if (this.range) {
	                            this.maxH.attr('role', 'slider');
	                            if (this.options.keyboardSupport && !(this.options.readOnly || this.options.disabled))
	                                this.maxH.attr('tabindex', '0');
	                            else
	                                this.maxH.attr('tabindex', '');
	                            if (this.options.vertical)
	                                this.maxH.attr('aria-orientation', 'vertical');
	                        }
	                    },
	                    /**
	                     * Updates aria attributes according to current values
	                     */
	                    updateAriaAttributes: function () {
	                        this.minH.attr({
	                            'aria-valuenow': this.scope.rzSliderModel,
	                            'aria-valuetext': this.customTrFn(this.scope.rzSliderModel, this.options.id, 'model'),
	                            'aria-valuemin': this.minValue,
	                            'aria-valuemax': this.maxValue
	                        });
	                        if (this.range) {
	                            this.maxH.attr({
	                                'aria-valuenow': this.scope.rzSliderHigh,
	                                'aria-valuetext': this.customTrFn(this.scope.rzSliderHigh, this.options.id, 'high'),
	                                'aria-valuemin': this.minValue,
	                                'aria-valuemax': this.maxValue
	                            });
	                        }
	                    },
	                    /**
	                     * Calculate dimensions that are dependent on view port size
	                     *
	                     * Run once during initialization and every time view port changes size.
	                     *
	                     * @returns {undefined}
	                     */
	                    calcViewDimensions: function () {
	                        var handleWidth = this.getDimension(this.minH);
	                        this.handleHalfDim = handleWidth / 2;
	                        this.barDimension = this.getDimension(this.fullBar);
	                        this.maxPos = this.barDimension - handleWidth;
	                        this.getDimension(this.sliderElem);
	                        this.sliderElem.rzsp = this.sliderElem[0].getBoundingClientRect()[this.positionProperty];
	                        if (this.initHasRun) {
	                            this.updateFloorLab();
	                            this.updateCeilLab();
	                            this.initHandles();
	                            var self = this;
	                            $timeout(function () {
	                                self.updateTicksScale();
	                            });
	                        }
	                    },
	                    /**
	                     * Update the ticks position
	                     *
	                     * @returns {undefined}
	                     */
	                    updateTicksScale: function () {
	                        if (!this.options.showTicks)
	                            return;
	                        var ticksArray = this.options.ticksArray || this.getTicksArray(), translate = this.options.vertical ? 'translateY' : 'translateX', self = this;
	                        if (this.options.rightToLeft)
	                            ticksArray.reverse();
	                        this.scope.ticks = ticksArray.map(function (value) {
	                            var position = self.valueToPosition(value);
	                            if (self.options.vertical)
	                                position = self.maxPos - position;
	                            var tick = {
	                                selected: self.isTickSelected(value),
	                                style: {
	                                    transform: translate + '(' + Math.round(position) + 'px)'
	                                },
	                                className: null,
	                                tooltip: null,
	                                tooltipPlacement: null,
	                                value: null,
	                                legend: null,
	                                valueTooltip: null,
	                                valueTooltipPlacement: null
	                            };
	                            if (tick.selected && self.options.getSelectionBarClass) {
	                                tick.className = self.getSelectionBarClass();
	                            }
	                            if (!tick.selected && self.options.getTickColor) {
	                                tick.style['background-color'] = self.getTickColor(value);
	                            }
	                            if (self.options.ticksTooltip) {
	                                tick.tooltip = self.options.ticksTooltip(value);
	                                tick.tooltipPlacement = self.options.vertical ? 'right' : 'top';
	                            }
	                            if (self.options.showTicksValues) {
	                                tick.value = self.getDisplayValue(value, 'tick-value');
	                                if (self.options.ticksValuesTooltip) {
	                                    tick.valueTooltip = self.options.ticksValuesTooltip(value);
	                                    tick.valueTooltipPlacement = self.options.vertical ? 'right' : 'top';
	                                }
	                            }
	                            if (self.getLegend) {
	                                var legend = self.getLegend(value, self.options.id);
	                                if (legend)
	                                    tick.legend = legend;
	                            }
	                            return tick;
	                        });
	                    },
	                    getTicksArray: function () {
	                        var step = this.step, ticksArray = [];
	                        if (this.intermediateTicks)
	                            step = this.options.showTicks;
	                        for (var value = this.minValue; value <= this.maxValue; value += step) {
	                            ticksArray.push(value);
	                        }
	                        return ticksArray;
	                    },
	                    isTickSelected: function (value) {
	                        if (!this.range) {
	                            if (this.options.showSelectionBarFromValue !== null) {
	                                var center = this.options.showSelectionBarFromValue;
	                                if (this.lowValue > center && value >= center && value <= this.lowValue)
	                                    return true;
	                                else if (this.lowValue < center && value <= center && value >= this.lowValue)
	                                    return true;
	                            }
	                            else if (this.options.showSelectionBarEnd) {
	                                if (value >= this.lowValue)
	                                    return true;
	                            }
	                            else if (this.options.showSelectionBar && value <= this.lowValue)
	                                return true;
	                        }
	                        if (this.range && value >= this.lowValue && value <= this.highValue)
	                            return true;
	                        return false;
	                    },
	                    /**
	                     * Update position of the floor label
	                     *
	                     * @returns {undefined}
	                     */
	                    updateFloorLab: function () {
	                        this.translateFn(this.minValue, this.flrLab, 'floor');
	                        this.getDimension(this.flrLab);
	                        var position = this.options.rightToLeft ? this.barDimension - this.flrLab.rzsd : 0;
	                        this.setPosition(this.flrLab, position);
	                    },
	                    /**
	                     * Update position of the ceiling label
	                     *
	                     * @returns {undefined}
	                     */
	                    updateCeilLab: function () {
	                        this.translateFn(this.maxValue, this.ceilLab, 'ceil');
	                        this.getDimension(this.ceilLab);
	                        var position = this.options.rightToLeft ? 0 : this.barDimension - this.ceilLab.rzsd;
	                        this.setPosition(this.ceilLab, position);
	                    },
	                    /**
	                     * Update slider handles and label positions
	                     *
	                     * @param {string} which
	                     * @param {number} newPos
	                     */
	                    updateHandles: function (which, newPos) {
	                        if (which === 'lowValue')
	                            this.updateLowHandle(newPos);
	                        else
	                            this.updateHighHandle(newPos);
	                        this.updateSelectionBar();
	                        this.updateTicksScale();
	                        if (this.range)
	                            this.updateCmbLabel();
	                    },
	                    /**
	                     * Helper function to work out the position for handle labels depending on RTL or not
	                     *
	                     * @param {string} labelName maxLab or minLab
	                     * @param newPos
	                     *
	                     * @returns {number}
	                     */
	                    getHandleLabelPos: function (labelName, newPos) {
	                        var labelRzsd = this[labelName].rzsd, nearHandlePos = newPos - labelRzsd / 2 + this.handleHalfDim, endOfBarPos = this.barDimension - labelRzsd;
	                        if (!this.options.boundPointerLabels)
	                            return nearHandlePos;
	                        if (this.options.rightToLeft && labelName === 'minLab' || !this.options.rightToLeft && labelName === 'maxLab') {
	                            return Math.min(nearHandlePos, endOfBarPos);
	                        }
	                        else {
	                            return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);
	                        }
	                    },
	                    /**
	                     * Update low slider handle position and label
	                     *
	                     * @param {number} newPos
	                     * @returns {undefined}
	                     */
	                    updateLowHandle: function (newPos) {
	                        this.setPosition(this.minH, newPos);
	                        this.translateFn(this.lowValue, this.minLab, 'model');
	                        this.setPosition(this.minLab, this.getHandleLabelPos('minLab', newPos));
	                        if (this.options.getPointerColor) {
	                            var pointercolor = this.getPointerColor('min');
	                            this.scope.minPointerStyle = {
	                                backgroundColor: pointercolor
	                            };
	                        }
	                        if (this.options.autoHideLimitLabels) {
	                            this.shFloorCeil();
	                        }
	                    },
	                    /**
	                     * Update high slider handle position and label
	                     *
	                     * @param {number} newPos
	                     * @returns {undefined}
	                     */
	                    updateHighHandle: function (newPos) {
	                        this.setPosition(this.maxH, newPos);
	                        this.translateFn(this.highValue, this.maxLab, 'high');
	                        this.setPosition(this.maxLab, this.getHandleLabelPos('maxLab', newPos));
	                        if (this.options.getPointerColor) {
	                            var pointercolor = this.getPointerColor('max');
	                            this.scope.maxPointerStyle = {
	                                backgroundColor: pointercolor
	                            };
	                        }
	                        if (this.options.autoHideLimitLabels) {
	                            this.shFloorCeil();
	                        }
	                    },
	                    /**
	                     * Show/hide floor/ceiling label
	                     *
	                     * @returns {undefined}
	                     */
	                    shFloorCeil: function () {
	                        // Show based only on hideLimitLabels if pointer labels are hidden
	                        if (this.options.hidePointerLabels) {
	                            return;
	                        }
	                        var flHidden = false, clHidden = false, isMinLabAtFloor = this.isLabelBelowFloorLab(this.minLab), isMinLabAtCeil = this.isLabelAboveCeilLab(this.minLab), isMaxLabAtCeil = this.isLabelAboveCeilLab(this.maxLab), isCmbLabAtFloor = this.isLabelBelowFloorLab(this.cmbLab), isCmbLabAtCeil = this.isLabelAboveCeilLab(this.cmbLab);
	                        if (isMinLabAtFloor) {
	                            flHidden = true;
	                            this.hideEl(this.flrLab);
	                        }
	                        else {
	                            flHidden = false;
	                            this.showEl(this.flrLab);
	                        }
	                        if (isMinLabAtCeil) {
	                            clHidden = true;
	                            this.hideEl(this.ceilLab);
	                        }
	                        else {
	                            clHidden = false;
	                            this.showEl(this.ceilLab);
	                        }
	                        if (this.range) {
	                            var hideCeil = this.cmbLabelShown ? isCmbLabAtCeil : isMaxLabAtCeil;
	                            var hideFloor = this.cmbLabelShown ? isCmbLabAtFloor : isMinLabAtFloor;
	                            if (hideCeil) {
	                                this.hideEl(this.ceilLab);
	                            }
	                            else if (!clHidden) {
	                                this.showEl(this.ceilLab);
	                            }
	                            // Hide or show floor label
	                            if (hideFloor) {
	                                this.hideEl(this.flrLab);
	                            }
	                            else if (!flHidden) {
	                                this.showEl(this.flrLab);
	                            }
	                        }
	                    },
	                    isLabelBelowFloorLab: function (label) {
	                        var isRTL = this.options.rightToLeft, pos = label.rzsp, dim = label.rzsd, floorPos = this.flrLab.rzsp, floorDim = this.flrLab.rzsd;
	                        return isRTL ?
	                            pos + dim >= floorPos - 2 :
	                            pos <= floorPos + floorDim + 2;
	                    },
	                    isLabelAboveCeilLab: function (label) {
	                        var isRTL = this.options.rightToLeft, pos = label.rzsp, dim = label.rzsd, ceilPos = this.ceilLab.rzsp, ceilDim = this.ceilLab.rzsd;
	                        return isRTL ?
	                            pos <= ceilPos + ceilDim + 2 :
	                            pos + dim >= ceilPos - 2;
	                    },
	                    /**
	                     * Update slider selection bar, combined label and range label
	                     *
	                     * @returns {undefined}
	                     */
	                    updateSelectionBar: function () {
	                        var position = 0, dimension = 0, isSelectionBarFromRight = this.options.rightToLeft ? !this.options.showSelectionBarEnd : this.options.showSelectionBarEnd, positionForRange = this.options.rightToLeft ? this.maxH.rzsp + this.handleHalfDim : this.minH.rzsp + this.handleHalfDim;
	                        if (this.range) {
	                            dimension = Math.abs(this.maxH.rzsp - this.minH.rzsp);
	                            position = positionForRange;
	                        }
	                        else {
	                            if (this.options.showSelectionBarFromValue !== null) {
	                                var center = this.options.showSelectionBarFromValue, centerPosition = this.valueToPosition(center), isModelGreaterThanCenter = this.options.rightToLeft ? this.lowValue <= center : this.lowValue > center;
	                                if (isModelGreaterThanCenter) {
	                                    dimension = this.minH.rzsp - centerPosition;
	                                    position = centerPosition + this.handleHalfDim;
	                                }
	                                else {
	                                    dimension = centerPosition - this.minH.rzsp;
	                                    position = this.minH.rzsp + this.handleHalfDim;
	                                }
	                            }
	                            else if (isSelectionBarFromRight) {
	                                dimension = Math.abs(this.maxPos - this.minH.rzsp) + this.handleHalfDim;
	                                position = this.minH.rzsp + this.handleHalfDim;
	                            }
	                            else {
	                                dimension = Math.abs(this.maxH.rzsp - this.minH.rzsp) + this.handleHalfDim;
	                                position = 0;
	                            }
	                        }
	                        this.setDimension(this.selBar, dimension);
	                        this.setPosition(this.selBar, position);
	                        if (this.options.getSelectionBarClass) {
	                            this.scope.barClass = this.getSelectionBarClass();
	                        }
	                        else if (this.options.selectionBarGradient) {
	                            var offset = this.options.showSelectionBarFromValue !== null ? this.valueToPosition(this.options.showSelectionBarFromValue) : 0;
	                            var reversed = offset - position > 0 || isSelectionBarFromRight, direction = this.options.vertical ? (reversed ? 'bottom' : 'top') : (reversed ? 'left' : 'right');
	                            this.scope.barStyle = {
	                                backgroundImage: 'linear-gradient(to ' + direction + ', ' + this.options.selectionBarGradient.from + ' 0%,' + this.options.selectionBarGradient.to + ' 100%)'
	                            };
	                            if (this.options.vertical) {
	                                this.scope.barStyle.backgroundPosition = 'center ' + (offset + dimension + position + (reversed ? -this.handleHalfDim : 0)) + 'px';
	                                this.scope.barStyle.backgroundSize = '100% ' + (this.barDimension - this.handleHalfDim) + 'px';
	                            }
	                            else {
	                                this.scope.barStyle.backgroundPosition = (offset - position + (reversed ? this.handleHalfDim : 0)) + 'px center';
	                                this.scope.barStyle.backgroundSize = (this.barDimension - this.handleHalfDim) + 'px 100%';
	                            }
	                        }
	                    },
	                    /**
	                     * Wrapper around the getSelectionBarClass of the user to pass to
	                     * correct parameters
	                     */
	                    getSelectionBarClass: function () {
	                        if (this.range)
	                            return this.options.getSelectionBarClass(this.scope.rzSliderModel, this.scope.rzSliderHigh);
	                        return this.options.getSelectionBarClass(this.scope.rzSliderModel);
	                    },
	                    /**
	                     * Wrapper around the getPointerColor of the user to pass to
	                     * correct parameters
	                     */
	                    getPointerColor: function (pointerType) {
	                        if (pointerType === 'max') {
	                            return this.options.getPointerColor(this.scope.rzSliderHigh, pointerType);
	                        }
	                        return this.options.getPointerColor(this.scope.rzSliderModel, pointerType);
	                    },
	                    /**
	                     * Wrapper around the getTickColor of the user to pass to
	                     * correct parameters
	                     */
	                    getTickColor: function (value) {
	                        return this.options.getTickColor(value);
	                    },
	                    /**
	                     * Update combined label position and value
	                     *
	                     * @returns {undefined}
	                     */
	                    updateCmbLabel: function () {
	                        var isLabelOverlap = null;
	                        if (this.options.rightToLeft) {
	                            isLabelOverlap = this.minLab.rzsp - this.minLab.rzsd - 10 <= this.maxLab.rzsp;
	                        }
	                        else {
	                            isLabelOverlap = this.minLab.rzsp + this.minLab.rzsd + 10 >= this.maxLab.rzsp;
	                        }
	                        if (isLabelOverlap) {
	                            var lowTr = this.getDisplayValue(this.lowValue, 'model'), highTr = this.getDisplayValue(this.highValue, 'high'), labelVal = '';
	                            if (this.options.mergeRangeLabelsIfSame && lowTr === highTr) {
	                                labelVal = lowTr;
	                            }
	                            else {
	                                labelVal = this.options.rightToLeft ? highTr + ' - ' + lowTr : lowTr + ' - ' + highTr;
	                            }
	                            this.translateFn(labelVal, this.cmbLab, 'cmb', false);
	                            var pos = this.options.boundPointerLabels ? Math.min(Math.max(this.selBar.rzsp + this.selBar.rzsd / 2 - this.cmbLab.rzsd / 2, 0), this.barDimension - this.cmbLab.rzsd) : this.selBar.rzsp + this.selBar.rzsd / 2 - this.cmbLab.rzsd / 2;
	                            this.setPosition(this.cmbLab, pos);
	                            this.cmbLabelShown = true;
	                            this.hideEl(this.minLab);
	                            this.hideEl(this.maxLab);
	                            this.showEl(this.cmbLab);
	                        }
	                        else {
	                            this.cmbLabelShown = false;
	                            this.showEl(this.maxLab);
	                            this.showEl(this.minLab);
	                            this.hideEl(this.cmbLab);
	                        }
	                        if (this.options.autoHideLimitLabels) {
	                            this.shFloorCeil();
	                        }
	                    },
	                    /**
	                     * Return the translated value if a translate function is provided else the original value
	                     * @param value
	                     * @param which if it's min or max handle
	                     * @returns {*}
	                     */
	                    getDisplayValue: function (value, which) {
	                        if (this.options.stepsArray && !this.options.bindIndexForStepsArray) {
	                            value = this.getStepValue(value);
	                        }
	                        return this.customTrFn(value, this.options.id, which);
	                    },
	                    /**
	                     * Round value to step and precision based on minValue
	                     *
	                     * @param {number} value
	                     * @param {number} customStep a custom step to override the defined step
	                     * @returns {number}
	                     */
	                    roundStep: function (value, customStep) {
	                        var step = customStep ? customStep : this.step;
	                        var steppedDifference = parseFloat(((value - this.minValue) / step).toString()).toPrecision(12);
	                        steppedDifference = (Math.round(+steppedDifference) * step).toString();
	                        var newValue = (this.minValue + parseFloat(steppedDifference)).toFixed(this.precision);
	                        return +newValue;
	                    },
	                    /**
	                     * Hide element
	                     *
	                     * @param element
	                     * @returns {jqLite} The jqLite wrapped DOM element
	                     */
	                    hideEl: function (element) {
	                        return element.css({
	                            visibility: 'hidden'
	                        });
	                    },
	                    /**
	                     * Show element
	                     *
	                     * @param element The jqLite wrapped DOM element
	                     * @returns {jqLite} The jqLite
	                     */
	                    showEl: function (element) {
	                        if (!!element.rzAlwaysHide) {
	                            return element;
	                        }
	                        return element.css({
	                            visibility: 'visible'
	                        });
	                    },
	                    /**
	                     * Set element left/top position depending on whether slider is horizontal or vertical
	                     *
	                     * @param {jqLite} elem The jqLite wrapped DOM element
	                     * @param {number} pos
	                     * @returns {number}
	                     */
	                    setPosition: function (elem, pos) {
	                        elem.rzsp = pos;
	                        var css = {};
	                        css[this.positionProperty] = Math.round(pos) + 'px';
	                        elem.css(css);
	                        return pos;
	                    },
	                    /**
	                     * Get element width/height depending on whether slider is horizontal or vertical
	                     *
	                     * @param {jqLite} elem The jqLite wrapped DOM element
	                     * @returns {number}
	                     */
	                    getDimension: function (elem) {
	                        var val = elem[0].getBoundingClientRect();
	                        if (this.options.vertical)
	                            elem.rzsd = (val.bottom - val.top) * this.options.scale;
	                        else
	                            elem.rzsd = (val.right - val.left) * this.options.scale;
	                        return elem.rzsd;
	                    },
	                    /**
	                     * Set element width/height depending on whether slider is horizontal or vertical
	                     *
	                     * @param {jqLite} elem  The jqLite wrapped DOM element
	                     * @param {number} dim
	                     * @returns {number}
	                     */
	                    setDimension: function (elem, dim) {
	                        elem.rzsd = dim;
	                        var css = {};
	                        css[this.dimensionProperty] = Math.round(dim) + 'px';
	                        elem.css(css);
	                        return dim;
	                    },
	                    /**
	                     * Returns a value that is within slider range
	                     *
	                     * @param {number} val
	                     * @returns {number}
	                     */
	                    sanitizeValue: function (val) {
	                        return Math.min(Math.max(val, this.minValue), this.maxValue);
	                    },
	                    /**
	                     * Translate value to pixel position
	                     *
	                     * @param {number} val
	                     * @returns {number}
	                     */
	                    valueToPosition: function (val) {
	                        var fn = this.linearValueToPosition;
	                        if (this.options.customValueToPosition)
	                            fn = this.options.customValueToPosition;
	                        else if (this.options.logScale)
	                            fn = this.logValueToPosition;
	                        val = this.sanitizeValue(val);
	                        var percent = fn(val, this.minValue, this.maxValue) || 0;
	                        if (this.options.rightToLeft)
	                            percent = 1 - percent;
	                        return percent * this.maxPos;
	                    },
	                    linearValueToPosition: function (val, minVal, maxVal) {
	                        var range = maxVal - minVal;
	                        return (val - minVal) / range;
	                    },
	                    logValueToPosition: function (val, minVal, maxVal) {
	                        val = Math.log(val);
	                        minVal = Math.log(minVal);
	                        maxVal = Math.log(maxVal);
	                        var range = maxVal - minVal;
	                        return (val - minVal) / range;
	                    },
	                    /**
	                     * Translate position to model value
	                     *
	                     * @param {number} position
	                     * @returns {number}
	                     */
	                    positionToValue: function (position) {
	                        var percent = position / this.maxPos;
	                        if (this.options.rightToLeft)
	                            percent = 1 - percent;
	                        var fn = this.linearPositionToValue;
	                        if (this.options.customPositionToValue)
	                            fn = this.options.customPositionToValue;
	                        else if (this.options.logScale)
	                            fn = this.logPositionToValue;
	                        return fn(percent, this.minValue, this.maxValue) || 0;
	                    },
	                    linearPositionToValue: function (percent, minVal, maxVal) {
	                        return percent * (maxVal - minVal) + minVal;
	                    },
	                    logPositionToValue: function (percent, minVal, maxVal) {
	                        minVal = Math.log(minVal);
	                        maxVal = Math.log(maxVal);
	                        var value = percent * (maxVal - minVal) + minVal;
	                        return Math.exp(value);
	                    },
	                    // Events
	                    /**
	                     * Get the X-coordinate or Y-coordinate of an event
	                     *
	                     * @param {Object} event  The event
	                     * @returns {number}
	                     */
	                    getEventXY: function (event) {
	                        /* http://stackoverflow.com/a/12336075/282882 */
	                        //noinspection JSLint
	                        var clientXY = this.options.vertical ? 'clientY' : 'clientX';
	                        if (event[clientXY] !== undefined) {
	                            return event[clientXY];
	                        }
	                        return event.originalEvent === undefined ?
	                            event.touches[0][clientXY] : event.originalEvent.touches[0][clientXY];
	                    },
	                    /**
	                     * Compute the event position depending on whether the slider is horizontal or vertical
	                     * @param event
	                     * @returns {number}
	                     */
	                    getEventPosition: function (event) {
	                        var sliderPos = this.sliderElem.rzsp, eventPos = 0;
	                        if (this.options.vertical)
	                            eventPos = -this.getEventXY(event) + sliderPos;
	                        else
	                            eventPos = this.getEventXY(event) - sliderPos;
	                        return eventPos * this.options.scale - this.handleHalfDim; // #346 handleHalfDim is already scaled
	                    },
	                    /**
	                     * Get event names for move and event end
	                     *
	                     * @param {Event}    event    The event
	                     *
	                     * @return {{moveEvent: string, endEvent: string}}
	                     */
	                    getEventNames: function (event) {
	                        var eventNames = {
	                            moveEvent: '',
	                            endEvent: ''
	                        };
	                        if (event.touches || (event.originalEvent !== undefined && event.originalEvent.touches)) {
	                            eventNames.moveEvent = 'touchmove';
	                            eventNames.endEvent = 'touchend';
	                        }
	                        else {
	                            eventNames.moveEvent = 'mousemove';
	                            eventNames.endEvent = 'mouseup';
	                        }
	                        return eventNames;
	                    },
	                    /**
	                     * Get the handle closest to an event.
	                     *
	                     * @param event {Event} The event
	                     * @returns {jqLite} The handle closest to the event.
	                     */
	                    getNearestHandle: function (event) {
	                        if (!this.range) {
	                            return this.minH;
	                        }
	                        var position = this.getEventPosition(event), distanceMin = Math.abs(position - this.minH.rzsp), distanceMax = Math.abs(position - this.maxH.rzsp);
	                        if (distanceMin < distanceMax)
	                            return this.minH;
	                        else if (distanceMin > distanceMax)
	                            return this.maxH;
	                        else if (!this.options.rightToLeft)
	                            //if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH
	                            return position < this.minH.rzsp ? this.minH : this.maxH;
	                        else
	                            //reverse in rtl
	                            return position > this.minH.rzsp ? this.minH : this.maxH;
	                    },
	                    /**
	                     * Wrapper function to focus an angular element
	                     *
	                     * @param el {AngularElement} the element to focus
	                     */
	                    focusElement: function (el) {
	                        var DOM_ELEMENT = 0;
	                        el[DOM_ELEMENT].focus();
	                    },
	                    /**
	                     * Bind mouse and touch events to slider handles
	                     *
	                     * @returns {undefined}
	                     */
	                    bindEvents: function () {
	                        var barTracking, barStart, barMove;
	                        if (this.options.draggableRange) {
	                            barTracking = 'rzSliderDrag';
	                            barStart = this.onDragStart;
	                            barMove = this.onDragMove;
	                        }
	                        else {
	                            barTracking = 'lowValue';
	                            barStart = this.onStart;
	                            barMove = this.onMove;
	                        }
	                        if (!this.options.onlyBindHandles) {
	                            this.selBar.on('mousedown', angular.bind(this, barStart, null, barTracking));
	                            this.selBar.on('mousedown', angular.bind(this, barMove, this.selBar));
	                        }
	                        if (this.options.draggableRangeOnly) {
	                            this.minH.on('mousedown', angular.bind(this, barStart, null, barTracking));
	                            this.maxH.on('mousedown', angular.bind(this, barStart, null, barTracking));
	                        }
	                        else {
	                            this.minH.on('mousedown', angular.bind(this, this.onStart, this.minH, 'lowValue'));
	                            if (this.range) {
	                                this.maxH.on('mousedown', angular.bind(this, this.onStart, this.maxH, 'highValue'));
	                            }
	                            if (!this.options.onlyBindHandles) {
	                                this.fullBar.on('mousedown', angular.bind(this, this.onStart, null, null));
	                                this.fullBar.on('mousedown', angular.bind(this, this.onMove, this.fullBar));
	                                this.ticks.on('mousedown', angular.bind(this, this.onStart, null, null));
	                                this.ticks.on('mousedown', angular.bind(this, this.onTickClick, this.ticks));
	                            }
	                        }
	                        if (!this.options.onlyBindHandles) {
	                            this.selBar.on('touchstart', angular.bind(this, barStart, null, barTracking));
	                            this.selBar.on('touchstart', angular.bind(this, barMove, this.selBar));
	                        }
	                        if (this.options.draggableRangeOnly) {
	                            this.minH.on('touchstart', angular.bind(this, barStart, null, barTracking));
	                            this.maxH.on('touchstart', angular.bind(this, barStart, null, barTracking));
	                        }
	                        else {
	                            this.minH.on('touchstart', angular.bind(this, this.onStart, this.minH, 'lowValue'));
	                            if (this.range) {
	                                this.maxH.on('touchstart', angular.bind(this, this.onStart, this.maxH, 'highValue'));
	                            }
	                            if (!this.options.onlyBindHandles) {
	                                this.fullBar.on('touchstart', angular.bind(this, this.onStart, null, null));
	                                this.fullBar.on('touchstart', angular.bind(this, this.onMove, this.fullBar));
	                                this.ticks.on('touchstart', angular.bind(this, this.onStart, null, null));
	                                this.ticks.on('touchstart', angular.bind(this, this.onTickClick, this.ticks));
	                            }
	                        }
	                        if (this.options.keyboardSupport) {
	                            this.minH.on('focus', angular.bind(this, this.onPointerFocus, this.minH, 'lowValue'));
	                            if (this.range) {
	                                this.maxH.on('focus', angular.bind(this, this.onPointerFocus, this.maxH, 'highValue'));
	                            }
	                        }
	                    },
	                    /**
	                     * Unbind mouse and touch events to slider handles
	                     *
	                     * @returns {undefined}
	                     */
	                    unbindEvents: function () {
	                        this.minH.off();
	                        this.maxH.off();
	                        this.fullBar.off();
	                        this.selBar.off();
	                        this.ticks.off();
	                    },
	                    /**
	                     * onStart event handler
	                     *
	                     * @param {?Object} pointer The jqLite wrapped DOM element; if null, the closest handle is used
	                     * @param {?string} ref     The name of the handle being changed; if null, the closest handle's value is modified
	                     * @param {Event}   event   The event
	                     * @returns {undefined}
	                     */
	                    onStart: function (pointer, ref, event) {
	                        var ehMove, ehEnd, eventNames = this.getEventNames(event);
	                        event.stopPropagation();
	                        event.preventDefault();
	                        // We have to do this in case the HTML where the sliders are on
	                        // have been animated into view.
	                        this.calcViewDimensions();
	                        if (pointer) {
	                            this.tracking = ref;
	                        }
	                        else {
	                            pointer = this.getNearestHandle(event);
	                            this.tracking = pointer === this.minH ? 'lowValue' : 'highValue';
	                        }
	                        pointer.addClass('rz-active');
	                        if (this.options.keyboardSupport)
	                            this.focusElement(pointer);
	                        ehMove = angular.bind(this, this.dragging.active ? this.onDragMove : this.onMove, pointer);
	                        ehEnd = angular.bind(this, this.onEnd, ehMove);
	                        $document.on(eventNames.moveEvent, ehMove);
	                        $document.one(eventNames.endEvent, ehEnd);
	                        this.callOnStart();
	                    },
	                    /**
	                     * onMove event handler
	                     *
	                     * @param {jqLite} pointer
	                     * @param {Event}  event The event
	                     * @param {boolean}  fromTick if the event occured on a tick or not
	                     * @returns {undefined}
	                     */
	                    onMove: function (pointer, event, fromTick) {
	                        var newPos = this.getEventPosition(event), newValue, ceilValue = this.options.rightToLeft ? this.minValue : this.maxValue, flrValue = this.options.rightToLeft ? this.maxValue : this.minValue;
	                        fromTick = true;
	                        if (newPos <= 0) {
	                            newValue = flrValue;
	                        }
	                        else if (newPos >= this.maxPos) {
	                            newValue = ceilValue;
	                        }
	                        else {
	                            newValue = this.positionToValue(newPos);
	                            if (fromTick && angular.isNumber(this.options.showTicks))
	                                newValue = this.roundStep(newValue, this.options.showTicks);
	                            else
	                                newValue = this.roundStep(newValue);
	                        }
	                        if (newValue !== 0) {
	                            this.positionTrackingHandle(newValue);
	                        }
	                    },
	                    /**
	                     * onEnd event handler
	                     *
	                     * @param {Event}    event    The event
	                     * @param {Function} ehMove   The the bound move event handler
	                     * @returns {undefined}
	                     */
	                    onEnd: function (ehMove, event) {
	                        var moveEventName = this.getEventNames(event).moveEvent;
	                        if (!this.options.keyboardSupport) {
	                            this.minH.removeClass('rz-active');
	                            this.maxH.removeClass('rz-active');
	                            this.tracking = '';
	                        }
	                        this.dragging.active = false;
	                        $document.off(moveEventName, ehMove);
	                        this.callOnEnd();
	                    },
	                    onTickClick: function (pointer, event) {
	                        this.onMove(pointer, event, true);
	                    },
	                    onPointerFocus: function (pointer, ref) {
	                        this.tracking = ref;
	                        pointer.one('blur', angular.bind(this, this.onPointerBlur, pointer));
	                        pointer.on('keydown', angular.bind(this, this.onKeyboardEvent));
	                        pointer.on('keyup', angular.bind(this, this.onKeyUp));
	                        this.firstKeyDown = true;
	                        pointer.addClass('rz-active');
	                        this.currentFocusElement = {
	                            pointer: pointer,
	                            ref: ref
	                        };
	                    },
	                    onKeyUp: function () {
	                        this.firstKeyDown = true;
	                        this.callOnEnd();
	                    },
	                    onPointerBlur: function (pointer) {
	                        pointer.off('keydown');
	                        pointer.off('keyup');
	                        this.tracking = '';
	                        pointer.removeClass('rz-active');
	                        this.currentFocusElement = null;
	                    },
	                    /**
	                     * Key actions helper function
	                     *
	                     * @param {number} currentValue value of the slider
	                     *
	                     * @returns {?Object} action value mappings
	                     */
	                    getKeyActions: function (currentValue) {
	                        var increaseStep = currentValue + this.step, decreaseStep = currentValue - this.step, increasePage = currentValue + this.valueRange / 10, decreasePage = currentValue - this.valueRange / 10;
	                        //Left to right default actions
	                        var actions = {
	                            'UP': increaseStep,
	                            'DOWN': decreaseStep,
	                            'LEFT': decreaseStep,
	                            'RIGHT': increaseStep,
	                            'PAGEUP': increasePage,
	                            'PAGEDOWN': decreasePage,
	                            'HOME': this.minValue,
	                            'END': this.maxValue
	                        };
	                        //right to left means swapping right and left arrows
	                        if (this.options.rightToLeft) {
	                            actions.LEFT = increaseStep;
	                            actions.RIGHT = decreaseStep;
	                            // right to left and vertical means we also swap up and down
	                            if (this.options.vertical) {
	                                actions.UP = decreaseStep;
	                                actions.DOWN = increaseStep;
	                            }
	                        }
	                        return actions;
	                    },
	                    onKeyboardEvent: function (event) {
	                        var currentValue = this[this.tracking], keyCode = event.keyCode || event.which, keys = {
	                            38: 'UP',
	                            40: 'DOWN',
	                            37: 'LEFT',
	                            39: 'RIGHT',
	                            33: 'PAGEUP',
	                            34: 'PAGEDOWN',
	                            36: 'HOME',
	                            35: 'END'
	                        }, actions = this.getKeyActions(currentValue), key = keys[keyCode], action = actions[key];
	                        if (action == null || this.tracking === '')
	                            return;
	                        event.preventDefault();
	                        if (this.firstKeyDown) {
	                            this.firstKeyDown = false;
	                            this.callOnStart();
	                        }
	                        var self = this;
	                        $timeout(function () {
	                            var newValue = self.roundStep(self.sanitizeValue(action));
	                            if (!self.options.draggableRangeOnly) {
	                                if (newValue !== 0) {
	                                    self.positionTrackingHandle(newValue);
	                                }
	                            }
	                            else {
	                                var difference = self.highValue - self.lowValue, newMinValue, newMaxValue;
	                                if (self.tracking === 'lowValue') {
	                                    newMinValue = newValue;
	                                    newMaxValue = newValue + difference;
	                                    if (newMaxValue > self.maxValue) {
	                                        newMaxValue = self.maxValue;
	                                        newMinValue = newMaxValue - difference;
	                                    }
	                                }
	                                else {
	                                    newMaxValue = newValue;
	                                    newMinValue = newValue - difference;
	                                    if (newMinValue < self.minValue) {
	                                        newMinValue = self.minValue;
	                                        newMaxValue = newMinValue + difference;
	                                    }
	                                }
	                                if (newValue !== 0) {
	                                    this.positionTrackingHandle(newValue);
	                                }
	                            }
	                        });
	                    },
	                    /**
	                     * onDragStart event handler
	                     *
	                     * Handles dragging of the middle bar.
	                     *
	                     * @param {Object} pointer The jqLite wrapped DOM element
	                     * @param {string} ref     One of the refLow, refHigh values
	                     * @param {Event}  event   The event
	                     * @returns {undefined}
	                     */
	                    onDragStart: function (pointer, ref, event) {
	                        var position = this.getEventPosition(event);
	                        this.dragging = {
	                            active: true,
	                            value: this.positionToValue(position),
	                            difference: this.highValue - this.lowValue,
	                            lowLimit: this.options.rightToLeft ? this.minH.rzsp - position : position - this.minH.rzsp,
	                            highLimit: this.options.rightToLeft ? position - this.maxH.rzsp : this.maxH.rzsp - position
	                        };
	                        this.onStart(pointer, ref, event);
	                    },
	                    /**
	                     * getValue helper function
	                     *
	                     * gets max or min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
	                     *
	                     * @param {string} type 'max' || 'min' The value we are calculating
	                     * @param {number} newPos  The new position
	                     * @param {boolean} outOfBounds Is the new position above or below the max/min?
	                     * @param {boolean} isAbove Is the new position above the bar if out of bounds?
	                     *
	                     * @returns {number}
	                     */
	                    getValue: function (type, newPos, outOfBounds, isAbove) {
	                        var isRTL = this.options.rightToLeft, value = null;
	                        if (type === 'min') {
	                            if (outOfBounds) {
	                                if (isAbove) {
	                                    value = isRTL ? this.minValue : this.maxValue - this.dragging.difference;
	                                }
	                                else {
	                                    value = isRTL ? this.maxValue - this.dragging.difference : this.minValue;
	                                }
	                            }
	                            else {
	                                value = isRTL ? this.positionToValue(newPos + this.dragging.lowLimit) : this.positionToValue(newPos - this.dragging.lowLimit);
	                            }
	                        }
	                        else {
	                            if (outOfBounds) {
	                                if (isAbove) {
	                                    value = isRTL ? this.minValue + this.dragging.difference : this.maxValue;
	                                }
	                                else {
	                                    value = isRTL ? this.maxValue : this.minValue + this.dragging.difference;
	                                }
	                            }
	                            else {
	                                if (isRTL) {
	                                    value = this.positionToValue(newPos + this.dragging.lowLimit) + this.dragging.difference;
	                                }
	                                else {
	                                    value = this.positionToValue(newPos - this.dragging.lowLimit) + this.dragging.difference;
	                                }
	                            }
	                        }
	                        return this.roundStep(value);
	                    },
	                    /**
	                     * onDragMove event handler
	                     *
	                     * Handles dragging of the middle bar.
	                     *
	                     * @param {jqLite} pointer
	                     * @param {Event}  event The event
	                     * @returns {undefined}
	                     */
	                    onDragMove: function (pointer, event) {
	                        var newPos = this.getEventPosition(event), newMinValue, newMaxValue, ceilLimit, flrLimit, isUnderFlrLimit, isOverCeilLimit, flrH, ceilH;
	                        if (this.options.rightToLeft) {
	                            ceilLimit = this.dragging.lowLimit;
	                            flrLimit = this.dragging.highLimit;
	                            flrH = this.maxH;
	                            ceilH = this.minH;
	                        }
	                        else {
	                            ceilLimit = this.dragging.highLimit;
	                            flrLimit = this.dragging.lowLimit;
	                            flrH = this.minH;
	                            ceilH = this.maxH;
	                        }
	                        isUnderFlrLimit = newPos <= flrLimit;
	                        isOverCeilLimit = newPos >= this.maxPos - ceilLimit;
	                        if (isUnderFlrLimit) {
	                            if (flrH.rzsp === 0)
	                                return;
	                            newMinValue = this.getValue('min', newPos, true, false);
	                            newMaxValue = this.getValue('max', newPos, true, false);
	                        }
	                        else if (isOverCeilLimit) {
	                            if (ceilH.rzsp === this.maxPos)
	                                return;
	                            newMaxValue = this.getValue('max', newPos, true, true);
	                            newMinValue = this.getValue('min', newPos, true, true);
	                        }
	                        else {
	                            newMinValue = this.getValue('min', newPos, false);
	                            newMaxValue = this.getValue('max', newPos, false);
	                        }
	                        this.positionTrackingBar(newMinValue, newMaxValue);
	                    },
	                    /**
	                     * Set the new value and position for the entire bar
	                     *
	                     * @param {number} newMinValue   the new minimum value
	                     * @param {number} newMaxValue   the new maximum value
	                     */
	                    positionTrackingBar: function (newMinValue, newMaxValue) {
	                        if (this.options.minLimit != null && newMinValue < this.options.minLimit) {
	                            newMinValue = this.options.minLimit;
	                            newMaxValue = newMinValue + this.dragging.difference;
	                        }
	                        if (this.options.maxLimit != null && newMaxValue > this.options.maxLimit) {
	                            newMaxValue = this.options.maxLimit;
	                            newMinValue = newMaxValue - this.dragging.difference;
	                        }
	                        this.lowValue = newMinValue;
	                        this.highValue = newMaxValue;
	                        this.applyLowValue();
	                        if (this.range)
	                            this.applyHighValue();
	                        this.applyModel();
	                        this.updateHandles('lowValue', this.valueToPosition(newMinValue));
	                        this.updateHandles('highValue', this.valueToPosition(newMaxValue));
	                    },
	                    /**
	                     * Set the new value and position to the current tracking handle
	                     *
	                     * @param {number} newValue new model value
	                     */
	                    positionTrackingHandle: function (newValue) {
	                        var valueChanged = false;
	                        newValue = this.applyMinMaxLimit(newValue);
	                        if (this.range) {
	                            if (this.options.pushRange) {
	                                newValue = this.applyPushRange(newValue);
	                                valueChanged = true;
	                            }
	                            else {
	                                if (this.options.noSwitching) {
	                                    if (this.tracking === 'lowValue' && newValue > this.highValue)
	                                        newValue = this.applyMinMaxRange(this.highValue);
	                                    else if (this.tracking === 'highValue' && newValue < this.lowValue)
	                                        newValue = this.applyMinMaxRange(this.lowValue);
	                                }
	                                newValue = this.applyMinMaxRange(newValue);
	                                /* This is to check if we need to switch the min and max handles */
	                                if (this.tracking === 'lowValue' && newValue > this.highValue) {
	                                    this.lowValue = this.highValue;
	                                    this.applyLowValue();
	                                    this.updateHandles(this.tracking, this.maxH.rzsp);
	                                    this.updateAriaAttributes();
	                                    this.tracking = 'highValue';
	                                    this.minH.removeClass('rz-active');
	                                    this.maxH.addClass('rz-active');
	                                    if (this.options.keyboardSupport)
	                                        this.focusElement(this.maxH);
	                                    valueChanged = true;
	                                }
	                                else if (this.tracking === 'highValue' && newValue < this.lowValue) {
	                                    this.highValue = this.lowValue;
	                                    this.applyHighValue();
	                                    this.updateHandles(this.tracking, this.minH.rzsp);
	                                    this.updateAriaAttributes();
	                                    this.tracking = 'lowValue';
	                                    this.maxH.removeClass('rz-active');
	                                    this.minH.addClass('rz-active');
	                                    if (this.options.keyboardSupport)
	                                        this.focusElement(this.minH);
	                                    valueChanged = true;
	                                }
	                            }
	                        }
	                        if (this[this.tracking] !== newValue) {
	                            this[this.tracking] = newValue;
	                            if (this.tracking === 'lowValue')
	                                this.applyLowValue();
	                            else
	                                this.applyHighValue();
	                            this.updateHandles(this.tracking, this.valueToPosition(newValue));
	                            this.updateAriaAttributes();
	                            valueChanged = true;
	                        }
	                        if (valueChanged)
	                            this.applyModel();
	                    },
	                    applyMinMaxLimit: function (newValue) {
	                        if (this.options.minLimit != null && newValue < this.options.minLimit)
	                            return this.options.minLimit;
	                        if (this.options.maxLimit != null && newValue > this.options.maxLimit)
	                            return this.options.maxLimit;
	                        return newValue;
	                    },
	                    applyMinMaxRange: function (newValue) {
	                        var oppositeValue = this.tracking === 'lowValue' ? this.highValue : this.lowValue, difference = Math.abs(newValue - oppositeValue);
	                        if (this.options.minRange != null) {
	                            if (difference < this.options.minRange) {
	                                if (this.tracking === 'lowValue')
	                                    return this.highValue - this.options.minRange;
	                                else
	                                    return this.lowValue + this.options.minRange;
	                            }
	                        }
	                        if (this.options.maxRange != null) {
	                            if (difference > this.options.maxRange) {
	                                if (this.tracking === 'lowValue')
	                                    return this.highValue - this.options.maxRange;
	                                else
	                                    return this.lowValue + this.options.maxRange;
	                            }
	                        }
	                        return newValue;
	                    },
	                    applyPushRange: function (newValue) {
	                        var difference = this.tracking === 'lowValue' ? this.highValue - newValue : newValue - this.lowValue, minRange = this.options.minRange !== null ? this.options.minRange : this.options.step, maxRange = this.options.maxRange;
	                        // if smaller than minRange
	                        if (difference < minRange) {
	                            if (this.tracking === 'lowValue') {
	                                this.highValue = Math.min(newValue + minRange, this.maxValue);
	                                newValue = this.highValue - minRange;
	                                this.applyHighValue();
	                                this.updateHandles('highValue', this.valueToPosition(this.highValue));
	                            }
	                            else {
	                                this.lowValue = Math.max(newValue - minRange, this.minValue);
	                                newValue = this.lowValue + minRange;
	                                this.applyLowValue();
	                                this.updateHandles('lowValue', this.valueToPosition(this.lowValue));
	                            }
	                            this.updateAriaAttributes();
	                        }
	                        else if (maxRange !== null && difference > maxRange) {
	                            if (this.tracking === 'lowValue') {
	                                this.highValue = newValue + maxRange;
	                                this.applyHighValue();
	                                this.updateHandles('highValue', this.valueToPosition(this.highValue));
	                            }
	                            else {
	                                this.lowValue = newValue - maxRange;
	                                this.applyLowValue();
	                                this.updateHandles('lowValue', this.valueToPosition(this.lowValue));
	                            }
	                            this.updateAriaAttributes();
	                        }
	                        return newValue;
	                    },
	                    /**
	                     * Apply the model values using scope.$apply.
	                     * We wrap it with the internalChange flag to avoid the watchers to be called
	                     */
	                    applyModel: function () {
	                        this.internalChange = true;
	                        this.scope.$apply();
	                        this.callOnChange();
	                        this.internalChange = false;
	                    },
	                    /**
	                     * Call the onStart callback if defined
	                     * The callback call is wrapped in a $evalAsync to ensure that its result will be applied to the scope.
	                     *
	                     * @returns {undefined}
	                     */
	                    callOnStart: function () {
	                        if (this.options.onStart) {
	                            var self = this, pointerType = this.tracking === 'lowValue' ? 'min' : 'max';
	                            this.scope.$evalAsync(function () {
	                                self.options.onStart(self.options.id, self.scope.rzSliderModel, self.scope.rzSliderHigh, pointerType);
	                            });
	                        }
	                    },
	                    /**
	                     * Call the onChange callback if defined
	                     * The callback call is wrapped in a $evalAsync to ensure that its result will be applied to the scope.
	                     *
	                     * @returns {undefined}
	                     */
	                    callOnChange: function () {
	                        if (this.options.onChange) {
	                            var self = this, pointerType = this.tracking === 'lowValue' ? 'min' : 'max';
	                            this.scope.$evalAsync(function () {
	                                self.options.onChange(self.options.id, self.scope.rzSliderModel, self.scope.rzSliderHigh, pointerType);
	                            });
	                        }
	                    },
	                    /**
	                     * Call the onEnd callback if defined
	                     * The callback call is wrapped in a $evalAsync to ensure that its result will be applied to the scope.
	                     *
	                     * @returns {undefined}
	                     */
	                    callOnEnd: function () {
	                        if (this.options.onEnd) {
	                            var self = this, pointerType = this.tracking === 'lowValue' ? 'min' : 'max';
	                            this.scope.$evalAsync(function () {
	                                self.options.onEnd(self.options.id, self.scope.rzSliderModel, self.scope.rzSliderHigh, pointerType);
	                            });
	                        }
	                        this.scope.$emit('slideEnded');
	                    }
	                };
	                scope.slider = new RzSlider(scope, elem); //attach on scope so we can test it
	            }
	        };
	    }]);
	


/***/ }
/******/ ]);

//# sourceMappingURL=eval_teachers-d2edf70536.js.map
